<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>在SpringCloud中如何获取用户真实IP(避免各种问题)</title>
      <link href="/posts/1f6ffb2c.html"/>
      <url>/posts/1f6ffb2c.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>大家平时获取用户的真实IP的时候可能会遇到的一些问题 如果发生问题可以按照以下思路排查应该会帮到你</p></blockquote><h2 id="1、查看Nginx配置">1、查看Nginx配置</h2><blockquote><p>一般情况下，我们的项目都是通过Nginx进行代理的，所以我们需要查看Nginx的配置文件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line"></span><br><span class="line">proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">2. 使用X-Forwarded-For头字段：类似于X-Real-IP，可以使用X-Forwarded-For头字段来传递客户端的真实IP地址。在NGINX配置文件中，可以通过添加如下代码来设置X-Forwarded-For头字段的值：</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line"></span><br><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>查看是否有以上配置进行了代理转发</p></blockquote><h2 id="2、查看GateWay配置-如果单体项目没有使用网关忽略">2、查看GateWay配置(如果单体项目没有使用网关忽略)</h2><blockquote><p>首先要查看网关中的过滤器链里边所有的自定义过滤器有没有对请求头进行了修改，如果有修改的话请根据当前业务进行适当的修改</p></blockquote><h2 id="3、查看是否调用了Fegin接口">3、查看是否调用了Fegin接口</h2><blockquote><p>如果调用了Fegin接口的话，他默认是不携带多余请求头的，所以我们要对齐进行配置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeignAuthRequestInterceptor</span> <span class="keyword">implements</span> <span class="title class_">RequestInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">apply</span><span class="params">(RequestTemplate requestTemplate)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取当前的ServletRequestAttributes</span></span><br><span class="line">        <span class="type">ServletRequestAttributes</span> <span class="variable">attributes</span> <span class="operator">=</span> (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        <span class="keyword">if</span> (attributes != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 获取原始的HttpServletRequest</span></span><br><span class="line">            <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> attributes.getRequest();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 遍历所有的请求头</span></span><br><span class="line">            Enumeration&lt;String&gt; headerNames = request.getHeaderNames();</span><br><span class="line">            <span class="keyword">while</span> (headerNames.hasMoreElements()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">headerName</span> <span class="operator">=</span> headerNames.nextElement();</span><br><span class="line">                <span class="type">String</span> <span class="variable">headerValue</span> <span class="operator">=</span> request.getHeader(headerName);</span><br><span class="line">                <span class="comment">// 这个地方一定要加上，否则会出现一些问题</span></span><br><span class="line">                <span class="keyword">if</span> (headerName.equals(<span class="string">&quot;content-length&quot;</span>))&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 将请求头添加到Feign的RequestTemplate</span></span><br><span class="line">                requestTemplate.header(headerName, headerValue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 实用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 真实项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目如何适配国产海量数据库</title>
      <link href="/posts/29bb76eb.html"/>
      <url>/posts/29bb76eb.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、当前使用ORM框架以及配置">1、当前使用ORM框架以及配置</h2><ol><li>当前我使用的ORM框架是：Mybatis-Plus，然后进行了多租户的配置</li><li>使用依赖如下：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.gitee.sunchenbin.mybatis.actable<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-enhance-actable<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-annotation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.yulichang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-join-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、开始进行适配">2、开始进行适配</h2><h3 id="2-1、配置文件修改">2.1、配置文件修改</h3><p>当前配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mysql:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://xxxxxxx:33306/ai_boot?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=true&amp;autoReconnect=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">密码</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">tenant:</span></span><br><span class="line">    <span class="attr">prefix:</span> <span class="string">ai_boot_</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">ip地址</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">33306</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">密码</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><blockquote><p>只需要将url中的mysql改为postgresql即可<br>注意：postgresql的驱动类是：org.postgresql.Driver<br>要注意的是：postgresql的url中需要指定currentSchema=xxxx 这是一个默认访问的数据库，在多租户配置下需要注意</p></blockquote><p>修改后的配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mysql:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:postgresql://ip:5432/ai?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=true&amp;autoReconnect=true&amp;currentSchema=ai_boot</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">密码</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">org.postgresql.Driver</span></span><br><span class="line">  <span class="attr">tenant:</span></span><br><span class="line">    <span class="attr">prefix:</span> <span class="string">ai_boot_</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">xxxxx</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5432</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">密码</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">org.postgresql.Driver</span></span><br></pre></td></tr></table></figure><p>新引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入postgresql驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.postgresql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>postgresql<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入vastbase-jdbc --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.com.vastdata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>vastbase-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8v<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 实用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vastbase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>合并excel并筛选指定表头数据</title>
      <link href="/posts/3a2a4cae.html"/>
      <url>/posts/3a2a4cae.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、需求">1、需求</h2><blockquote><p>有多个excel文件，每个文件都有多个表头，现在需要将这些excel文件合并成一个excel文件，并且筛选出指定表头的数据。</p></blockquote><h2 id="2、代码">2、代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;OriginalFile&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String originalDocument;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;finalDocument&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String finalDocument;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findColumnIndex</span><span class="params">(Sheet sheet, String headerName)</span> &#123;</span><br><span class="line">    <span class="type">Row</span> <span class="variable">headerRow</span> <span class="operator">=</span> sheet.getRow(<span class="number">0</span>); <span class="comment">// 假设第一行是表头</span></span><br><span class="line">    <span class="keyword">if</span> (headerRow != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Cell cell : headerRow) &#123;</span><br><span class="line">            <span class="keyword">if</span> (headerName.equals(cell.getStringCellValue())) &#123;</span><br><span class="line">                <span class="keyword">return</span> cell.getColumnIndex();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// 如果未找到，返回-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">CommandLineRunner <span class="title function_">commandLineRunner</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> args -&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">folderPath</span> <span class="operator">=</span> originalDocument; <span class="comment">// Excel文件夹的路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">outputPath</span> <span class="operator">=</span> finalDocument; <span class="comment">// 输出文件的路径</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Workbook</span> <span class="variable">newWorkbook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>()) &#123;</span><br><span class="line">            <span class="type">Sheet</span> <span class="variable">newSheet</span> <span class="operator">=</span> newWorkbook.createSheet(<span class="string">&quot;Merged Data&quot;</span>);</span><br><span class="line">            AtomicReference&lt;Row&gt; newRow = <span class="keyword">new</span> <span class="title class_">AtomicReference</span>&lt;&gt;(newSheet.createRow(<span class="number">0</span>));</span><br><span class="line">            newRow.get().createCell(<span class="number">0</span>).setCellValue(<span class="string">&quot;题名&quot;</span>);</span><br><span class="line">            newRow.get().createCell(<span class="number">1</span>).setCellValue(<span class="string">&quot;文种&quot;</span>);</span><br><span class="line">            newRow.get().createCell(<span class="number">2</span>).setCellValue(<span class="string">&quot;内容&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">AtomicInteger</span> <span class="variable">newRowNum</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            Files.walk(Paths.get(folderPath))</span><br><span class="line">                    .filter(Files::isRegularFile)</span><br><span class="line">                    .filter(path -&gt; path.toString().endsWith(<span class="string">&quot;.xlsx&quot;</span>))</span><br><span class="line">                    .forEach(path -&gt; &#123;</span><br><span class="line">                        <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(path.toFile());</span><br><span class="line">                             <span class="type">Workbook</span> <span class="variable">workbook</span> <span class="operator">=</span> WorkbookFactory.create(is)) &#123;</span><br><span class="line">                            <span class="type">Sheet</span> <span class="variable">sheet</span> <span class="operator">=</span> workbook.getSheetAt(<span class="number">0</span>); <span class="comment">// 假设数据在第一个Sheet</span></span><br><span class="line">                            <span class="type">int</span> <span class="variable">titleIndex</span> <span class="operator">=</span> findColumnIndex(sheet, <span class="string">&quot;题名&quot;</span>);</span><br><span class="line">                            <span class="type">int</span> <span class="variable">typeIndex</span> <span class="operator">=</span> findColumnIndex(sheet, <span class="string">&quot;文种&quot;</span>);</span><br><span class="line">                            <span class="type">int</span> <span class="variable">contentIndex</span> <span class="operator">=</span> findColumnIndex(sheet, <span class="string">&quot;内容&quot;</span>);</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 跳过表头，从第二行开始读取数据</span></span><br><span class="line">                            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= sheet.getLastRowNum(); i++) &#123;</span><br><span class="line">                                <span class="type">Row</span> <span class="variable">row</span> <span class="operator">=</span> sheet.getRow(i);</span><br><span class="line">                                <span class="keyword">if</span> (row != <span class="literal">null</span>) &#123;</span><br><span class="line">                                    newRow.set(newSheet.createRow(newRowNum.getAndIncrement()));</span><br><span class="line">                                    <span class="keyword">if</span> (titleIndex != -<span class="number">1</span>) &#123;</span><br><span class="line">                                        newRow.get().createCell(<span class="number">0</span>).setCellValue(row.getCell(titleIndex).getStringCellValue());</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">if</span> (typeIndex != -<span class="number">1</span>) &#123;</span><br><span class="line">                                        newRow.get().createCell(<span class="number">1</span>).setCellValue(row.getCell(typeIndex).getStringCellValue());</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">if</span> (contentIndex != -<span class="number">1</span>) &#123;</span><br><span class="line">                                        newRow.get().createCell(<span class="number">2</span>).setCellValue(row.getCell(contentIndex).getStringCellValue());</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                            log.info(e);</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> (<span class="type">OutputStream</span> <span class="variable">fileOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(outputPath)) &#123;</span><br><span class="line">                newWorkbook.write(fileOut);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Forest对接谷歌Gemini</title>
      <link href="/posts/c3461094.html"/>
      <url>/posts/c3461094.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、前置需要">1、前置需要</h2><blockquote><p>申请Gemini账号，并获取API Key</p></blockquote><p>官网地址：<a href="https://makersuite.google.com/app/apikey">Gemini</a></p><h2 id="2、测试所引入依赖">2、测试所引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dtflys.forest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>forest-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.33<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!-- 或更高版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!-- 或更高版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!-- 或更高版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3、yml文件配置">3、yml文件配置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">forest:</span></span><br><span class="line">  <span class="attr">variables:</span></span><br><span class="line">    <span class="attr">gemini:</span></span><br><span class="line">      <span class="comment">#proxies: https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent  这个是普通请求</span></span><br><span class="line">      <span class="attr">proxies:</span> <span class="string">https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:streamGenerateContent</span> <span class="comment"># 这个是流式请求</span></span><br><span class="line">      <span class="attr">key:</span> <span class="string">YOUR_API_KEY</span> <span class="comment"># 这里是你申请的apikey</span></span><br><span class="line">  <span class="attr">max-connections:</span> <span class="number">1000</span>        <span class="comment"># 连接池最大连接数</span></span><br><span class="line">  <span class="attr">connect-timeout:</span> <span class="number">300000</span>        <span class="comment"># 连接超时时间，单位为毫秒</span></span><br><span class="line">  <span class="attr">read-timeout:</span> <span class="number">300000</span>           <span class="comment"># 数据读取超时时间，单位为毫秒</span></span><br></pre></td></tr></table></figure><h2 id="4、创建接口">4、创建接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造AI中台请求接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Eliauk，微信：Cizai_，邮箱：zang.dromara.org &lt;br/&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/2/5 &lt;br/&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Copyright</span> 博客：https://eliauku.gitee.io/  ||  per aspera and astra &lt;br/&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AIMiddlePlatform</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostRequest(url =&quot;$&#123;gemini.proxies&#125;&quot; + &quot;?&quot; + &quot;key=&quot; + &quot;$&#123;gemini.key&#125;&quot;,</span></span><br><span class="line"><span class="meta">    headers = &#123;&quot;Accept: text/event-stream&quot;,&quot;User-Agent: fastchat Client&quot;&#125;)</span></span><br><span class="line">    InputStream <span class="title function_">intelligentQA</span><span class="params">(<span class="meta">@JSONBody</span> JSONObject params)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、调用接口">5、调用接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Eliauk，微信：Cizai_，邮箱：zang.dromara.org &lt;br/&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/2/18 &lt;br/&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Copyright</span> 博客：https://eliauku.gitee.io/  ||  per aspera and astra &lt;br/&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AiController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AIMiddlePlatform aimiddlePlatform;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">nonBlockingService</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/ai&quot;,produces = MediaType.TEXT_EVENT_STREAM_VALUE)</span></span><br><span class="line">    <span class="keyword">public</span> SseEmitter <span class="title function_">ai</span><span class="params">(<span class="meta">@RequestParam</span> String text)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">SseEmitter</span> <span class="variable">sseEmitter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SseEmitter</span>();</span><br><span class="line"></span><br><span class="line">        nonBlockingService.execute(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 使用Jackson构建JSON对象</span></span><br><span class="line">            <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">            <span class="type">ObjectNode</span> <span class="variable">textPart</span> <span class="operator">=</span> mapper.createObjectNode().put(<span class="string">&quot;text&quot;</span>, text);</span><br><span class="line"></span><br><span class="line">            <span class="type">ArrayNode</span> <span class="variable">partsArray</span> <span class="operator">=</span> mapper.createArrayNode().add(textPart);</span><br><span class="line">            <span class="type">ObjectNode</span> <span class="variable">contentsObject</span> <span class="operator">=</span> mapper.createObjectNode().set(<span class="string">&quot;parts&quot;</span>, partsArray);</span><br><span class="line">            <span class="type">ArrayNode</span> <span class="variable">contentsArray</span> <span class="operator">=</span> mapper.createArrayNode().add(contentsObject);</span><br><span class="line">            <span class="type">ObjectNode</span> <span class="variable">requestBody</span> <span class="operator">=</span> mapper.createObjectNode().set(<span class="string">&quot;contents&quot;</span>, contentsArray);</span><br><span class="line"></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">result</span> <span class="operator">=</span> aimiddlePlatform.intelligentQA(requestBody);</span><br><span class="line"></span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">try</span> (<span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(result, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">                 <span class="type">JsonParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JsonFactory</span>(mapper).createParser(br)) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (!parser.isClosed()) &#123;</span><br><span class="line">                    <span class="type">JsonToken</span> <span class="variable">jsonToken</span> <span class="operator">=</span> parser.nextToken();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (jsonToken == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (JsonToken.FIELD_NAME.equals(jsonToken) &amp;&amp; <span class="string">&quot;text&quot;</span>.equals(parser.getCurrentName())) &#123;</span><br><span class="line">                        parser.nextToken(); <span class="comment">// 移动到字段值</span></span><br><span class="line">                        sb.append(parser.getValueAsString()).append(<span class="string">&quot;\n&quot;</span>); <span class="comment">// 收集&quot;text&quot;字段的值</span></span><br><span class="line">                        System.out.println(parser.getValueAsString());</span><br><span class="line">                        sseEmitter.send(parser.getValueAsString());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span> &#123;</span><br><span class="line">                sseEmitter.complete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sseEmitter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以得到流式相应的结果了。<br><img src="https://zang-1307996497.cos.ap-beijing.myqcloud.com/undefined20240218154111.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> chat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决缓存穿透、缓存雪崩和缓存击穿</title>
      <link href="/posts/c41f22e7.html"/>
      <url>/posts/c41f22e7.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、实际场景">1、实际场景</h2><blockquote><p>有一个短链接跳转的sass系统，假设客户很多，在短链接进行跳转时肯定会用到redis这就涉及到了缓存穿透 缓存雪崩 缓存击穿等问题</p></blockquote><h3 id="1-1、有关短链接的解释如下">1.1、有关短链接的解释如下</h3><p>短链接平台是一种在线服务，它将长的网址（URL）转换为更短的链接。这些短链接更便于分享，特别是在字符数有限的环境中，比如社交媒体平台。使用短链接平台不仅可以节省空间，还可以提供额外的功能，如点击统计、自定义短链接、以及访问控制等。<br>短链接的典型格式是由平台的域名加上一串字符组成，这串字符代表了原始的长链接。当用户点击这个短链接时，短链接平台会自动将用户重定向到原始的长链接所指向的网页。这个过程对用户来说是透明的，他们可能根本意识不到链接已经被转换和重定向了。<br>短链接平台的一些常见应用包括但不限于：</p><ul><li>在社交媒体上分享链接，尤其是在Twitter这样字符限制的平台上。</li><li>在印刷材料上，如名片或广告，使用短链接可以节省空间，同时也便于记忆。</li><li>跟踪营销活动的效果，通过不同的短链接来跟踪点击率和用户行为。</li><li>为了美观或保密目的，隐藏原始链接的复杂性或长度。</li></ul><h3 id="1-2、有关缓存击穿、雪崩与穿透">1.2、有关缓存击穿、雪崩与穿透</h3><p>Redis作为一种常用的内存数据存储系统，经常被用作缓存来提高数据访问的速度和效率。然而，在使用Redis作为缓存时，可能会遇到几种典型的问题，包括缓存穿透、缓存雪崩和缓存击穿。这些问题都可能对系统的性能和稳定性产生负面影响。下面分别解释这三种情况：</p><h4 id="1-2-1、缓存穿透">1.2.1、缓存穿透</h4><p>缓存穿透是指查询一个数据库中不存在的数据。由于缓存是不命中的，每次查询都会穿过缓存去查询数据库。如果有大量这样的查询，数据库就会受到很大的压力。缓存穿透的一个典型场景是恶意用户故意查询不存在的数据，使得数据库压力增大。</p><p>解决办法:</p><ul><li>布隆过滤器: 使用布隆过滤器预先过滤掉可能不存在的数据请求。</li><li>缓存空对象: 当数据库中查询不到数据时，仍然将这个查询的结果（空对象）缓存起来，并设置一个较短的过期时间。</li></ul><h4 id="1-2-2、缓存雪崩">1.2.2、缓存雪崩</h4><p>缓存雪崩是指在某一个时间点，由于大量的缓存同时过期，导致原本应该命中缓存的请求都落到了数据库上，从而引发数据库瞬时压力过大。这种情况可能由缓存服务器重启或者大量缓存设置了相同的过期时间引起。</p><p>解决办法:</p><ul><li>设置不同的过期时间: 使缓存的过期时间分散开，避免同时大量缓存过期。</li><li>缓存预热: 在缓存到期前，提前对缓存进行更新。<br>使用高可用的缓存架构: 比如使用Redis集群来提高缓存系统的稳定性。</li></ul><h4 id="1-2-3、缓存击穿">1.2.3、缓存击穿</h4><p>缓存击穿与缓存穿透不同，它是指缓存中有这个数据，但是已经过期，此时有大量并发请求这个数据。因为缓存没有命中，所有的请求都去数据库查询数据，然后重新设置到缓存中，这可能会对数据库造成巨大压力。</p><p>解决办法:</p><ul><li>设置热点数据永不过期: 对于一些经常被大量访问的热点数据，可以设置其永不过期。</li><li>互斥锁: 当缓存失效时，不是所有的请求都去数据库加载数据，而是使用某种机制（如分布式锁）保证只有一个请求去数据库加载数据，其他请求等待。</li></ul><h2 id="2、如何解决">2、如何解决</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">restoreUrl</span><span class="params">(String shortUri, ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取完整短链接</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">fullShortUrl</span> <span class="operator">=</span> request.getServerName() + <span class="string">&quot;/&quot;</span> + shortUri;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从缓存中获取短链接所对应的完整链接</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalLink</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(String.format(RedisKeyConstant.GOTO_SHORT_LINK_KEY, fullShortUrl));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 缓存存在的话直接进行短链接跳转</span></span><br><span class="line">        <span class="keyword">if</span> (Opp.ofStr(originalLink).isPresent()) &#123;</span><br><span class="line"></span><br><span class="line">            ((HttpServletResponse) response).sendRedirect(originalLink);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从布隆过滤器中查看有没有这个短链接</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">contains</span> <span class="operator">=</span> shortUriCreateCachePenetrationBloomFilter.contains(fullShortUrl);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!contains)&#123;</span><br><span class="line">            <span class="comment">// 不存在的话直接跳转自定义404界面</span></span><br><span class="line">            ((HttpServletResponse) response).sendRedirect(<span class="string">&quot;/page/notfound&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果存在于布隆过滤器，可能存在误判。所以缓存中存放了一个数据库中短链接是否为null的</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">link</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(String.format(RedisKeyConstant.GOTO_NULL_SHORT_LINK_KEY, fullShortUrl));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果为null的话还是直接跳转自定义404界面</span></span><br><span class="line">        <span class="keyword">if</span> (Opp.ofStr(link).isPresent()) &#123;</span><br><span class="line">            ((HttpServletResponse) response).sendRedirect(<span class="string">&quot;/page/notfound&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加分布式锁</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient.getLock(String.format(RedisKeyConstant.LOCK_GOTO_SHORT_LINK_KEY, fullShortUrl));</span><br><span class="line"></span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 加锁之后再去缓存中判断一次</span></span><br><span class="line">            originalLink = stringRedisTemplate.opsForValue().get(String.format(RedisKeyConstant.GOTO_SHORT_LINK_KEY, fullShortUrl));</span><br><span class="line">            <span class="keyword">if</span> (Opp.ofStr(originalLink).isPresent()) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果存在直接跳转</span></span><br><span class="line">                ((HttpServletResponse) response).sendRedirect(originalLink);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果不存在的话，去数据库中查询</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">ShortLinkGotoDO</span> <span class="variable">shortLinkGotoDO</span> <span class="operator">=</span> One.of(ShortLinkGotoDO::getFullShortUrl).eq(fullShortUrl).query();</span><br><span class="line">            <span class="keyword">if</span> (shortLinkGotoDO == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果数据库不存在的话存放一个临时的空值，防止缓存穿透</span></span><br><span class="line">                stringRedisTemplate.opsForValue().set(String.format(RedisKeyConstant.GOTO_NULL_SHORT_LINK_KEY, fullShortUrl), <span class="string">&quot;-&quot;</span>,<span class="number">30</span> , TimeUnit.SECONDS);</span><br><span class="line">                ((HttpServletResponse) response).sendRedirect(<span class="string">&quot;/page/notfound&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 从数据库获取完整短链接</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">ShortLinkDO</span> <span class="variable">shortLinkDO</span> <span class="operator">=</span> One.of(ShortLinkDO::getGid).eq(shortLinkGotoDO.getGid()).condition(w -&gt; w.eq(ShortLinkDO::getFullShortUrl, fullShortUrl).eq(ShortLinkDO::getEnableStatus, <span class="number">0</span>)).query();</span><br><span class="line">            <span class="keyword">if</span> (Opp.of(shortLinkDO).isPresent()) &#123;</span><br><span class="line">                <span class="comment">// 判断短链接是否已经过期</span></span><br><span class="line">                <span class="keyword">if</span> (shortLinkDO.getValidDate() != <span class="literal">null</span> &amp;&amp; shortLinkDO.getValidDate().before(<span class="keyword">new</span> <span class="title class_">Date</span>())) &#123;</span><br><span class="line">                    <span class="comment">// 证明已经过期</span></span><br><span class="line">                    stringRedisTemplate.opsForValue().set(String.format(RedisKeyConstant.GOTO_NULL_SHORT_LINK_KEY, fullShortUrl), <span class="string">&quot;-&quot;</span>, <span class="number">30</span>, TimeUnit.MINUTES);</span><br><span class="line">                    ((HttpServletResponse) response).sendRedirect(<span class="string">&quot;/page/notfound&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 如果数据库存在的话设置缓存到redis，并进行跳转</span></span><br><span class="line">                stringRedisTemplate.opsForValue()</span><br><span class="line">                        .set(</span><br><span class="line">                                String.format(RedisKeyConstant.GOTO_SHORT_LINK_KEY,</span><br><span class="line">                                        fullShortUrl),</span><br><span class="line">                                shortLinkDO.getOriginUrl(),</span><br><span class="line">                                LinkUtil.getLinkCacheValidTime(shortLinkDO.getValidDate()));</span><br><span class="line">                ((HttpServletResponse) response).sendRedirect(shortLinkDO.getOriginUrl());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>对应的时序图<br><img src="https://zang-1307996497.cos.ap-beijing.myqcloud.com/undefined20240130110133.png" alt=""></p><h2 id="3、代码逐行解析">3、代码逐行解析</h2><h3 id="3-1、获取短链接">3.1、获取短链接</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">fullShortUrl</span> <span class="operator">=</span> request.getServerName() + <span class="string">&quot;/&quot;</span> + shortUri;</span><br></pre></td></tr></table></figure><blockquote><p>这行代码拼接了服务器的名称和短链接的唯一标识符shortUri来构成完整的短链接fullShortUrl。</p></blockquote><h3 id="3-2、从缓存中获取原始链接">3.2、从缓存中获取原始链接</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">originalLink</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(String.format(RedisKeyConstant.GOTO_SHORT_LINK_KEY, fullShortUrl));</span><br></pre></td></tr></table></figure><blockquote><p>这行代码尝试从Redis缓存中获取短链接所对应的原始链接。这是为了减少对数据库的访问，提高响应速度。</p></blockquote><h3 id="3-3、缓存存在检查">3.3、缓存存在检查</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Opp.ofStr(originalLink).isPresent()) &#123;</span><br><span class="line">    ((HttpServletResponse) response).sendRedirect(originalLink);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果缓存中存在原始链接，则直接重定向到原始链接，这一步骤帮助防止缓存击穿。</p></blockquote><h3 id="3-4、布隆过滤器检查">3.4、布隆过滤器检查</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">contains</span> <span class="operator">=</span> shortUriCreateCachePenetrationBloomFilter.contains(fullShortUrl);</span><br></pre></td></tr></table></figure><blockquote><p>这行代码使用布隆过滤器检查短链接是否存在，这是为了防止缓存穿透，即防止恶意用户通过不断请求不存在的短链接来使得服务直接访问数据库。</p></blockquote><h3 id="3-5、布隆过滤器不存在处理">3.5、布隆过滤器不存在处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!contains) &#123;</span><br><span class="line">    ((HttpServletResponse) response).sendRedirect(<span class="string">&quot;/page/notfound&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果布隆过滤器判断短链接不存在，则直接重定向到404页面，避免了对数据库的无效访问。</p></blockquote><h3 id="3-6、缓存为空值检查">3.6、缓存为空值检查</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">link</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(String.format(RedisKeyConstant.GOTO_NULL_SHORT_LINK_KEY, fullShortUrl));</span><br></pre></td></tr></table></figure><blockquote><p>这行代码检查是否缓存了一个表示数据库中没有对应记录的空值，这是为了处理布隆过滤器的误判。</p></blockquote><h3 id="3-7、重定向到404页面">3.7、重定向到404页面</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Opp.ofStr(link).isPresent()) &#123;</span><br><span class="line">    ((HttpServletResponse) response).sendRedirect(<span class="string">&quot;/page/notfound&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果缓存中存储了一个表示短链接在数据库中不存在的值，则直接重定向到404页面。</p></blockquote><h3 id="3-8、添加分布式锁">3.8、添加分布式锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient.getLock(String.format(RedisKeyConstant.LOCK_GOTO_SHORT_LINK_KEY, fullShortUrl));</span><br></pre></td></tr></table></figure><blockquote><p>这行代码为当前操作的短链接添加了一个分布式锁，这是为了防止缓存击穿，即在缓存失效的瞬间，大量的并发请求直接打到数据库。</p></blockquote><h3 id="3-9、锁定和再次检查缓存">3.9、锁定和再次检查缓存</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    originalLink = stringRedisTemplate.opsForValue().get(String.format(RedisKeyConstant.GOTO_SHORT_LINK_KEY, fullShortUrl));</span><br><span class="line">    <span class="keyword">if</span> (Opp.ofStr(originalLink).isPresent()) &#123;</span><br><span class="line">        ((HttpServletResponse) response).sendRedirect(originalLink);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>这部分代码首先对短链接加锁，然后再次检查缓存，如果这时候缓存中存在原始链接，则直接重定向，这可以处理高并发下的缓存击穿问题。</p></blockquote><h3 id="3-10、数据库查询和缓存更新">3.10、数据库查询和缓存更新</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">ShortLinkGotoDO</span> <span class="variable">shortLinkGotoDO</span> <span class="operator">=</span> One.of(ShortLinkGotoDO::getFullShortUrl).eq(fullShortUrl).query();</span><br></pre></td></tr></table></figure><blockquote><p>如果缓存中没有找到原始链接，代码会继续从数据库查询。这里使用了某种ORM框架的查询语法来获取短链接对应的数据对象。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (shortLinkGotoDO == <span class="literal">null</span>) &#123;</span><br><span class="line">    stringRedisTemplate.opsForValue().set(String.format(RedisKeyConstant.GOTO_NULL_SHORT_LINK_KEY, fullShortUrl), <span class="string">&quot;-&quot;</span>,<span class="number">30</span> , TimeUnit.SECONDS);</span><br><span class="line">    ((HttpServletResponse) response).sendRedirect(<span class="string">&quot;/page/notfound&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果数据库中也不存在该短链接，则在缓存中设置一个短期的空值并重定向到404页面，这是为了防止缓存穿透。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">ShortLinkDO</span> <span class="variable">shortLinkDO</span> <span class="operator">=</span> One.of(ShortLinkDO::getGid).eq(shortLinkGotoDO.getGid()).condition(w -&gt; w.eq(ShortLinkDO::getFullShortUrl, fullShortUrl).eq(ShortLinkDO::getEnableStatus, <span class="number">0</span>)).query();</span><br></pre></td></tr></table></figure><blockquote><p>这行代码进一步查询获取短链接的详细信息。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Opp.of(shortLinkDO).isPresent()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (shortLinkDO.getValidDate() != <span class="literal">null</span> &amp;&amp; shortLinkDO.getValidDate().before(<span class="keyword">new</span> <span class="title class_">Date</span>())) &#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(String.format(RedisKeyConstant.GOTO_NULL_SHORT_LINK_KEY, fullShortUrl), <span class="string">&quot;-&quot;</span>, <span class="number">30</span>, TimeUnit.MINUTES);</span><br><span class="line">        ((HttpServletResponse) response).sendRedirect(<span class="string">&quot;/page/notfound&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    stringRedisTemplate.opsForValue()</span><br><span class="line">            .set(</span><br><span class="line">                    String.format(RedisKeyConstant.GOTO_SHORT_LINK_KEY,</span><br><span class="line">                            fullShortUrl),</span><br><span class="line">                            shortLinkDO.getOriginUrl(),</span><br><span class="line">                            LinkUtil.getLinkCacheValidTime(shortLinkDO.getValidDate()));</span><br><span class="line">    ((HttpServletResponse) response).sendRedirect(shortLinkDO.getOriginUrl());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果查询到短链接且未过期，则更新缓存并重定向到原始链接，这样可以防止后续的缓存穿透和击穿问题。</p></blockquote><h3 id="3-11、释放分布式锁">3.11、释放分布式锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>最后释放分布式锁，以允许其他线程处理其他短链接。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 缓存穿透 缓存雪崩 缓存击穿 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitlab仓库代码迁移</title>
      <link href="/posts/683dabc3.html"/>
      <url>/posts/683dabc3.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、导出仓库数据">1、导出仓库数据</h2><blockquote><ol><li>登录gitlab进入项目</li><li>点击左下角的settings</li><li>找到最下方的Advanced 点击右边的Expand 进行点击</li><li>点击之后找到Export project按钮</li></ol></blockquote><h2 id="2、导入仓库数据">2、导入仓库数据</h2><blockquote><ol><li>首先需要创建一个项目</li><li>然后点击New project</li><li>选择Import project</li><li>然后会选择想要从哪个git平台进行导入</li><li>选择之后会让你选择导入的项目名称，以及所在的组</li><li>最后选择文件点击Import project 然后稍等一会就导入完成啦</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> gitlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ioc/Aop框架如何集成FolkMQ</title>
      <link href="/posts/9cac72b9.html"/>
      <url>/posts/9cac72b9.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、部署FolkMQ">1、部署FolkMQ</h2><blockquote><p>这里我是使用的docker-compose部署的，如果是本地部署，请自行修改docker-compose.yml文件<br>现在我使用的版本是1.0.20</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    <span class="attr">folkmq-server:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">noearorg/folkmq-server:1.0.20</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">folkmq-server</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">8602</span><span class="string">:8602</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">18602</span><span class="string">:18602</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">./data/broker:/data</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">./logs/broker:/logs</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">folkmq.admin=zangzang</span>  <span class="comment">#管理后台密码</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">folkmq.access.folk=sk1</span> <span class="comment">#消息访问账号，可以配置多个</span></span><br><span class="line"><span class="comment">#      - folkmq.access.ak2=sk2</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span>  </span><br></pre></td></tr></table></figure><blockquote><p>然后执行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d folkmq-server</span><br></pre></td></tr></table></figure><h2 id="2、使用FolkMQ">2、使用FolkMQ</h2><h3 id="1、引入依赖">1、引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.noear<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>folkmq-transport-netty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、application-yml中配置">2、application.yml中配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">folkmq:</span></span><br><span class="line">  <span class="attr">server:</span> <span class="string">&#x27;folkmq://127.0.0.1:18602?ak=folk&amp;sk=sk1&#x27;</span></span><br><span class="line">  <span class="attr">consumerGroup:</span> <span class="string">&#x27;Cizai&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="3、如何订阅配置">3、如何订阅配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Eliauk</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2023/12/6 15:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FolkMQConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MqClient <span class="title function_">initClient</span><span class="params">(<span class="meta">@Value(&quot;$&#123;folkmq.server&#125;&quot;)</span> String serverUrl,</span></span><br><span class="line"><span class="params">                               <span class="meta">@Value(&quot;$&#123;folkmq.consumerGroup&#125;&quot;)</span> String consumerGroup,</span></span><br><span class="line"><span class="params">                               <span class="meta">@Autowired</span> Map&lt;String, MqConsumeHandler&gt; subscriptionMap)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 构建客户端</span></span><br><span class="line">        <span class="type">MqClient</span> <span class="variable">client</span> <span class="operator">=</span> FolkMQ.createClient(serverUrl).connect();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 订阅</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, MqConsumeHandler&gt; subscription : subscriptionMap.entrySet()) &#123;</span><br><span class="line">            client.subscribe(subscription.getKey(), consumerGroup, subscription.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、注册消费者">4、注册消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Eliauk</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2023/12/14 10:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component(TestConsumer.TOPIC)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EventTestConsume</span> <span class="keyword">implements</span> <span class="title class_">MqConsumeHandler</span>, TestConsumer &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(EventTestConsume.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">consume</span><span class="params">(MqMessageReceived message)</span> &#123;</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">&quot;EventTestConsume.consume: &quot;</span> + message);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、生产者发送消息">5、生产者发送消息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> MqClient mqClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * test</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> message 消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 发送结果</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception 异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/api/folkMQ/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">test</span><span class="params">(<span class="meta">@RequestParam</span> String message)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    mqClient.publishAsync(TestConsumer.TOPIC, <span class="keyword">new</span> <span class="title class_">MqMessage</span>(message));</span><br><span class="line">    <span class="keyword">return</span> Results.success(<span class="string">&quot;成功发送消息&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> FolkMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用SSE对接清华chatGLM模型</title>
      <link href="/posts/a0c3992a.html"/>
      <url>/posts/a0c3992a.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、前端基本代码">1、前端基本代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 输入框，用于输入消息。当按下回车键时，触发 handleSendEvent 方法 --&gt;</span><br><span class="line">  &lt;input v-model=&quot;input&quot; @keydown.enter=&quot;handleSendEvent&quot; &gt;</span><br><span class="line">  &lt;!-- 发送按钮，点击时触发 handleSendEvent 方法 --&gt;</span><br><span class="line">  &lt;button @click=&quot;handleSendEvent&quot;&gt;发送信息&lt;/button&gt;</span><br><span class="line">  &lt;!-- 显示从服务器接收的消息 --&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">// 使用 ref 创建一个响应式的变量 message 来存储从服务器接收的消息</span><br><span class="line">const message = ref(&#x27;&#x27;)</span><br><span class="line">// 使用 ref 创建一个响应式的变量 input 来存储用户输入的消息</span><br><span class="line">const input = ref(&#x27;&#x27;)</span><br><span class="line"></span><br><span class="line">// 处理发送事件的函数</span><br><span class="line">function handleSendEvent()&#123;</span><br><span class="line">  // 如果输入为空，则显示警告并返回</span><br><span class="line">  if(!input.value)&#123;</span><br><span class="line">    alert(&#x27;内容为空&#x27;);</span><br><span class="line">    return</span><br><span class="line">  &#125;</span><br><span class="line">  // 清空显示的消息</span><br><span class="line">  message.value = &#x27;&#x27;;</span><br><span class="line">  // 创建一个新的 EventSource 实例来监听服务器发送的事件</span><br><span class="line">  // `/api/chatgpt/test?message=$&#123;input.value&#125;` 是向服务器发送的请求，包含用户输入的消息</span><br><span class="line">  const evtSource = new EventSource(`/api/chatgpt/test?message=$&#123;input.value&#125;`);</span><br><span class="line">  // 清空输入框</span><br><span class="line">  input.value = &#x27;&#x27;;</span><br><span class="line">  // 当收到消息时的处理函数</span><br><span class="line">  evtSource.onmessage = (event) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;onmessage&#x27;,event.data)</span><br><span class="line">    // 解析从服务器接收的数据，并更新 message 变量来显示消息</span><br><span class="line">    message.value += JSON.parse(event.data)?.choices[0].delta.content;</span><br><span class="line">  &#125;</span><br><span class="line">  // 如果连接出错，关闭 EventSource</span><br><span class="line">  evtSource.onerror = () =&gt; &#123;</span><br><span class="line">    console.log(&#x27;onerror&#x27;)</span><br><span class="line">    evtSource.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2、后端代码">2、后端代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理与OpenAI API的实时交互，并通过Server-Sent Events (SSE) 返回数据。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> message 用户发送的消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> SseEmitter 用于发送实时事件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception 如果在处理请求时发生异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/api/chatgpt/test&quot;, produces = MediaType.TEXT_EVENT_STREAM_VALUE)</span></span><br><span class="line"><span class="keyword">public</span> SseEmitter <span class="title function_">testChatGpt</span><span class="params">(<span class="meta">@RequestParam</span> String message)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个SseEmitter实例，超时时间设置为无限</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">SseEmitter</span> <span class="variable">emitter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SseEmitter</span>(Long.MAX_VALUE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用线程池执行任务</span></span><br><span class="line">    executorService.execute(() -&gt; &#123;</span><br><span class="line">        <span class="comment">// 构建与OpenAI API通信的请求</span></span><br><span class="line">        <span class="type">CompletionRequest</span> <span class="variable">request</span> <span class="operator">=</span> CompletionRequest.builder()</span><br><span class="line">                .stream(<span class="literal">true</span>)</span><br><span class="line">                .messages(Collections.singletonList(Message.builder().role(CompletionRequest.Role.USER).content(message).build()))</span><br><span class="line">                .model(CompletionRequest.Model.CHATGLM_TURBO.getCode())</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个CountDownLatch以等待异步操作完成</span></span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 尝试发送请求并处理响应</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            openAiSession.completions(request, <span class="keyword">new</span> <span class="title class_">EventSourceListener</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onEvent</span><span class="params">(EventSource eventSource, <span class="meta">@Nullable</span> String id, <span class="meta">@Nullable</span> String type, String data)</span> &#123;</span><br><span class="line">                    <span class="comment">// 检查是否收到完成标记</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">&quot;[DONE]&quot;</span>.equalsIgnoreCase(data)) &#123;</span><br><span class="line">                        log.info(<span class="string">&quot;OpenAI 应答完成&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 解析OpenAI的响应</span></span><br><span class="line">                    <span class="type">CompletionResponse</span> <span class="variable">chatCompletionResponse</span> <span class="operator">=</span> JSON.parseObject(data, CompletionResponse.class);</span><br><span class="line">                    List&lt;ChatChoice&gt; choices = chatCompletionResponse.getChoices();</span><br><span class="line">                    <span class="keyword">for</span> (ChatChoice chatChoice : choices) &#123;</span><br><span class="line">                        <span class="type">Message</span> <span class="variable">delta</span> <span class="operator">=</span> chatChoice.getDelta();</span><br><span class="line">                        <span class="comment">// 忽略助理的角色消息</span></span><br><span class="line">                        <span class="keyword">if</span> (CompletionRequest.Role.ASSISTANT.getCode().equals(delta.getRole())) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 检查是否应该结束响应</span></span><br><span class="line">                        <span class="type">String</span> <span class="variable">finishReason</span> <span class="operator">=</span> chatChoice.getFinishReason();</span><br><span class="line">                        <span class="keyword">if</span> (StringUtils.isNoneBlank(finishReason) &amp;&amp; <span class="string">&quot;stop&quot;</span>.equalsIgnoreCase(finishReason)) &#123;</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="comment">// 向客户端发送数据</span></span><br><span class="line">                            emitter.send(data);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                        &#125;</span><br><span class="line">                        log.info(<span class="string">&quot;测试结果：&#123;&#125;&quot;</span>, delta.getContent());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClosed</span><span class="params">(EventSource eventSource)</span> &#123;</span><br><span class="line">                    log.info(<span class="string">&quot;对话完成&quot;</span>);</span><br><span class="line">                    emitter.complete(); <span class="comment">// 确保SSE流被正确关闭</span></span><br><span class="line">                    countDownLatch.countDown();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFailure</span><span class="params">(EventSource eventSource, <span class="meta">@Nullable</span> Throwable t, <span class="meta">@Nullable</span> Response response)</span> &#123;</span><br><span class="line">                    <span class="comment">// 在发生错误时完成SSE流并记录错误</span></span><br><span class="line">                    emitter.completeWithError(t);</span><br><span class="line">                    log.info(<span class="string">&quot;对话异常&quot;</span>);</span><br><span class="line">                    countDownLatch.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 等待直到对话完成</span></span><br><span class="line">            countDownLatch.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> emitter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> chat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有关mysql编码的奇怪小知识</title>
      <link href="/posts/30e1d389.html"/>
      <url>/posts/30e1d389.html</url>
      
        <content type="html"><![CDATA[<p>当我们数据库User表中有一条数据的name='Zang’时，我们执行查询语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;zang&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这样的话还是会查询到一条数据，这是因为当我们的数据库字段编码使用的是utf8mb4时他是忽略大小写的</p><p>如果我们要对某个字段严格区分大小写的查询，我们可以将其更改为utf8的编码格式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> xxx.t_user MODIFY name <span class="type">VARCHAR</span>(<span class="number">8</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>序列化中的循环引用</title>
      <link href="/posts/7f7e7cfd.html"/>
      <url>/posts/7f7e7cfd.html</url>
      
        <content type="html"><![CDATA[<h1>1、前言</h1><p>在使用Neo4j-ogm时，对于自定义的NodeEntity和NodeRelation存在循环引用的关系时，在jackson序列化时会导致序列化失败，使用一个注解用来解决循环引用。</p><h1>2、实体类</h1><ul><li>NodeEntity节点对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@org</span>.neo4j.ogm.annotation.NodeEntity(label = <span class="string">&quot;ENTITY&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NodeEntity</span> <span class="keyword">extends</span> <span class="title class_">Neo4jAbstractBaseEntity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...省略其他字段</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指向当前实例的节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Relationship(type = &quot;RELATION&quot;, direction = Relationship.INCOMING)</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;NodeRelation&gt; fromEntity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前实例指向的节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Relationship(type = &quot;RELATION&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;NodeRelation&gt; toEntity;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>NodeRelation关系对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RelationshipEntity(type = &quot;RELATION&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NodeRelation</span> <span class="keyword">extends</span> <span class="title class_">Neo4jAbstractBaseEntity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...省略其他字段</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发出关系的实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@StartNode</span></span><br><span class="line">    <span class="keyword">private</span> NodeEntity start;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关系终止的实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@EndNode</span></span><br><span class="line">    <span class="keyword">private</span> NodeEntity end;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>3、@JsonIdentityInfo注解</h1><p>@JsonIdentityInfo 是 Jackson 库中的一个注解，用于处理对象之间的循环引用问题，同时还可以在 JSON 序列化和反序列化过程中保留对象的身份信息。这对于处理复杂对象图（例如，存在相互引用的对象）</p><h2 id="3-1-基本使用">3.1 基本使用</h2><ol><li><p>指定注解：您需要在实体类上添加 @JsonIdentityInfo 注解。</p></li><li><p>选择生成器：该注解需要一个生成器（generator）来生成对象的唯一标识符。常用的生成器是 ObjectIdGenerators.PropertyGenerator，它允许您指定一个字段作为唯一标识符。</p></li><li><p>指定属性：使用 property 属性指定一个字段名，这个字段将在序列化时作为对象的唯一标识符。这个字段不必是实体的一部分，Jackson 会自动处理它。</p></li></ol><h2 id="3-2-使用示例">3.2 使用示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonIdentityInfo(</span></span><br><span class="line"><span class="meta">  generator = ObjectIdGenerators.PropertyGenerator.class, </span></span><br><span class="line"><span class="meta">  property = &quot;id&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NodeEntity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="comment">// 其他字段和关系</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JsonIdentityInfo(</span></span><br><span class="line"><span class="meta">  generator = ObjectIdGenerators.PropertyGenerator.class, </span></span><br><span class="line"><span class="meta">  property = &quot;id&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NodeRelation</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> NodeEntity fromEntity;</span><br><span class="line">    <span class="keyword">private</span> NodeEntity toEntity;</span><br><span class="line">    <span class="comment">// 其他字段</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个示例中，id 字段用作每个 NodeEntity 和 NodeRelation 对象的唯一标识符。当 Jackson 序列化这些对象时，它会自动处理它们之间的相互引用，避免了循环引用的问题。</p><h2 id="3-3-注意事项">3.3 注意事项</h2><ul><li><p><strong>唯一标识符：</strong> 确保您用于 property 的字段在所有实例中是唯一的。</p></li><li><p><strong>对象图的复杂性：</strong> 尽管 @JsonIdentityInfo 可以解决循环引用问题，但对于非常复杂的对象图，仍然可能需要其他的处理策略。</p></li><li><p><strong>一致性：</strong> 确保在所有相关的类上一致地应用此注解，以保证整个序列化/反序列化过程的一致性。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> jackson </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何防止缓存穿透</title>
      <link href="/posts/ce54e34f.html"/>
      <url>/posts/ce54e34f.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试!" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="6b15cd7f03a72f479ca2cd3fe42d2e7efb9b17568a27a7db5e824e91a74639be"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">私有文章，仅供自己学习使用。</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 缓存穿透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 布隆过滤器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stream-Query兼容JDK17</title>
      <link href="/posts/ce54e34d.html"/>
      <url>/posts/ce54e34d.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 开源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dromara </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stream-Query兼容JDK17</title>
      <link href="/posts/ce54e34d.html"/>
      <url>/posts/ce54e34d.html</url>
      
        <content type="html"><![CDATA[<h2 id="swig￼6"><div class="tip warning faa-horizontal animated"><p>1、升级之后的问题</p></div></h2><blockquote><p>在升级到JDK17的过程中遇到了一些问题<br>1、比如在设置属性可修改时碰到了一些问题</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * return accessible accessibleObject</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> accessibleObject accessibleObject method</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &lt;$ACCESSIBLE_OBJECT&gt; a $ACCESSIBLE_OBJECT class</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> accessibleObject</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> &lt;$ACCESSIBLE_OBJECT <span class="keyword">extends</span> <span class="title class_">AccessibleObject</span>&gt; $ACCESSIBLE_OBJECT <span class="title function_">accessible</span><span class="params">(</span></span><br><span class="line"><span class="params">      $ACCESSIBLE_OBJECT accessibleObject)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (accessibleObject.isAccessible()) &#123;</span><br><span class="line">      <span class="keyword">return</span> accessibleObject;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> AccessController.doPrivileged(</span><br><span class="line">        (PrivilegedAction&lt;$ACCESSIBLE_OBJECT&gt;)</span><br><span class="line">            () -&gt; &#123;</span><br><span class="line">              accessibleObject.setAccessible(<span class="literal">true</span>);</span><br><span class="line">              <span class="keyword">return</span> accessibleObject;</span><br><span class="line">            &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>上述是源代码，然后产生的问题是</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.reflect.InaccessibleObjectException: Unable to make field private static final long java.lang.invoke.MethodType.serialVersionUID accessible: module java.base does not &quot;opens java.lang.invoke&quot; to unnamed module @6cc4c815</span><br></pre></td></tr></table></figure><blockquote><p>在网上查阅资料得知是因为在jkd9版本及以上版本中，Java平台模块化系统（JPMS）引入了更严格的访问控制。即使通过反射API调用setAccessible(true)试图强制访问某个类的私有成员，<br>如果包含该成员的模块没有显式地向调用者模块开放(opens)相应的包，那么尝试访问该成员时将会抛出IllegalAccessException。</p></blockquote><h2 id="2、解决">2、解决</h2><h3 id="1、来自-CSDN">1、来自(CSDN)</h3><blockquote><p>在网上(CSDN)看到了好多说什么把JDK版本降到8就解决了（好像在脱了裤子放屁一样）</p></blockquote><h3 id="2、一些正确的可用的解决方法">2、一些正确的可用的解决方法</h3><p>网上有一种临时解决办法就是在项目启动的jvm参数中设置以下参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--add-opens java.base/java.util=ALL-UNNAMED --add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.lang.invoke=ALL-UNNAMED</span><br></pre></td></tr></table></figure><blockquote><p>但是作为一个开源项目不能让使用的用户每次启动项目都去手动设置JVM参数，如果这样的化那这个开源项目基本就没人使用了</p></blockquote><h3 id="3、最终解决办法-全自动，可靠，兼容多版本">3、最终解决办法(全自动，可靠，兼容多版本)</h3><h4 id="1、添加属性">1、添加属性</h4><p>为了适配多版本需要使用properties属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">surefire.argLine</span>&gt;</span><span class="tag">&lt;/<span class="name">surefire.argLine</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>添加属性，然后根据JDK的版本去添加对应的数据</p></blockquote><h4 id="2、使用属性">2、使用属性</h4><p>引入maven插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;maven-surefire-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">testFailureIgnore</span>&gt;</span>true<span class="tag">&lt;/<span class="name">testFailureIgnore</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用属性值来配置argLine --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">argLine</span>&gt;</span>$&#123;surefire.argLine&#125;<span class="tag">&lt;/<span class="name">argLine</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3、动态修改启动参数">3、动态修改启动参数</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这个profile在Java 8或更高版本时激活 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>java8+<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>[8,)<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 重写argLine属性为Java 8+的配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">surefire.argLine</span>&gt;</span>--add-opens java.base/java.util=ALL-UNNAMED --add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.lang.invoke=ALL-UNNAMED<span class="tag">&lt;/<span class="name">surefire.argLine</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dromara </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写幂等性组件库</title>
      <link href="/posts/5858758b.html"/>
      <url>/posts/5858758b.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试!" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="047330c70145f7a14058fbe4d518900d9a8bddc7a3fdafb6427b202162d15677"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">私有文章，仅供自己学习使用。</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 组件库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模板模式 </tag>
            
            <tag> 策略 </tag>
            
            <tag> 幂等性 </tag>
            
            <tag> 组件库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git操作规约</title>
      <link href="/posts/c35b2800.html"/>
      <url>/posts/c35b2800.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试!" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="c4403f6361cadb67919b1a0bec0ef136fd3d5f5e76d22bfd22744f83560a7461">2ddec83a87db3033ff4ab408c7ae30ff2eee36628ac8c932ee1030cdd143b94295fe7f6d8d15b674e517c1f891b48e161229d86c5f5cc4563b1009fdf3b546d5d003bbb3811f0997eaf0caf7de3a0d915079cb6a2050d43887a7aa4266b49cf43a0306d6a5a1251d30097f4b67fe3cfd8911144ef191adc62e82ab7ae86316d3d7779af3d7baa6faad268a2c853d858cf581551675428e859190ec62b2c996a861a44229bf4750ee18abe2b8a9596c61ca52d362a7a482dd3f9da23d697eff9851f9aa8e64b75a8857ace83b9d7dc15f93f7c98d5c7065b54cd35710b00d6c56e1aa9bbb0f840e511f79e649c1314f53d9dd536d1c01c9706d395d814b083b39e3a172cc56db044d545408d1519f5c9f36d53f7b361f78edcfbbff085dadd54f671ed6fba3709d47f75af0bff906680d2c70ce07ac6c892914067b2803689eae8a52151ae17a01b4154d31740b56e0f7c0690e6eaff14efe02ec6317db753b64d10c1e1c99328319ab6b38bff84580cadbafe7fbb62ad10a8c9ce2aca0a6b6d7b77bc0bd50e7e2258d72abd217dba1f329ca29d5ff80b0a75d28342287061ae6d8e0a755f7236c74dae50877f15964dd5e3ed8fab94d2a644c17c1db4dc37e459d1fb59c29efd4d553fda2589ed3a48aaa2e922d9c883cef8eb6ed59e0dda7d85d6dfcfe026edfd6674298227465cca56a9a0c845b585dcfae2ff391cc2856a3c2f6b4fece379c8fb0875d56468e262ebfb5af84bcd987d86ca67a9932bd7738c314224cfe85d244b770ac8bc8b3f80cce9b945db02da1749f8c0071175f8ec5785482093c8d85e0ed94c71448648e4c2ad222ca8631ca90eb6499bf6d598d12fca420309d0e5b3284c869b08a86af9be38e0beaf28c3bdfd2ae9c4a443fb5b18382a50df19327d124cec45763b211e3b26b714d439e04600138e0913d1d411f11fa65006f8906885538828e1e68cdcb482353ba87ef26dfef4ddcf8a4bd57db7113fa31aa2f2f73d6be703203b88c1ed714f3407e106ecec44a36a28f6b256aa353cc14114ea6ebe14bed8b68c33131e2b11418bf80ad3bbd4304f9dd7486a2758941c6e4670c1daa0e2ec79f1eadb71030785434424f8824ecca16e3a1df779cb098db9d5ff16ac74651661d7ee6831c5cfde604eb8aebc35af8bba70925d9e6f47aed7b056b34a998f6ad4d64f825778a1f4874433f53b04752e9ad454701dd63fe0d47286c11e83008b45912b0bed71d0d74a54f056383ec0fdcdb029087506cf1d51d71381c462682241e95cf83e8d7316cf41f48595486f44c74fc756d598d08e80a30f8e2ac0310c0800ec0aaeb39ec3943fe18086fc412659b1daed972272de04077978fd7160be1135e048f9373cef647f4e8e9b92b6730407650c5d4e55079adf14312f6c78abcee5a8cbf328c2ef2f304a1972581994597a66bf70eacb566450a150aa7e3588b92c2cf80f1e38fb01a8c2e3f62664c3f212e687e4b7675bd4665abc864d4cd0aa4de2bd8f0b4c635eb3205b0fc7f8def3eaf8c2f383b369abd93e0b206f3af6512a1ec9a62c600f7c74428f856c0a093cb4222b07ed774d9595b2f80dfa888580cea9884bd722d4fcfb3042d90225ee1d7e70aba46bc73220e3f07dd3b828ecf4a6d5dd010dd89691119b1017c9059aaa47666f9773d9ca3c0240574ee270e1889ece76523b6b20c2528a045432faf1500572a8615c4f5d9629b9501e0e676f240df53e819154c14fa69c278f2c9a5530c30b80bbf72a2c94bacf5fc3070e253718cb3923f622265c72767a2c57edb18e5d196a57fe18ddb6d260f0259dbd052e740b823cc883c697683167a47293bfae072efbda4405d0c95119769c317d4b2be56054324982513c7d4da9d8c738f217c55ab665338a61a111f0b43d9f17c7407b0934e96f69c27319b738842dd5865cc00e1ab02b6f49b07105ffa31bf0eb2ad9ef10d00ce89f671094ca632493f5e8f105b81ffadacddc5ba9080d32b442919f8b7961059d5c50a6e12ec5c2da84d43667fbe45d0c2de9d91048917758a96b86b601b99174de596776b102dbdba1b0f328228737f882835bc24778e9a53d36d1339c9419d2813787583df95fb9a53b1b1b04fa7b2a90bcf74fab9e4943af7dd096a5aba1ff338114834e62fa2f82a9a43cb2946d1a9b294948ff2c5dbe150d49d73f09dc725eef0f6f2f59f4e15f53c81c62be1d5739687c37800ff7d6d047db973ad5c9c4df95352835c972e5377b12987613e78fb46857f981706eba2834b8e6f590d1b48717c3e04929669994e51f97dd166d5ff5bcc328822540f47abae8f7ffb0a75c0ab197bf4865e67ebba3295d295cd6b223bda7f3ebe29fc3539ef5bd538dcb7f7cd56896f3006f1b716913c4648f593024a9e7c7c6bea8a6b4f8c7f8b8a9d4b7bdfd6a79ff027a8a4b7a620cb518c7aa1b91475020a2d6e304a3282e2d37781bfefac9e594e3c2a3627ec1d4cec6607ba608f212d1d04fb30cada730d04d640f546aef4c4f9435fddb57da0c6fb451a241a2992e88846b9900b7cd146189c0c102dd9446351a885fe3f4de7a027378b6a77590337c43971b29b810097b5b4e0257a28cb7a40d29bf426be479bed8db76348d5e411e3f489ef96c874867c994e3be529632a20a6e64d14a4ee423aed0a9f703c03fec62ff596e32f41c8b88af065efa4e104629c087052cbf99e96679e5bf6f289eed69749ac81a29268409cd1f49d7ee3971e62a57c269b8ac6e4823b76d07edbc9faa7d2da17ffc720f39d1551d30de6fdf36073eb044cb2d342b466e07fcb9249609c67dc8f7ea64cb85dfc1ed140bb482efb309e78107879b26a896862d29e53d34244899ae88cd56e4916392ae0a1acf0a5c96ecaf2b002727527fcf3512e4498d20c4a8fc2dead7b2747371b5d9e09b7236d4c78a6d45dc54e50035311819a17e92085b0f687c8a9cec1dbf01dce44c89a655c140cf0a6d7fc1c124c8bec3232f6842acf3868355a3ece9355d7bbbea5b2d6166caeb65d2acfd4931d05624481e1c9fdb60053e8737949e46f48534ad19e02423991b310494a9b9f2e7f3cc5d73ae0313e1d96c0f52f1b4ebb9a679caaab602d3c79825fa042c6aa6a57abd85373c6a83caf5be4478f6ee83edab050100eab5c69d7f7fa6ab882f1e4ae675d36a12e80ca440cfaf704e3fa509fdda563b9b5f81ffcc8b565772c3e766839e3b0de0dd3308c5b19a9cdd87e236aa69697f484bfa92ab42f6101f83a4fd37388cad3dba3058febe9b55cdbce3125be61bf6d92ee9561010ec32be186a1cab62def81664beedeb0236d66ba46f95a4dd3f097319fa4256e8027ebffbe78bcf6204b636d0584b24813165c0099065ea07528c10d65030c25a85369e0648a4e5e3c8bb3f92e29b81b7a005b9ef4d073c434cb62a08f442f74083a1393bdcd89656132d63e72ff9d7b386550941cc34481ae3db4606bd4f89f6df9e152aff852488042baebd9ceb54a730cc226ad4c800596048bb90d7432b6fcf4f6bfae2d60e6ebfd200f105e9df46ff79e78f2fb2302ad636d541219d107fda1583d84e7c0ba804a0fbdf6feb077e010fb0d989a2c3f21023f994d7a68e8afe9213218f1d97f1f581dafac7ce98805b77ef52318a88ba236368df6cf68fc3b139c1bdcd5ce4b6847911adacb005fc07fd39afb919f0f94942e505ea6656af9a52ba821ce5602f97919d1a6a46f5886b7fd420497a4f0c335c8e4faaaf4614e4635b4ca3ff7e72118892283b5f0f63a1897a4ebdadf283937c3789e6dd1ad9c66d7713ff5789a7544d2a51dbf70dcef57686bfc531dcedd13877c2ff987e3c5c7a7aeb9aa4bb3113535f9b379a3dc390b2eb50baba1c0246d122ff2dab2abdd859b0999317c19fc96fc975c16b3bf2e0a55008814d020dca7d7e9d3070f78eb2728fd4cb461545177ac2442afa154a978649fe0146587889e8fee376e3be846e1d66aa4cc22894ee38604484a791016a19f77747814bbf229e5d8b15991080b1a266a4c47be8cd67613b133f4f35c4e16aa28af68df184c755c037bc663a5ae0807ff27e628e629a5bf059b4a7e26ddc790caf5a99275f6238a6cf23b25df56f99d87935def6b651ecc116f4bf66f3f6fb8a07d32756cdafe67cbb1f9bf5400366a87429c4fb4dc036e362609213653daa22f5714e1593cf9675743b9fb30479f2b0dd166f1866107dcca032f98d6ee6e5bc0f8c7ade60f568b9e9a612eebb9d73c307430e626b1c449c5a8726f43f4b88c2e2c1010ab150e3744b44e17c36a1b146b04e687da3434c838b4771d0908bb81db212c428d3d5cea2067f67649348ae817e5a0a9cb7755d8425b98f9cee7dc7cbd316122489db92d8593c2f59deeaddb3dab86526642de666e3c42ec89bd5318f8bd325b0dd7e405ad38e091e889061923d25c8c30329dbf2caf59af24d09ee6391bb603f37acd8264d32e675aaaba1483c66407c7ba9998b90c4b5d53b6126a6cceef6ed7c332cc5b7f1ca03cb62016577c7eb6966a6e96afac1b979d1c9f8938c27742f6ff86b4ef200a63eb17da6835801aa4b08247e211c4501e81a3b82ed5a41f61bc083b9bb0d6c129d75bb64a176f052a263a23b524bb14e042fa62859a8a2af23df69dc7079ad78ba8f48ac4d159f93d55fe7326c8efad0b8b7e7d3ec8ef8b4a0e3163426e5ae2e572d2a5a7c7cba445643a98121ea6912dee77c15202dee1f5e8a7f165a436ac204efe1d84a5edd5b9fb2795217d7b68beb7a9a32f69b332aa0c3f3b27ba69073deaaa145b2e5c8b61245c4ccbc726a096b582c08194749a4ee720235c543197a2c08df022c13f8919264b9d789baf2c2beafb0234d80df1b5c08474ff86191ca1a336d78be40f94069d7c7a07fd45ddf61bed63002dcc15a1b0f100d4b523dea3b2d8b0ef5134b0ef46bab7c9d3239a4d4b0b98f408c415ea3c4944facbcb39ce6f08529017ab2b91724622d8a49f4c681e2587cf323432f77e0112eca94b3ce9115d899693759d62c8e6aae406cd78fd809d3431888a325ef9d5dc1011699c1a52d34976e1786507c8e5238defdf803ecc931d2de2227cc6dea5b26cbebac5971410b83e5caf2959134648270df3f3598d3448</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">私有文章，仅供自己学习使用。</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 开发规约 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发规约 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目优雅的实现责任链模式</title>
      <link href="/posts/940364b3.html"/>
      <url>/posts/940364b3.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试!" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="c730a71e3475775ad3d079caa5d82c8b3e5d50f131f902ccb26df1245d074ffd"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">私有文章，仅供自己学习使用。</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模板模式 </tag>
            
            <tag> 责任链模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>敏感信息加密存储</title>
      <link href="/posts/e6f2be7b.html"/>
      <url>/posts/e6f2be7b.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、需求背景">1、需求背景</h2><blockquote><p>安全控制一直是治理的重要环节，数据加密属于安全控制的范畴。 无论对互联网公司还是传统行业来说，数据安全一直是极为重视和敏感的话题。 数据加密是指对某些敏感信息通过加密规则进行数据的变形，实现敏感隐私数据的可靠保护。 涉及客户安全数据或者一些商业性敏感数据，如身份证号、手机号、卡号、客户号等个人信息按照相关部门规定，都需要进行数据加密。</p></blockquote><p>对于数据加密的需求，在现实的业务场景中存在如下情况：</p><ul><li>密码样式的文本：<psw>安全部门规定需将涉及用户敏感信息，例如银行、手机号码等进行加密后存储到数据库，在使用的时候再进行解密处理。</psw></li></ul><blockquote><p>在真实业务场景中，相关业务开发团队则往往需要针对公司安全部门需求，<br>自行实行并维护一套加解密系统。 而当加密场景发生改变时，自行维护的加密系统往往又面临着重构或修改风险。<br>此外，<emp>对于已经上线的业务</emp>，<span class='p red'>在不修改业务逻辑和 SQL 的情况下</span>，透明化、安全低风险地实现无缝进行加密改造也相对复杂。</p></blockquote><h2 id="2、项目实战">2、项目实战</h2><h3 id="1、引入ShardingSphere">1、引入ShardingSphere</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shardingsphere-jdbc-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、新增加密配置">2、新增加密配置</h3><p><code>application.yaml</code> 配置文件修改配置，将数据库驱动变更为 <span class='nota' data-nota='Apache ShardingSphere 是一款分布式的数据库生态系统， 可以将任意数据库转换为分布式数据库，并通过数据分片、弹性伸缩、加密等能力对原有数据库进行增强。'>ShardingSphere Driver</span> 。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">org.apache.shardingsphere.driver.ShardingSphereDriver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:shardingsphere:classpath:shardingsphere-config.yaml</span></span><br></pre></td></tr></table></figure><p>并配置 <code>shardingsphere-config.yaml</code> 相关配置。为了方便大家理解，这篇文章只讲敏感数据信息加密存储</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置数据源，底层被 ShardingSphere 进行了代理</span></span><br><span class="line"><span class="attr">dataSources:</span></span><br><span class="line">  <span class="attr">ds_0:</span></span><br><span class="line">    <span class="attr">dataSourceClassName:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">jdbcUrl:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/12306_user_0?useUnicode=true&amp;characterEncoding=UTF-8&amp;rewriteBatchedStatements=true&amp;allowMultiQueries=true&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="comment"># 数据加密存储规则</span></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!ENCRYPT</span></span><br><span class="line">    <span class="comment"># 需要加密的表集合</span></span><br><span class="line">    <span class="attr">tables:</span></span><br><span class="line">      <span class="comment"># 用户表</span></span><br><span class="line">      <span class="attr">t_user:</span></span><br><span class="line">        <span class="comment"># 用户表中哪些字段需要进行加密</span></span><br><span class="line">        <span class="attr">columns:</span></span><br><span class="line">          <span class="comment"># 身份证字段，逻辑字段，不一定是在数据库中真实存在</span></span><br><span class="line">          <span class="attr">id_card:</span></span><br><span class="line">            <span class="comment"># 身份证字段存储的密文字段，这个是数据库中真实存在的字段</span></span><br><span class="line">            <span class="attr">cipherColumn:</span> <span class="string">id_card</span></span><br><span class="line">            <span class="comment"># 身份证字段加密算法</span></span><br><span class="line">            <span class="attr">encryptorName:</span> <span class="string">common_encryptor</span></span><br><span class="line">          <span class="attr">phone:</span></span><br><span class="line">            <span class="attr">cipherColumn:</span> <span class="string">phone</span></span><br><span class="line">            <span class="attr">encryptorName:</span> <span class="string">common_encryptor</span></span><br><span class="line">          <span class="attr">mail:</span></span><br><span class="line">            <span class="attr">cipherColumn:</span> <span class="string">mail</span></span><br><span class="line">            <span class="attr">encryptorName:</span> <span class="string">common_encryptor</span></span><br><span class="line">          <span class="attr">address:</span></span><br><span class="line">            <span class="attr">cipherColumn:</span> <span class="string">address</span></span><br><span class="line">            <span class="attr">encryptorName:</span> <span class="string">common_encryptor</span></span><br><span class="line">        <span class="comment"># 是否按照密文字段查询</span></span><br><span class="line">        <span class="attr">queryWithCipherColumn:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 加密算法</span></span><br><span class="line">    <span class="attr">encryptors:</span></span><br><span class="line">      <span class="comment"># 自定义加密算法名称</span></span><br><span class="line">      <span class="attr">common_encryptor:</span></span><br><span class="line">        <span class="comment"># 加密算法类型</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">AES</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="comment"># AES 加密密钥</span></span><br><span class="line">          <span class="attr">aes-key-value:</span> <span class="string">d6oadClrrb9A3GWo</span></span><br><span class="line"><span class="attr">props:</span></span><br><span class="line">  <span class="attr">sql-show:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="3、最终效果如下">3、最终效果如下</h2><p>当配置好之后，执行对于的插入逻辑，新插入一条用户信息，在应用程序里还是明文，经过 ShardingSphere 代理后，存储数据库时，就已经是密文的了。可以通过Stream-Query来配置打印执行sql</p><blockquote><p>原始SQL :</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user (id_card, phone, mail, address) <span class="keyword">values</span> (<span class="string">&#x27;34020xx023081xx338&#x27;</span>, <span class="string">&#x27;1x60111xx983&#x27;</span>, <span class="string">&#x27;mading@axxche.org&#x27;</span>, <span class="string">&#x27;xx东城x&#x27;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>代理后SQL :</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user (id_card, phone, mail, address) <span class="keyword">values</span> (<span class="string">&#x27;YUvr+8Xf17VCgGonU2WXqmKuhB5FMazUEbh3y+h0B38=&#x27;</span>, <span class="string">&#x27;MZObk+5TeYPLHtP2A6+aiw==&#x27;</span>, <span class="string">&#x27;vX/5iWTyfAvMJMt+ioipj9vd6cnZ4rz4qKBAXQ9C9oU=&#x27;</span>, <span class="string">&#x27;vX/5iWTyfAvMJMt+ioipj9vd6cnZ4rz4qKBAXQ9C9oU=&#x27;</span>);</span><br></pre></td></tr></table></figure><div class="tip ban faa-flash animated faa-slow"><p>注：</p></div><blockquote><p>ShardingSphere 在执行查询语句时，如果涉及到相关加密表，会自动将加密数据转换为明文数据，也就是会把 YUvr+8Xf17VCgGonU2WXqmKuhB5FMazUEbh3y+h0B38= 转换为 34020xx023081xx338.由此形成加密敏感信息落库闭环。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 真实项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用户敏感信息展示脱敏</title>
      <link href="/posts/c35b28d3.html"/>
      <url>/posts/c35b28d3.html</url>
      
        <content type="html"><![CDATA[<div class="tip warning faa-horizontal animated-hover"><h2 id="业务需求">业务需求</h2></div><blockquote><p>将用户敏感信息脱敏展示到前端是出于保护用户隐私和信息安全的考虑。<br>敏感信息包括但不限于手机号码、身份证号、银行卡号等，这些信息泄露可能导致用户个人信息的滥用、身份盗用等严重问题。脱敏是一种常用的保护用户隐私的方式，它的目的是减少潜在的风险，同时保持一定的用户信息可读性。<br>比如咱们在选择用户信息以及展示选座信息时，用户证件号码的脱敏展示。</p></blockquote><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='0.5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>项目实战</p></div></div><p>技术选型<br>网上很多教程都是在说，通过 AOP、自定义注解和反射的方式完成字段脱敏功能。但是这种方式有点重量级且性能一般，遇到高并发场景存在性能瓶颈。<br>我举个循环嵌套的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> B b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> C c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> D d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D</span> &#123;</span><br><span class="line"></span><br><span class="line">    @自定义注解</span><br><span class="line">    <span class="keyword">private</span> String phone;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果按照反射的逻辑，就需要一层一层的解析嵌套对象直到找到自定义加密注解进行脱敏，性能可想而知。<br>为此，我想是否存在一种更为轻量级的脱敏技术实现？在网上搜索后，找到了一种比较符合我预期的实现方案：Jackson序列化方案。<br>实现思路<br>在 SpringMVC 返回数据时，通过默认的 Jackson 序列化器进行指定，替换为咱们已经包装后的序列化器，这样就能依赖现有解决方案，降低技术复杂度。<br>代码实现<br>定义手机号和证件号的 Jackson 自定义序列化器，并在对应需要脱敏的敏感字段上指定自定义序列化器。</p></blockquote><h2 id="1、身份证号序列化器。">1、身份证号序列化器。</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 身份证号脱敏反序列化</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IdCardDesensitizationSerializer</span> <span class="keyword">extends</span> <span class="title class_">JsonSerializer</span>&lt;String&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(String idCard, JsonGenerator jsonGenerator, SerializerProvider serializerProvider)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  <span class="type">String</span> <span class="variable">phoneDesensitization</span> <span class="operator">=</span> DesensitizedUtil.idCardNum(idCard, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">  jsonGenerator.writeString(phoneDesensitization);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="2、手机号序列化器。">2、手机号序列化器。</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手机号脱敏反序列化</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhoneDesensitizationSerializer</span> <span class="keyword">extends</span> <span class="title class_">JsonSerializer</span>&lt;String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(String phone, JsonGenerator jsonGenerator, SerializerProvider serializerProvider)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">phoneDesensitization</span> <span class="operator">=</span> DesensitizedUtil.mobilePhone(phone);</span><br><span class="line">        jsonGenerator.writeString(phoneDesensitization);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）敏感字段上自定义序列化器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 乘车人返回参数</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="meta">@Data</span></span><br><span class="line">  <span class="meta">@Accessors(chain = true)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PassengerRespDTO</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 证件号码</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      <span class="meta">@JsonSerialize(using = IdCardDesensitizationSerializer.class)</span></span><br><span class="line">      <span class="keyword">private</span> String idCard;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 手机号</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      <span class="meta">@JsonSerialize(using = PhoneDesensitizationSerializer.class)</span></span><br><span class="line">      <span class="keyword">private</span> String phone;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><blockquote><p>完成上述步骤后，前端调用 HTTP 请求获取数据时，SpringMVC 通过 Jackson 进行序列化数据时，操作证件号码和手机号两个字段就会采用咱们自定义的序列化器，完成敏感信息脱敏功能。<br>扩展思考<br>对接前端的敏感数据脱敏展示功能做到上面这些就已经实现了。但是总感觉哪里不对</p><span class='p red'>举个例子</span> ：在购票服务中，下单接口会调用乘车人详细信息接口获取到手机号、证件号等信息保存入库。</blockquote><p>如果我在后端服务里去调用乘车人的信息接口，那岂不是也是脱敏的？这样的话，存储到数据库的数据就不准确了，期望是真实的数据，但是实际是脱敏后的。</p><blockquote><span class='p green'>解决方案</span> ：基于这种真实情况，我们拆分一个新的实体，叫做 XxxDTO，返回的信息是不脱敏的。其实本质上就是复制了一个乘车人实体，但是在证件号和手机号字段上不添加 @JsonSerialize 注解，以此满足业务需求。</blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 真实项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优雅计算坐标(对接算法)</title>
      <link href="/posts/daabcd9d.html"/>
      <url>/posts/daabcd9d.html</url>
      
        <content type="html"><![CDATA[<div class="tip warning faa-horizontal animated-hover"><h2 id="需求">需求</h2></div><blockquote><p>首先是有一段档案文章在没有换行符的情况下发送给了算法，算法识别出来了敏感词与敏感句以及他们的坐标(此时的坐标是没有换行符/n的情况下的)<br>但是我们的原始档案文章是有换行符的因为要让前端去解析，但是现在<span class='p red'>问题</span>就出现了</p><emp>因为前端展示界面要有换行所以给前端的数据要携带/n，但是现在要把敏感词和敏感句高亮，如果我们的坐标还是没有/n的坐标前端就没办法匹配高亮了</emp><p>有些人可能会说直接index不就好了？ ，但是如果词或句子在/n之间呢，那怎么计算，所以我写了一个算法来计算敏感词句的start和end</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 寻找给定文本中换行字符的索引。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> text 需要搜索换行字符的文本。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 一个包含换行字符索引的整数数组。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Function&lt;String, <span class="type">int</span>[]&gt; findNewLineIndices = text -&gt; &#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; indicesList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> text.indexOf(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">while</span> (index != -<span class="number">1</span>) &#123;</span><br><span class="line">        indicesList.add(index - indicesList.size());</span><br><span class="line">        index = text.indexOf(<span class="string">&#x27;\n&#x27;</span>, index + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>[] indicesArray = <span class="keyword">new</span> <span class="title class_">int</span>[indicesList.size()];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; indicesList.size(); i++) &#123;</span><br><span class="line">        indicesArray[i] = indicesList.get(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> indicesArray;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在文本字符串中找到一个句子的起始和结束索引。</span></span><br><span class="line"><span class="comment"> * 如果整个句子没有被找到，它会尝试找到存在于文本中的句子的一个子字符串。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sentence 要查找的句子。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> text 要搜索的文本。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 一个包含两个元素的整数数组：起始索引和结束索引。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">BiFunction&lt;String, String, <span class="type">int</span>[]&gt; findSentence = (sentence, text) -&gt; &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sentenceLength</span> <span class="operator">=</span> sentence.length();</span><br><span class="line">    <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">while</span> (sentence.length() &gt; <span class="number">4</span> <span class="comment">/* 最小句子长度 */</span> &amp;&amp; !text.contains(sentence)) &#123;</span><br><span class="line">        sentence = sentence.substring(<span class="number">0</span>, sentence.length() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> text.indexOf(sentence);</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; !sentence.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;index, index + sentenceLength&#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 确定起始节点周围的索引。</span></span><br><span class="line"><span class="comment"> * 具体来说，这个函数找到起始节点索引之前的换行字符的数量。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> indices 表示换行字符的一个索引数组。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> startNode 起始节点索引。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 一个包含起始节点前索引和起始节点与结束节点之间的换行字符数量的整数数组。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">BiFunction&lt;<span class="type">int</span>[], Integer, <span class="type">int</span>[]&gt; findCountIndices = (indices, startNode) -&gt; &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">indexBeforeStart</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">indicesBetween</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; indices.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (indices[i] &gt; startNode) &#123;</span><br><span class="line">            indexBeforeStart = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;indexBeforeStart, indicesBetween&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">replace</span> <span class="operator">=</span> artificialText.replaceAll(<span class="string">&quot;\\n&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="type">int</span>[] newLineIndices = findNewLineIndices.apply(artificialText);</span><br><span class="line"><span class="type">int</span>[] sentenceIndices = findSentence.apply(cleanSentenceText, replace);</span><br><span class="line"><span class="type">int</span>[] countIndices = findCountIndices.apply(newLineIndices, sentenceIndices[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">jsonObject.add(<span class="string">&quot;start&quot;</span>, <span class="keyword">new</span> <span class="title class_">JsonPrimitive</span>(sentenceIndies[<span class="number">0</span>] + countIndices[<span class="number">0</span>]));</span><br><span class="line">jsonObject.add(<span class="string">&quot;end&quot;</span>, <span class="keyword">new</span> <span class="title class_">JsonPrimitive</span>(sentenceIndices[<span class="number">1</span>] + countIndices[<span class="number">0</span>] + countIndices[<span class="number">1</span>]));</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 真实项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1、服务器路径上传</title>
      <link href="/posts/5e439ae3.html"/>
      <url>/posts/5e439ae3.html</url>
      
        <content type="html"><![CDATA[<h2 id="0、策略常量类">0、策略常量类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Eliauk</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PathUploadType</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">PDF</span> <span class="operator">=</span> <span class="string">&quot;PDF文件&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">TIF</span> <span class="operator">=</span> <span class="string">&quot;TIF文件&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">IMAGE_TO_PDF</span> <span class="operator">=</span> <span class="string">&quot;合并图片文件&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">VOLUME</span> <span class="operator">=</span> <span class="string">&quot;案卷合并&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">OFD</span> <span class="operator">=</span> <span class="string">&quot;OFD文件&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="zQ4eH"></a></p><h2 id="1、合并图片为PDF">1、合并图片为PDF</h2><blockquote><p>这里的逻辑是将当前根目录下所有的包含PDF目录的文件夹里边所有的【jpg&quot;, “jpeg”, “png”, “tif”, &quot;tiff】文件都合并成一个PDF文件</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">logger.info(<span class="string">&quot;接受到图片合并处理任务…………&quot;</span>);</span><br><span class="line">List&lt;File&gt; fileFolders = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">List&lt;String&gt; legalSuffix = Arrays.asList(<span class="string">&quot;jpg&quot;</span>, <span class="string">&quot;jpeg&quot;</span>, <span class="string">&quot;png&quot;</span>, <span class="string">&quot;tif&quot;</span>, <span class="string">&quot;tiff&quot;</span></span><br><span class="line"><span class="type">File</span> <span class="variable">rootFolder</span> <span class="operator">=</span> FileUtil.file(upload + localPath);</span><br><span class="line">DirectoryScanner.getFileFoldersWithImages(rootFolder, fileFolders, legalSuffix);</span><br><span class="line">logger.info(<span class="string">&quot;列出包含文件的文件夹成功，一共包含&#123;&#125;个文件夹&quot;</span>, fileFolders.size()</span><br><span class="line"><span class="keyword">for</span> (File uploadFileFolder : fileFolders) &#123;</span><br><span class="line">    pathUpLoadProducer.syncSendPathUpload(tenantId,Convert.toStr(taskId),<span class="literal">null</span>,Convert.toStr(uploadFileFolder),Convert.toStr(overWrite),PathUploadType.IMAGE_TO_PDF);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="GrMaP"></a></p><h2 id="2、OFD转PDF">2、OFD转PDF</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;File&gt; fileFolders = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">List&lt;String&gt; legalSuffix = List.of(<span class="string">&quot;ofd&quot;</span></span><br><span class="line">getFoldersWithPDFFiles(upload + localPath, fileFolders, legalSuffix);</span><br><span class="line">logger.info(<span class="string">&quot;成功列出包含PDF的文件夹，总共包含&#123;&#125;个文件夹&quot;</span>, fileFolders.size());</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">folderIndex</span> <span class="operator">=</span> <span class="number">0</span>; folderIndex &lt; fileFolders.size(); folderIndex++) &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">uploadFileFolder</span> <span class="operator">=</span> fileFolders.get(folderIndex);</span><br><span class="line">    pathUpLoadProducer.syncSendPathUpload(tenantId,Convert.toStr(taskId),<span class="literal">null</span>,Convert.toStr(uploadFileFolder),Convert.toStr(overWrite),PathUploadType.OFD);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="ktU3W"></a></p><h2 id="3、案卷合并">3、案卷合并</h2><p>:::warning<br>这个逻辑与合并图片为PDF不同的是，这个会根据全宗去合并 举个例子：<br />A001-004-021-0001.jpg<br />A001-004-021-0002.jpg<br />A001-004-022-0001.jpg<br />A001-004-022-0002.jpg<br />A001-004-022-0003.jpg<br />A001-004-023-0001.jpg<br />最终合并成的文件就是【<br />A001-004-021-0001，<br />A001-004-022-0001，<br />A001-004-023-0001<br />】<br>:::</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">logger.info(<span class="string">&quot;接受到案卷合并处理任务…………&quot;</span>);</span><br><span class="line">List&lt;File&gt; fileFolders = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">List&lt;String&gt; legalSuffix = Arrays.asList(<span class="string">&quot;jpg&quot;</span>, <span class="string">&quot;jpeg&quot;</span>, <span class="string">&quot;png&quot;</span>, <span class="string">&quot;tif&quot;</span>, <span class="string">&quot;tiff&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">File</span> <span class="variable">rootFolder</span> <span class="operator">=</span> FileUtil.file(upload + localPath);</span><br><span class="line">DirectoryScanner.getFileFoldersWithImages(rootFolder, fileFolders, legalSuffix);</span><br><span class="line">logger.info(<span class="string">&quot;列出包含文件的文件夹成功，一共包含&#123;&#125;个文件夹&quot;</span>, fileFolders.size());</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">folderIndex</span> <span class="operator">=</span> <span class="number">0</span>; folderIndex &lt; fileFolders.size(); folderIndex++) &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">uploadFileFolder</span> <span class="operator">=</span> fileFolders.get(folderIndex);</span><br><span class="line">    pathUpLoadProducer.syncSendPathUpload(tenantId,Convert.toStr(taskId),<span class="literal">null</span>,Convert.toStr(uploadFileFolder),Convert.toStr(overWrite),PathUploadType.VOLUME);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="wQQw6"></a></p><h2 id="4、TIFF文件转PDF">4、TIFF文件转PDF</h2>]]></content>
      
      
      <categories>
          
          <category> 各种类型文件操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器路径上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2、MQ配置以及生产者消费者逻辑</title>
      <link href="/posts/97da32d6.html"/>
      <url>/posts/97da32d6.html</url>
      
        <content type="html"><![CDATA[<h2 id="相关配置">相关配置</h2><h3 id="RabbitConfig">RabbitConfig</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitConfig</span> <span class="keyword">implements</span> <span class="title class_">RabbitTemplate</span>.ConfirmCallback, RabbitTemplate.ReturnCallback &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(RabbitConfig.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initRabbitTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        rabbitTemplate.setConfirmCallback(<span class="built_in">this</span>);</span><br><span class="line">        rabbitTemplate.setReturnCallback(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">confirm</span><span class="params">(CorrelationData correlationData, <span class="type">boolean</span> ack, String cause)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (ack) &#123;</span><br><span class="line">            logger.info(<span class="string">&quot;&#123;&#125;消息成功到达交换机&quot;</span>,correlationData.getId());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.info(<span class="string">&quot;消息发送到Exchange失败, &#123;&#125;, cause: &#123;&#125;&quot;</span>, correlationData, cause);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnedMessage</span><span class="params">(Message message, <span class="type">int</span> replyCode, String replyText, String exchange, String routingKey)</span> &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;消息从Exchange路由到Queue失败: exchange: &#123;&#125;, route: &#123;&#125;, replyCode: &#123;&#125;, replyText: &#123;&#125;, message: &#123;&#125;&quot;</span>, exchange, routingKey, replyCode, replyText, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MessageHelper">MessageHelper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageHelper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Message <span class="title function_">objToMsg</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == obj) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println(JSONUtil.toJsonStr(obj));</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> MessageBuilder.withBody(JSONUtil.toJsonStr(obj).getBytes()).build();</span><br><span class="line">        message.getMessageProperties().setDeliveryMode(MessageDeliveryMode.PERSISTENT);<span class="comment">// 消息持久化</span></span><br><span class="line">        message.getMessageProperties().setContentType(MessageProperties.CONTENT_TYPE_JSON);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">msgToObj</span><span class="params">(Message message, Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == message || <span class="literal">null</span> == clazz) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(message.getBody());</span><br><span class="line">        <span class="type">T</span> <span class="variable">obj</span> <span class="operator">=</span> JSONUtil.toBean(str, clazz);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RabbitDirectConfig">RabbitDirectConfig</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitDirectConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">pathUploadQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; arguments = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        arguments.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>, PathUpLoadDeadMessage.EXCHANGE + APP_KEY);</span><br><span class="line">        <span class="comment">//绑定该队列到死信交换机的队列1</span></span><br><span class="line">        arguments.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>, PathUpLoadDeadMessage.ROUTING_KEY + APP_KEY);</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(PathUpLoadMessage.QUEUE + APP_KEY).withArguments(arguments).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">pathUploadExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(PathUpLoadMessage.EXCHANGE + APP_KEY,</span><br><span class="line">                <span class="literal">true</span>,  <span class="comment">// durable: 是否持久化</span></span><br><span class="line">                <span class="literal">false</span>);  <span class="comment">// exclusive: 是否排它</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">pathUploadBinding</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(pathUploadQueue()).to(pathUploadExchange()).with(PathUpLoadMessage.ROUTING_KEY + APP_KEY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">pathUploadDeadQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(PathUpLoadDeadMessage.QUEUE + APP_KEY, <span class="comment">// Queue 名字</span></span><br><span class="line">                <span class="literal">true</span>, <span class="comment">// durable: 是否持久化</span></span><br><span class="line">                <span class="literal">false</span>, <span class="comment">// exclusive: 是否排它</span></span><br><span class="line">                <span class="literal">false</span>); <span class="comment">// autoDelete: 是否自动删除</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">pathUploadDeadExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(PathUpLoadDeadMessage.EXCHANGE + APP_KEY,</span><br><span class="line">                <span class="literal">true</span>,  <span class="comment">// durable: 是否持久化</span></span><br><span class="line">                <span class="literal">false</span>);  <span class="comment">// exclusive: 是否排它</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">pathUploadDeadBinding</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(pathUploadDeadQueue()).to(pathUploadDeadExchange())</span><br><span class="line">                .with(PathUpLoadDeadMessage.ROUTING_KEY + APP_KEY);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="pathUpload包">pathUpload包</h2><h3 id="PathUploadConsumer">PathUploadConsumer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Eliauk</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2023/9/28 15:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@DependsOn(&#123;&quot;appraisalFileRepository&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PathUploadConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(PathUploadConsumer.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PathUploadStrategyContext pathUploadStrategyContext;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener( queues = PathUpLoadMessage.QUEUE + &quot;$&#123;spring.application.name&#125;&quot;, concurrency = &quot;1&quot;)</span></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(Message msg, Channel channel, <span class="meta">@Header(AmqpHeaders.DELIVERY_TAG)</span> <span class="type">long</span> deliveryTag)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">PathUpLoadMessage</span> <span class="variable">message</span> <span class="operator">=</span> MessageHelper.msgToObj(msg, PathUpLoadMessage.class);</span><br><span class="line">        DBContextHolder.setDB(message.getTenantId());</span><br><span class="line"></span><br><span class="line">        LOG.info(<span class="string">&quot;接收到文件上传消息--[线程编号:&#123;&#125;]-[文件夹名:&#123;&#125;]&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">File</span>(message.getFile()).getName());</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">timeStart</span> <span class="operator">=</span> DateUtil.current();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            pathUploadStrategyContext.getFileInferStrategy(message, message.getStrategy());</span><br><span class="line">            <span class="comment">// 只在成功处理后确认消息</span></span><br><span class="line">            channel.basicAck(deliveryTag, <span class="literal">false</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="type">Boolean</span> <span class="variable">redelivered</span> <span class="operator">=</span> msg.getMessageProperties().getRedelivered();</span><br><span class="line">            <span class="keyword">if</span> (redelivered) &#123;</span><br><span class="line">                LOG.info(<span class="string">&quot;异常重试次数已到达设置次数，将发送到死信交换机&quot;</span>);</span><br><span class="line">                channel.basicAck(deliveryTag, <span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            LOG.error(<span class="string">&quot;处理异常，准备进行重试：&#123;&#125;&quot;</span>, Thread.currentThread().getId());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置 requeue 参数为 true 以将消息重新放回队列</span></span><br><span class="line">            channel.basicNack(deliveryTag, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 暂停一段时间，可根据需要调整</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>); <span class="comment">// 等待 5 秒</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException interruptedException) &#123;</span><br><span class="line">                Thread.currentThread().interrupt();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// 返回，以避免在 finally 块中再次确认消息</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            DBContextHolder.clearDB();</span><br><span class="line">            LOG.info(<span class="string">&quot;完成路径上传，总耗时：&#123;&#125;s--[线程编号:&#123;&#125;]&quot;</span>, (DateUtil.current() - timeStart) / <span class="number">1000</span>, Thread.currentThread().getId());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PathUpLoadDeadMessage">PathUpLoadDeadMessage</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Eliauk</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PathUpLoadDeadMessage</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">6106380050056919533L</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE</span> <span class="operator">=</span> <span class="string">&quot;QUEUE_PATH_UPLOAD_DEAD&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE</span> <span class="operator">=</span> <span class="string">&quot;EXCHANGE_PATH_UPLOAD_DEAD&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ROUTING_KEY</span> <span class="operator">=</span> <span class="string">&quot;ROUTING_KEY_PATH_UPLOAD_DEAD&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String taskId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String tenantId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String importTaskId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PathUpLoadMessage">PathUpLoadMessage</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Eliauk</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PathUpLoadMessage</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">3452912668432655539L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE</span> <span class="operator">=</span> <span class="string">&quot;QUEUE_PATH_UPLOAD&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE</span> <span class="operator">=</span> <span class="string">&quot;EXCHANGE_PATH_UPLOAD&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ROUTING_KEY</span> <span class="operator">=</span> <span class="string">&quot;ROUTING_KEY_PATH_UPLOAD&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 任务ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String taskId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 租户ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String tenantId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String fileName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所需合并文件夹</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String file;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所需执行策略</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String strategy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否覆盖</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String overWrite;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PathUpLoadProducer">PathUpLoadProducer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Eliauk</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@DependsOn(&#123;&quot;rabbitConfig&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PathUpLoadProducer</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.application.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String ROUTING_KEY;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">syncSendPathUpload</span><span class="params">(String tenantId, String taskId, String fileName,String file, String overwrite, String strategy)</span> &#123;</span><br><span class="line">        <span class="type">PathUpLoadMessage</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PathUpLoadMessage</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">msgId</span> <span class="operator">=</span> UUID.fastUUID().toString();</span><br><span class="line">        <span class="type">CorrelationData</span> <span class="variable">correlationData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorrelationData</span>(msgId);</span><br><span class="line">        message.setTaskId(taskId);</span><br><span class="line">        message.setTenantId(tenantId);</span><br><span class="line">        message.setFileName(fileName);</span><br><span class="line">        message.setStrategy(strategy);</span><br><span class="line">        message.setOverWrite(overwrite);</span><br><span class="line">        message.setFile(file);</span><br><span class="line">        <span class="comment">// 消息经过的交换机，通过名称指定，路由键：该路由键回去寻找绑定在交换机上相同路由键的队列</span></span><br><span class="line">        rabbitTemplate.convertAndSend(PathUpLoadMessage.EXCHANGE + ROUTING_KEY,</span><br><span class="line">                PathUpLoadMessage.ROUTING_KEY + ROUTING_KEY,</span><br><span class="line">                MessageHelper.objToMsg(message), correlationData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 各种类型文件操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息发送与消费 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3、策略模式所需代码</title>
      <link href="/posts/1396f9d4.html"/>
      <url>/posts/1396f9d4.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、策略接口上下文">1、策略接口上下文</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PathUploadStrategyContext</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Resource</span></span><br><span class="line">        <span class="keyword">private</span> Map&lt;String, PathUploadStrategy&gt; pathUploadStrategyMap;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getFileInferStrategy</span><span class="params">(PathUpLoadMessage message, String strategy)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            pathUploadStrategyMap.get(IBaseEnum.getLabelByValue(strategy, PathUploadEnum.class)).upload(message,strategy);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、策略抽象实现类">2、策略抽象实现类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务器路径上传文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Eliauk</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2023/9/28 15:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractPathUploadStrategyImpl</span> <span class="keyword">implements</span> <span class="title class_">PathUploadStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(AbstractPathUploadStrategyImpl.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">upload</span><span class="params">(PathUpLoadMessage message, String strategy)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        LOG.info(<span class="string">&quot;开始执行&#123;&#125;服务器路径上传策略&quot;</span>, strategy);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (exist(message))&#123;</span><br><span class="line"></span><br><span class="line">            LOG.info(<span class="string">&quot;档号为&#123;&#125;的档案已经存在，跳过上传&quot;</span>,message.getFileName());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        uploadByPath(message, strategy);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务器路径上传抽象方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 队列消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> strategy 路径上传策略</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2023/9/28 15:16</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">uploadByPath</span><span class="params">(PathUpLoadMessage message, String strategy)</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断当前任务是否已经上传抽象方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 队列消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * true:已经上传</span></span><br><span class="line"><span class="comment">     * false:未上传</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2023/9/28 15:16</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">exist</span><span class="params">(PathUpLoadMessage message)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> List&lt;File&gt; <span class="title function_">getAllPDFFiles</span><span class="params">(File rootFolder, List&lt;String&gt; legalSuffix)</span> &#123;</span><br><span class="line">        List&lt;File&gt; pdfFiles = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (rootFolder.isDirectory()) &#123;</span><br><span class="line">            File[] fileList = rootFolder.listFiles();</span><br><span class="line">            <span class="keyword">if</span> (fileList != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (File file : fileList) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">                        pdfFiles.addAll(getAllPDFFiles(file, legalSuffix));</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (file.isFile() &amp;&amp; legalSuffix.contains(getFileExtension(file)) &amp;&amp; !file.getName().startsWith(<span class="string">&quot;._&quot;</span>)) &#123;</span><br><span class="line">                        pdfFiles.add(file);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pdfFiles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取文件的后缀名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getFileExtension</span><span class="params">(File file)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> file.getName();</span><br><span class="line">        <span class="type">int</span> <span class="variable">dotIndex</span> <span class="operator">=</span> fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (dotIndex &gt; <span class="number">0</span> &amp;&amp; dotIndex &lt; fileName.length() - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> fileName.substring(dotIndex + <span class="number">1</span>).toLowerCase();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、策略枚举类">3、策略枚举类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务器路径上传策略枚举</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Eliauk</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2023/9/28 14:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">PathUploadEnum</span> <span class="keyword">implements</span> <span class="title class_">IBaseEnum</span>&#123;</span><br><span class="line"></span><br><span class="line">    VOLUME(<span class="string">&quot;案卷合并&quot;</span>, <span class="string">&quot;volumePathUploadStrategy&quot;</span>),</span><br><span class="line"></span><br><span class="line">    PDF(<span class="string">&quot;PDF文件&quot;</span>, <span class="string">&quot;pdfPathUploadStrategy&quot;</span>),</span><br><span class="line"></span><br><span class="line">    IMAGE_TO_PDF(<span class="string">&quot;合并图片文件&quot;</span>,<span class="string">&quot;mergePicturePathUploadStrategy&quot;</span>),</span><br><span class="line"></span><br><span class="line">    OFD(<span class="string">&quot;OFD文件&quot;</span>, <span class="string">&quot;ofdPathUploadStrategy&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String value;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String label;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getLabel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.label;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、实现类">4、实现类</h2><h3 id="1、-OdfPathUploadStrategyImpl">1、 OdfPathUploadStrategyImpl</h3><p><a href="https://pan.baidu.com/s/1sFWT9XHURnQq6Zj3fgzLkw">OFD转PDF工具源码</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * OFD文件服务器路径上传</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Eliauk</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2023/10/10 9:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service(&quot;ofdPathUploadStrategy&quot;)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor(onConstructor = @__(@Autowired))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OdfPathUploadStrategyImpl</span> <span class="keyword">extends</span> <span class="title class_">AbstractPathUploadStrategyImpl</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(OdfPathUploadStrategyImpl.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AppraisalFileRepository appraisalFileRepository;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AppraisalFileService appraisalFileService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IOssEndPoint ossEndPoint;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">uploadByPath</span><span class="params">(PathUpLoadMessage message, String strategy)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接收所有包含pdf的文件夹</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(message.getFile());</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">folderName</span> <span class="operator">=</span> file.getName();</span><br><span class="line">        <span class="comment">// 拿到任务ID</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">taskId</span> <span class="operator">=</span> Convert.toLong(message.getTaskId());</span><br><span class="line">        <span class="comment">// 拿到租户ID</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">tenantId</span> <span class="operator">=</span> message.getTenantId();</span><br><span class="line">        <span class="comment">// 是否覆盖</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Boolean</span> <span class="variable">overWrite</span> <span class="operator">=</span> Convert.toBool(message.getOverWrite());</span><br><span class="line">        LOG.info(<span class="string">&quot;当前进行服务器路径上传OFD的文件夹是&#123;&#125;&quot;</span>, folderName);</span><br><span class="line">        <span class="keyword">final</span> List&lt;File&gt; pdfFiles = getAllPDFFiles(file, List.of(<span class="string">&quot;ofd&quot;</span>));</span><br><span class="line">        <span class="type">long</span> <span class="variable">timeStart</span> <span class="operator">=</span> DateUtil.current();</span><br><span class="line">        <span class="type">long</span> <span class="variable">countStart</span> <span class="operator">=</span> DateUtil.current();</span><br><span class="line">        LOG.info(<span class="string">&quot;开始解析文件夹&#123;&#125;，包含&#123;&#125;个OFD文件&quot;</span>, folderName, pdfFiles.size());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">fileIndex</span> <span class="operator">=</span> <span class="number">0</span>; fileIndex &lt; pdfFiles.size(); fileIndex++) &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">ofdFile</span> <span class="operator">=</span> pdfFiles.get(fileIndex);</span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> ofdFile.getName();</span><br><span class="line">            <span class="comment">// 判断是否覆盖，如果覆盖就删除原文件，否则跳过</span></span><br><span class="line">            List&lt;AppraisalFile&gt; existingFiles = appraisalFileRepository.findByTaskIdAndFileName(taskId, fileName);</span><br><span class="line">            <span class="keyword">if</span> (!existingFiles.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (overWrite) &#123;</span><br><span class="line">                    List&lt;Long&gt; existingIds = existingFiles.stream().map(AppraisalFile::getId).collect(Collectors.toList());</span><br><span class="line">                    appraisalFileService.deleteExistingFiles(existingIds);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    LOG.info(<span class="string">&quot;已存在的文件将被跳过: &#123;&#125;&quot;</span>, fileName);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Attach</span> <span class="variable">ofdAttach</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 使用第一个 FileInputStream</span></span><br><span class="line">                <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fileInputStream1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(ofdFile)) &#123;</span><br><span class="line">                    ofdAttach  = ossEndPoint.putAttachWithTenant(</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">InMemoryMultipartFile</span>(fileName, fileInputStream1),</span><br><span class="line">                            tenantId</span><br><span class="line">                    ).getData();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 使用第二个 FileInputStream</span></span><br><span class="line">                <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fileInputStream2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(ofdFile)) &#123;</span><br><span class="line">                    <span class="type">ByteArrayOutputStream</span> <span class="variable">stream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">                    ConvertHelper.toPdf(fileInputStream2, stream);</span><br><span class="line">                    <span class="type">Attach</span> <span class="variable">pdfAttach</span> <span class="operator">=</span> ossEndPoint.putAttach(<span class="keyword">new</span> <span class="title class_">InMemoryMultipartFile</span>(IdUtil.randomUUID() + <span class="string">&quot;.pdf&quot;</span>, stream.toByteArray())</span><br><span class="line">                    ).getData();</span><br><span class="line"></span><br><span class="line">                    <span class="type">AppraisalFile</span> <span class="variable">appraisalFile</span> <span class="operator">=</span> appraisalFileService.createAppraisalFile(taskId, fileName, pdfAttach);</span><br><span class="line">                    appraisalFile.setOfdAttach(ofdAttach.getId());</span><br><span class="line">                    appraisalFile.setFileType(InferFileType.OFD);</span><br><span class="line">                    appraisalFileRepository.save(appraisalFile);</span><br><span class="line"></span><br><span class="line">                    LOG.info(<span class="string">&quot;上传OFD成功所在文件夹名称&#123;&#125; - 当前进度: &#123;&#125;/&#123;&#125;，文件名: &#123;&#125;，共已耗时: &#123;&#125;s&quot;</span>,file.getName(),</span><br><span class="line">                            fileIndex+<span class="number">1</span>, pdfFiles.size(), fileName, (DateUtil.current() - timeStart) / <span class="number">1000.0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                LOG.error(<span class="string">&quot;上传文件发生异常: &#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        LOG.info(<span class="string">&quot;上传OFD成功 - 总文件数: &#123;&#125;，耗时: &#123;&#125;s&quot;</span>, pdfFiles.size(), (DateUtil.current() - countStart) / <span class="number">1000.0</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">exist</span><span class="params">(PathUpLoadMessage message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Boolean.FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、VolumePathUploadStrategyImpl">2、VolumePathUploadStrategyImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 案卷合并服务器路径上传策略</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Eliauk</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2023/9/28 16:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service(&quot;volumePathUploadStrategy&quot;)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor(onConstructor = @__(@Autowired))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VolumePathUploadStrategyImpl</span> <span class="keyword">extends</span> <span class="title class_">AbstractPathUploadStrategyImpl</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(VolumePathUploadStrategyImpl.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AppraisalFileRepository appraisalFileRepository;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AppraisalFileService appraisalFileService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IOssEndPoint ossEndPoint;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">uploadByPath</span><span class="params">(PathUpLoadMessage message, String strategy)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">File</span> <span class="variable">uploadFileFolder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(message.getFile());</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">taskId</span> <span class="operator">=</span> Convert.toLong(message.getTaskId());</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">tenantId</span> <span class="operator">=</span> message.getTenantId();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Boolean</span> <span class="variable">overWrite</span> <span class="operator">=</span> Convert.toBool(message.getOverWrite());</span><br><span class="line"></span><br><span class="line">        File[] imageFiles = uploadFileFolder.listFiles();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个Map来存储文件名前缀和相应的文件列表</span></span><br><span class="line">        Map&lt;String, List&lt;File&gt;&gt; groupedFiles = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (File imageFile : imageFiles) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> imageFile.getName();</span><br><span class="line">            <span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> name.substring(<span class="number">0</span>, name.lastIndexOf(<span class="string">&#x27;-&#x27;</span>)); <span class="comment">// 假设前缀是直到最后一个&#x27;-&#x27;符号</span></span><br><span class="line">            groupedFiles.computeIfAbsent(prefix, k -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;()).add(imageFile);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        LOG.info(<span class="string">&quot;开始处理文件夹名称为&#123;&#125;的文件夹，里边最终会合并成&#123;&#125;个文件&quot;</span>,uploadFileFolder.getName(),groupedFiles.size());</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">pdfNum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, List&lt;File&gt;&gt; entry : groupedFiles.entrySet()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            List&lt;File&gt; filesInGroup = entry.getValue();</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">folderName</span> <span class="operator">=</span> prefix;  <span class="comment">// 你可以根据需要修改</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> folderName + <span class="string">&quot;.pdf&quot;</span>;</span><br><span class="line">            <span class="comment">//pathUpLoadProducer.syncSendPathUpload(tenantId,Convert.toStr(taskId),fileName,Convert.toStr(uploadFileFolder),Convert.toStr(overWrite),PathUploadType.PDF);</span></span><br><span class="line">            <span class="comment">// 判断是否覆盖已存在的文件</span></span><br><span class="line">            List&lt;AppraisalFile&gt; existingFiles = appraisalFileRepository.findByTaskIdAndFileName(taskId, fileName);</span><br><span class="line">            <span class="keyword">if</span> (existingFiles.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (overWrite) &#123;</span><br><span class="line">                    List&lt;Long&gt; existingFileIds = existingFiles.stream().map(AppraisalFile::getId).collect(Collectors.toList());</span><br><span class="line">                    appraisalFileService.deleteExistingFiles(existingFileIds);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    LOG.info(<span class="string">&quot;跳过已存在的文件&quot;</span>);</span><br><span class="line">                    pdfNum++;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            List&lt;<span class="type">byte</span>[]&gt; images = filesInGroup.stream()</span><br><span class="line">                    .filter(File::isFile)</span><br><span class="line">                    .map(imageFile -&gt; &#123;</span><br><span class="line">                        <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(imageFile)) &#123;</span><br><span class="line">                            <span class="keyword">return</span> IOUtils.toByteArray(fileInputStream);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                    .filter(Objects::nonNull)</span><br><span class="line">                    .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (images.isEmpty()) &#123;</span><br><span class="line">                pdfNum++;</span><br><span class="line">                LOG.info(<span class="string">&quot;跳过空文件夹&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> <span class="type">byte</span>[] bytes = appraisalFileService.convertToPdf(images);</span><br><span class="line"></span><br><span class="line">            <span class="type">byte</span>[] modifiedPdfData= <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> (<span class="type">PDDocument</span> <span class="variable">document</span> <span class="operator">=</span> PDDocument.load(bytes)) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">lastPageNumber</span> <span class="operator">=</span> document.getNumberOfPages();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 删除最后一页</span></span><br><span class="line">                document.removePage(lastPageNumber - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 保存修改后的PDF</span></span><br><span class="line">                <span class="type">ByteArrayOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">                document.save(outputStream);</span><br><span class="line">                modifiedPdfData = outputStream.toByteArray();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="comment">// 处理PDF操作异常</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Attach</span> <span class="variable">pdfAttach</span> <span class="operator">=</span> ossEndPoint.putAttachWithTenant(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InMemoryMultipartFile</span>(fileName, <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(modifiedPdfData)),</span><br><span class="line">                    tenantId</span><br><span class="line">            ).getData();</span><br><span class="line"></span><br><span class="line">            <span class="type">AppraisalFile</span> <span class="variable">appraisalFile</span> <span class="operator">=</span> appraisalFileService.createAppraisalFile(taskId, fileName, pdfAttach);</span><br><span class="line">            appraisalFileRepository.save(appraisalFile);</span><br><span class="line"></span><br><span class="line">            pdfNum++;</span><br><span class="line">            LOG.info(<span class="string">&quot;合并处理文件夹名称为&#123;&#125;的PDF成功，当前进度：&#123;&#125;/&#123;&#125;，当前文件名：&#123;&#125;，共&#123;&#125;页&quot;</span>,</span><br><span class="line">                    folderName,  pdfNum, groupedFiles.size(), folderName, images.size());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">exist</span><span class="params">(PathUpLoadMessage message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Boolean.FALSE;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、MergePicturePathUploadStrategyImpl">3、MergePicturePathUploadStrategyImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 合并图片文件服务器路径上传策略</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Eliauk</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2023/10/7 16:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service(&quot;mergePicturePathUploadStrategy&quot;)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor(onConstructor = @__(@Autowired))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MergePicturePathUploadStrategyImpl</span> <span class="keyword">extends</span> <span class="title class_">AbstractPathUploadStrategyImpl</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(MergePicturePathUploadStrategyImpl.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AppraisalFileRepository appraisalFileRepository;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AppraisalFileService appraisalFileService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IOssEndPoint ossEndPoint;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">uploadByPath</span><span class="params">(PathUpLoadMessage message, String strategy)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接收所有包含pdf的文件夹</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(message.getFile());</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">folderName</span> <span class="operator">=</span> file.getName();</span><br><span class="line">        <span class="comment">// 拿到任务ID</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">taskId</span> <span class="operator">=</span> Convert.toLong(message.getTaskId());</span><br><span class="line">        <span class="comment">// 拿到租户ID</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">tenantId</span> <span class="operator">=</span> message.getTenantId();</span><br><span class="line">        <span class="comment">// 是否覆盖</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Boolean</span> <span class="variable">overWrite</span> <span class="operator">=</span> Convert.toBool(message.getOverWrite());</span><br><span class="line">        LOG.info(<span class="string">&quot;当前进行服务器路径上传进行合并图片文件的文件夹是&#123;&#125;&quot;</span>, folderName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> File[] imageFiles = file.listFiles();</span><br><span class="line">        <span class="keyword">if</span> (ObjectUtil.isNotEmpty(imageFiles)) &#123;</span><br><span class="line">            Arrays.sort(imageFiles, Comparator.comparing(File::getName));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> folderName + <span class="string">&quot;.pdf&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断是否覆盖已存在的文件</span></span><br><span class="line">        List&lt;AppraisalFile&gt; existingFiles = appraisalFileRepository.findByTaskIdAndFileName(taskId, fileName);</span><br><span class="line">        <span class="keyword">if</span> (!existingFiles.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (overWrite) &#123;</span><br><span class="line">                List&lt;Long&gt; existingFileIds = existingFiles.stream().map(AppraisalFile::getId).collect(Collectors.toList());</span><br><span class="line">                appraisalFileService.deleteExistingFiles(existingFileIds);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                LOG.info(<span class="string">&quot;跳过已存在的文件&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ObjectUtil.isNotEmpty(imageFiles)) &#123;</span><br><span class="line">            Arrays.sort(imageFiles, Comparator.comparing(File::getName));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;<span class="type">byte</span>[]&gt; images = Arrays.stream(imageFiles)</span><br><span class="line">                .filter(File::isFile)</span><br><span class="line">                .map(imageFile -&gt; &#123;</span><br><span class="line">                    <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(imageFile)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> IOUtils.toByteArray(fileInputStream);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .filter(Objects::nonNull)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (images.isEmpty()) &#123;</span><br><span class="line"></span><br><span class="line">            LOG.info(<span class="string">&quot;跳过空文件夹&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">byte</span>[] bytes = appraisalFileService.convertToPdf(images);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] modifiedPdfData= <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">PDDocument</span> <span class="variable">document</span> <span class="operator">=</span> PDDocument.load(bytes)) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">lastPageNumber</span> <span class="operator">=</span> document.getNumberOfPages();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 删除最后一页</span></span><br><span class="line">            document.removePage(lastPageNumber - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 保存修改后的PDF</span></span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            document.save(outputStream);</span><br><span class="line">            modifiedPdfData = outputStream.toByteArray();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// 处理PDF操作异常</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Attach</span> <span class="variable">pdfAttach</span> <span class="operator">=</span> ossEndPoint.putAttachWithTenant(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InMemoryMultipartFile</span>(fileName, <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(modifiedPdfData)),</span><br><span class="line">                tenantId</span><br><span class="line">        ).getData();</span><br><span class="line"></span><br><span class="line">        <span class="type">AppraisalFile</span> <span class="variable">appraisalFile</span> <span class="operator">=</span> appraisalFileService.createAppraisalFile(taskId, fileName, pdfAttach);</span><br><span class="line">        appraisalFileRepository.save(appraisalFile);</span><br><span class="line"></span><br><span class="line">        LOG.info(<span class="string">&quot;当前文件夹名称为&#123;&#125;,当前文件名：&#123;&#125;，共&#123;&#125;页&quot;</span>, folderName ,fileName, images.size());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">exist</span><span class="params">(PathUpLoadMessage message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Boolean.FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 各种类型文件操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字体打包进容器(用于OFD文件)</title>
      <link href="/posts/81a06a9b.html"/>
      <url>/posts/81a06a9b.html</url>
      
        <content type="html"><![CDATA[<div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='0.5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>字体打包进容器(用于OFD文件)</p></div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">首先将fonts解压出来，把解压后的文件夹放到/usr/share/fonts/win目录下</span><br><span class="line">cd /usr/share/fonts</span><br><span class="line">docker cp win ai-sensitive-x:/usr/share/fonts/win</span><br><span class="line">docker restart ai-sensitive-x</span><br></pre></td></tr></table></figure><p><a href="https://pan.baidu.com/s/1De3VRUQ1yJtpQL4tIBaR4g">字体的百度网盘链接</a></p><blockquote><ol><li>首先从链接中下载所有的字体然后解压到宿主机的/usr/share/fonts/win目录下</li><li>然后进入到fonts目录下  (cd /usr/share/fonts)</li><li>然后将所有的字体放到容器的指定目录中 (docker cp win ai-sensitive-x:/usr/share/fonts/win)</li><li>执行完之后重启服务就可以了</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 各种类型文件操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字体相关 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>X、工具类</title>
      <link href="/posts/163b33dd.html"/>
      <url>/posts/163b33dd.html</url>
      
        <content type="html"><![CDATA[<h2 id="PicUtil（文件压缩工具类）">PicUtil（文件压缩工具类）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件压缩工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Eliauk </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PicUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] compressPictureForScale(String srcPath, <span class="type">long</span> desFileSize, <span class="type">double</span> accuracy) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(srcPath)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">File</span> <span class="variable">srcFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(srcPath);</span><br><span class="line">        <span class="keyword">if</span> (!srcFile.exists()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">formatName</span> <span class="operator">=</span> FilenameUtils.getExtension(srcPath);</span><br><span class="line">        BufferedImage image;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">srcFileSize</span> <span class="operator">=</span> srcFile.length();</span><br><span class="line">            System.out.println(<span class="string">&quot;源图片: &quot;</span> + srcPath + <span class="string">&quot;, 大小: &quot;</span> + srcFileSize / <span class="number">1024</span> + <span class="string">&quot;kb&quot;</span>);</span><br><span class="line"></span><br><span class="line">            image = Thumbnails.of(srcPath).scale(<span class="number">1f</span>).asBufferedImage();</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            compressPicCycle(image, desFileSize, accuracy, formatName, byteArrayOutputStream);</span><br><span class="line">            image.getGraphics().dispose();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;图片压缩完成!&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">byte</span>[] byteArray = byteArrayOutputStream.toByteArray();</span><br><span class="line">            System.out.println(<span class="string">&quot;源图片压缩后为: &quot;</span> + srcPath + <span class="string">&quot;, 大小: &quot;</span> + byteArray.length / <span class="number">1024</span> + <span class="string">&quot;kb&quot;</span>);</span><br><span class="line">            byteArrayOutputStream.close();</span><br><span class="line">            <span class="keyword">return</span> byteArray;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">compressPicCycle</span><span class="params">(BufferedImage desImage, <span class="type">long</span> desFileSize, <span class="type">double</span> accuracy, String formatName, ByteArrayOutputStream byteArrayOutputStream)</span> <span class="keyword">throws</span> IOException, IOException &#123;</span><br><span class="line">        byteArrayOutputStream.reset();</span><br><span class="line">        ImageIO.write(desImage, formatName, byteArrayOutputStream);</span><br><span class="line">        <span class="type">byte</span>[] byteArray = byteArrayOutputStream.toByteArray();</span><br><span class="line">        <span class="keyword">if</span> (byteArray.length / <span class="number">1024</span> &gt; desFileSize) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">srcWidth</span> <span class="operator">=</span> desImage.getWidth();</span><br><span class="line">            <span class="type">int</span> <span class="variable">srcHeight</span> <span class="operator">=</span> desImage.getHeight();</span><br><span class="line">            <span class="type">int</span> <span class="variable">destWidth</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(srcWidth).multiply(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(accuracy)).intValue();</span><br><span class="line">            <span class="type">int</span> <span class="variable">destHeight</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(srcHeight).multiply(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(accuracy)).intValue();</span><br><span class="line">            <span class="type">BufferedImage</span> <span class="variable">image</span> <span class="operator">=</span> Thumbnails.of(desImage).size(destWidth, destHeight).outputQuality(accuracy).asBufferedImage();</span><br><span class="line">            compressPicCycle(image, desFileSize, accuracy, formatName, byteArrayOutputStream);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="IBaseEnum（通用枚举接口）">IBaseEnum（通用枚举接口）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Eliauk</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2023/9/28 14:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IBaseEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    Object <span class="title function_">getValue</span><span class="params">()</span>;</span><br><span class="line">    String <span class="title function_">getLabel</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取与给定值匹配的枚举常量。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;E&gt;    继承自Enum并且实现IBaseEnum的泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value  要查找的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz  枚举类的Class对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>       与给定值匹配的枚举常量，如果没有找到则返回null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException 如果提供的值为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &lt;E <span class="keyword">extends</span> <span class="title class_">Enum</span>&lt;E&gt; &amp; IBaseEnum&gt; E <span class="title function_">getEnumByValue</span><span class="params">(Object value, Class&lt;E&gt; clazz)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(value);</span><br><span class="line">        EnumSet&lt;E&gt; allEnums = EnumSet.allOf(clazz);</span><br><span class="line">        <span class="keyword">return</span> allEnums.stream().filter(e -&gt; value.equals(e.getValue())).findFirst().orElse(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过给定的值获取枚举常量的标签。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;E&gt;    继承自Enum并且实现IBaseEnum的泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value  要查找的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz  枚举类的Class对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>       与给定值匹配的枚举标签，如果没有找到则返回null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &lt;E <span class="keyword">extends</span> <span class="title class_">Enum</span>&lt;E&gt; &amp; IBaseEnum&gt; String <span class="title function_">getLabelByValue</span><span class="params">(Object value, Class&lt;E&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="type">E</span> <span class="variable">matchEnum</span> <span class="operator">=</span> getEnumByValue(value, clazz);</span><br><span class="line">        <span class="type">String</span> <span class="variable">label</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(matchEnum)) &#123;</span><br><span class="line">            label = matchEnum.getLabel();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> label;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过给定的标签获取匹配的枚举常量。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;E&gt;    继承自Enum并且实现IBaseEnum的泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> label  要查找的标签</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz  枚举类的Class对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>       与给定标签匹配的枚举常量，如果没有找到则返回null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException 如果提供的标签为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &lt;E <span class="keyword">extends</span> <span class="title class_">Enum</span>&lt;E&gt; &amp; IBaseEnum&gt; E <span class="title function_">getEnumByLabel</span><span class="params">(String label, Class&lt;E&gt; clazz)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(label);</span><br><span class="line">        EnumSet&lt;E&gt; allEnums = EnumSet.allOf(clazz);</span><br><span class="line">        Optional&lt;E&gt; match = allEnums.stream().filter(e -&gt; label.equals(e.getLabel())).findFirst();</span><br><span class="line">        <span class="keyword">return</span> match.orElse(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TextValidator（正则工具类）">TextValidator（正则工具类）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过正则表达判断是否正确的手机号，固定电话，身份证，邮箱等.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 从AndroidUtilCode的RegexUtils移植, 性能优化将正则表达式为预编译, 并修改了TEL的正则表达式.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Eliauk</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextValidator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 正则：手机号（简单）, 1字头＋10位数字即可.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REGEX_MOBILE_SIMPLE</span> <span class="operator">=</span> <span class="string">&quot;^[1]\\d&#123;10&#125;$&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Pattern</span> <span class="variable">PATTERN_REGEX_MOBILE_SIMPLE</span> <span class="operator">=</span> Pattern.compile(REGEX_MOBILE_SIMPLE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 正则：手机号（精确）, 已知3位前缀＋8位数字</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 移动：134(0-8)、135、136、137、138、139、147、150、151、152、157、158、159、178、182、183、184、187、188</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 联通：130、131、132、145、155、156、175、176、185、186</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 电信：133、153、173、177、180、181、189</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 全球星：1349</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 虚拟运营商：170</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REGEX_MOBILE_EXACT</span> <span class="operator">=</span> <span class="string">&quot;^((13[0-9])|(14[5,7])|(15[0-3,5-9])|(17[0,3,5-8])|(18[0-9])|(147))\\d&#123;8&#125;$&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Pattern</span> <span class="variable">PATTERN_REGEX_MOBILE_EXACT</span> <span class="operator">=</span> Pattern.compile(REGEX_MOBILE_EXACT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 正则：固定电话号码，可带区号，然后6至少8位数字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REGEX_TEL</span> <span class="operator">=</span> <span class="string">&quot;^(\\d&#123;3,4&#125;-)?\\d&#123;6,8&#125;$&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Pattern</span> <span class="variable">PATTERN_REGEX_TEL</span> <span class="operator">=</span> Pattern.compile(REGEX_TEL);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 正则：身份证号码15位, 数字且关于生日的部分必须正确</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REGEX_ID_CARD15</span> <span class="operator">=</span> <span class="string">&quot;^[1-9]\\d&#123;7&#125;((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d&#123;3&#125;$&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Pattern</span> <span class="variable">PATTERN_REGEX_ID_CARD15</span> <span class="operator">=</span> Pattern.compile(REGEX_ID_CARD15);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 正则：身份证号码18位, 数字且关于生日的部分必须正确</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REGEX_ID_CARD18</span> <span class="operator">=</span> <span class="string">&quot;^[1-9]\\d&#123;5&#125;[1-9]\\d&#123;3&#125;((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d&#123;3&#125;([0-9Xx])$&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Pattern</span> <span class="variable">PATTERN_REGEX_ID_CARD18</span> <span class="operator">=</span> Pattern.compile(REGEX_ID_CARD18);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 正则：邮箱, 有效字符(不支持中文), 且中间必须有@，后半部分必须有.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REGEX_EMAIL</span> <span class="operator">=</span> <span class="string">&quot;^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Pattern</span> <span class="variable">PATTERN_REGEX_EMAIL</span> <span class="operator">=</span> Pattern.compile(REGEX_EMAIL);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 正则：URL, 必须有&quot;://&quot;,前面必须是英文，后面不能有空格</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REGEX_URL</span> <span class="operator">=</span> <span class="string">&quot;[a-zA-z]+://[^\\s]*&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Pattern</span> <span class="variable">PATTERN_REGEX_URL</span> <span class="operator">=</span> Pattern.compile(REGEX_URL);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 正则：yyyy-MM-dd格式的日期校验，已考虑平闰年</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REGEX_DATE</span> <span class="operator">=</span> <span class="string">&quot;^(?:(?!0000)[0-9]&#123;4&#125;-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]&#123;2&#125;(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29)$&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Pattern</span> <span class="variable">PATTERN_REGEX_DATE</span> <span class="operator">=</span> Pattern.compile(REGEX_DATE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 正则：IP地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REGEX_IP</span> <span class="operator">=</span> <span class="string">&quot;((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.)&#123;3&#125;(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Pattern</span> <span class="variable">PATTERN_REGEX_IP</span> <span class="operator">=</span> Pattern.compile(REGEX_IP);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/////////////////</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证手机号（简单）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isMobileSimple</span><span class="params">(CharSequence input)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isMatch(PATTERN_REGEX_MOBILE_SIMPLE, input);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证手机号（精确）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isMobileExact</span><span class="params">(CharSequence input)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isMatch(PATTERN_REGEX_MOBILE_EXACT, input);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证固定电话号码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isTel</span><span class="params">(CharSequence input)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isMatch(PATTERN_REGEX_TEL, input);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证15或18位身份证号码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isIdCard</span><span class="params">(CharSequence input)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isMatch(PATTERN_REGEX_ID_CARD15, input) || isMatch(PATTERN_REGEX_ID_CARD18, input);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证邮箱</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isEmail</span><span class="params">(CharSequence input)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isMatch(PATTERN_REGEX_EMAIL, input);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证URL</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isUrl</span><span class="params">(CharSequence input)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isMatch(PATTERN_REGEX_URL, input);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证yyyy-MM-dd格式的日期校验，已考虑平闰年</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isDate</span><span class="params">(CharSequence input)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isMatch(PATTERN_REGEX_DATE, input);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证IP地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isIp</span><span class="params">(CharSequence input)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isMatch(PATTERN_REGEX_IP, input);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isMatch</span><span class="params">(Pattern pattern, CharSequence input)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> StringUtils.isNotEmpty(input) &amp;&amp; pattern.matcher(input).matches();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DirectoryScanner（文件扫描工具类）"><strong>DirectoryScanner（文件扫描工具类）</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件扫描工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Eliauk </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectoryScanner</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归地遍历指定的文件夹及其所有子文件夹，查找包含具有合法后缀名的图片文件的文件夹。</span></span><br><span class="line"><span class="comment"> * 找到这样的文件夹后，将其添加到给定的fileFolders列表中。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> folder       要开始遍历的根文件夹。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fileFolders  用于存储包含合法图片的文件夹的列表。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> legalSuffix  合法图片文件后缀名的列表。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getFileFoldersWithImages</span><span class="params">(File folder, List&lt;File&gt; fileFolders, List&lt;String&gt; legalSuffix)</span> &#123;</span><br><span class="line">    File[] subFiles = folder.listFiles();</span><br><span class="line">    <span class="keyword">if</span> (subFiles != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">containsValidImage</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (File subFile : subFiles) &#123;</span><br><span class="line">            <span class="keyword">if</span> (subFile.isFile() &amp;&amp; legalSuffix.contains(FileUtil.getSuffix(subFile).toLowerCase())) &#123;</span><br><span class="line">                containsValidImage = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (containsValidImage) &#123;</span><br><span class="line">            fileFolders.add(folder);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (File subFolder : subFiles) &#123;</span><br><span class="line">            <span class="keyword">if</span> (subFolder.isDirectory()) &#123;</span><br><span class="line">                getFileFoldersWithImages(subFolder, fileFolders, legalSuffix);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归遍历给定目录及其子目录，找出包含指定后缀名（通常为PDF）的文件夹。</span></span><br><span class="line"><span class="comment"> * 将这些包含有符合后缀名条件的文件的文件夹添加到fileFolders列表中。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> directoryPath 待遍历的目录路径。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fileFolders   存储包含有特定后缀名文件的文件夹的列表。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> legalSuffix   有效的文件后缀名列表。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getFoldersWithPDFFiles</span><span class="params">(String directoryPath, List&lt;File&gt; fileFolders, List&lt;String&gt; legalSuffix)</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">rootFolder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(directoryPath);</span><br><span class="line">    <span class="keyword">if</span> (rootFolder.isDirectory()) &#123;</span><br><span class="line">        File[] fileList = rootFolder.listFiles();</span><br><span class="line">        <span class="keyword">if</span> (fileList != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (File file : fileList) &#123;</span><br><span class="line">                <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">                    <span class="comment">// 递归处理子目录</span></span><br><span class="line">                    getFoldersWithPDFFiles(file.getAbsolutePath(), fileFolders, legalSuffix);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (file.isFile() &amp;&amp; legalSuffix.contains(getFileExtension(file))) &#123;</span><br><span class="line">                    <span class="comment">// 当前文件是PDF文件，将其父目录加入待解析目录列表</span></span><br><span class="line">                    <span class="type">File</span> <span class="variable">parentFolder</span> <span class="operator">=</span> file.getParentFile();</span><br><span class="line">                    <span class="keyword">if</span> (!fileFolders.contains(parentFolder)) &#123;</span><br><span class="line">                        fileFolders.add(parentFolder);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">static</span> List&lt;File&gt; <span class="title function_">getAllPDFFiles</span><span class="params">(File rootFolder, List&lt;String&gt; legalSuffix)</span> &#123;</span><br><span class="line">        List&lt;File&gt; pdfFiles = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (rootFolder.isDirectory()) &#123;</span><br><span class="line">            File[] fileList = rootFolder.listFiles();</span><br><span class="line">            <span class="keyword">if</span> (fileList != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (File file : fileList) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">                        pdfFiles.addAll(getAllPDFFiles(file, legalSuffix));</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (file.isFile() &amp;&amp; legalSuffix.contains(getFileExtension(file)) &amp;&amp; !file.getName().startsWith(<span class="string">&quot;._&quot;</span>)) &#123;</span><br><span class="line">                        pdfFiles.add(file);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pdfFiles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ConvertToPDF-各种类型文件转换PDF">ConvertToPDF(各种类型文件转换PDF)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">byte</span>[] convertToPdf(List&lt;<span class="type">byte</span>[]&gt; files) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// calculate mime type in advance</span></span><br><span class="line">        <span class="type">Tika</span> <span class="variable">tika</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tika</span>();</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; mimeTypes = files.stream().map(fileData -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> (<span class="type">TikaInputStream</span> <span class="variable">tikaStream</span> <span class="operator">=</span> TikaInputStream.get(fileData)) &#123;</span><br><span class="line">                <span class="keyword">return</span> tika.detect(tikaStream);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mimeTypes.stream().noneMatch(mimeType -&gt; mimeType != <span class="literal">null</span> &amp;&amp; mimeType.toLowerCase().contains(<span class="string">&quot;pdf&quot;</span>))) &#123;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">finalOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">PdfWriter</span> <span class="variable">finalWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PdfWriter</span>(finalOutputStream);</span><br><span class="line">            <span class="type">PdfDocument</span> <span class="variable">finalPdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PdfDocument</span>(finalWriter);</span><br><span class="line">            <span class="type">Document</span> <span class="variable">finalDocument</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Document</span>(finalPdf);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; files.size(); i++) &#123;</span><br><span class="line">                <span class="type">byte</span>[] fileData = files.get(i);</span><br><span class="line">                <span class="type">String</span> <span class="variable">mimeType</span> <span class="operator">=</span> mimeTypes.get(i);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(fileData)) &#123;</span><br><span class="line">                     <span class="keyword">if</span> (mimeType != <span class="literal">null</span> &amp;&amp; (mimeType.toLowerCase().contains(<span class="string">&quot;png&quot;</span>)</span><br><span class="line">                            || mimeType.toLowerCase().contains(<span class="string">&quot;jpg&quot;</span>) || mimeType.toLowerCase().contains(<span class="string">&quot;jpeg&quot;</span>))) &#123;</span><br><span class="line">                        com.itextpdf.io.image.<span class="type">ImageData</span> <span class="variable">imageData</span> <span class="operator">=</span> ImageDataFactory.create(changeDPI(fileData));</span><br><span class="line">                        <span class="type">Image</span> <span class="variable">image</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Image</span>(imageData);</span><br><span class="line">                        <span class="type">PageSize</span> <span class="variable">pageSize</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageSize</span>(image.getImageWidth(), image.getImageHeight());</span><br><span class="line">                        finalDocument.getPdfDocument().addNewPage(pageSize);</span><br><span class="line">                        <span class="comment">// 使用已有的布局器，并将页面边距设置为0</span></span><br><span class="line">                        finalDocument.setMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                        <span class="comment">// 将图像添加到已有的布局器</span></span><br><span class="line">                        finalDocument.add(image);</span><br><span class="line">                        <span class="keyword">if</span> (i == files.size() - <span class="number">1</span>) &#123;</span><br><span class="line">                            finalDocument.add(<span class="keyword">new</span> <span class="title class_">AreaBreak</span>(AreaBreakType.NEXT_PAGE));</span><br><span class="line">                            finalDocument.close();</span><br><span class="line">                            <span class="keyword">return</span> finalOutputStream.toByteArray();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mimeType != <span class="literal">null</span> &amp;&amp; (mimeType.toLowerCase().contains(<span class="string">&quot;tiff&quot;</span>) || mimeType.toLowerCase().contains(<span class="string">&quot;tif&quot;</span>))) &#123;</span><br><span class="line">                        <span class="keyword">try</span> (<span class="type">ImageInputStream</span> <span class="variable">imageInputStream</span> <span class="operator">=</span> ImageIO.createImageInputStream(inputStream)) &#123;</span><br><span class="line">                            Iterator&lt;ImageReader&gt; imageReaders = ImageIO.getImageReaders(imageInputStream);</span><br><span class="line">                            <span class="keyword">if</span> (imageReaders.hasNext()) &#123;</span><br><span class="line">                                <span class="type">ImageReader</span> <span class="variable">reader</span> <span class="operator">=</span> imageReaders.next();</span><br><span class="line">                                reader.setInput(imageInputStream);</span><br><span class="line">                                <span class="type">int</span> <span class="variable">pageCount</span> <span class="operator">=</span> reader.getNumImages(<span class="literal">true</span>);</span><br><span class="line">                                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; pageCount; k++) &#123;</span><br><span class="line">                                    <span class="type">BufferedImage</span> <span class="variable">page</span> <span class="operator">=</span> reader.read(k);</span><br><span class="line">                                    <span class="keyword">try</span> (<span class="type">ByteArrayOutputStream</span> <span class="variable">pageOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>()) &#123;</span><br><span class="line">                                        ImageIO.write(page, <span class="string">&quot;png&quot;</span>, pageOutputStream);</span><br><span class="line">                                        <span class="type">ImageData</span> <span class="variable">imageData</span> <span class="operator">=</span> ImageDataFactory.create(pageOutputStream.toByteArray());</span><br><span class="line">                                        <span class="type">Image</span> <span class="variable">image</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Image</span>(imageData);</span><br><span class="line">                                        finalDocument.add(image);</span><br><span class="line">                                        finalDocument.add(<span class="keyword">new</span> <span class="title class_">AreaBreak</span>(AreaBreakType.NEXT_PAGE)); <span class="comment">// Add a page break after each image</span></span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            finalDocument.close();</span><br><span class="line">            finalPdf.close();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> finalOutputStream.toByteArray();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">batchSize</span> <span class="operator">=</span> <span class="number">50</span>;                     <span class="comment">// 每批处理的文件数量</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">totalFiles</span> <span class="operator">=</span> files.size();</span><br><span class="line">            <span class="type">int</span> <span class="variable">batches</span> <span class="operator">=</span> (<span class="type">int</span>) Math.ceil((<span class="type">double</span>) totalFiles / batchSize);</span><br><span class="line"></span><br><span class="line">            <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(Math.min(batches, Runtime.getRuntime().availableProcessors()));</span><br><span class="line"></span><br><span class="line">            List&lt;CompletableFuture&lt;PDDocument&gt;&gt; futures = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; batches; i++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">fromIndex</span> <span class="operator">=</span> i * batchSize;</span><br><span class="line">                <span class="type">int</span> <span class="variable">toIndex</span> <span class="operator">=</span> Math.min((i + <span class="number">1</span>) * batchSize, totalFiles);</span><br><span class="line">                List&lt;<span class="type">byte</span>[]&gt; batchFiles = files.subList(fromIndex, toIndex);</span><br><span class="line"></span><br><span class="line">                CompletableFuture&lt;PDDocument&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">                    <span class="type">PDDocument</span> <span class="variable">batchPdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PDDocument</span>();</span><br><span class="line">                    <span class="type">PDFMergerUtility</span> <span class="variable">merger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PDFMergerUtility</span>();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">byte</span>[] fileData : batchFiles) &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">mimeType</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            mimeType = URLConnection.guessContentTypeFromStream(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(fileData));</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (isPDF(fileData)) &#123;</span><br><span class="line">                            <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(fileData)) &#123;</span><br><span class="line">                                <span class="type">PDDocument</span> <span class="variable">sourcePdf</span> <span class="operator">=</span> PDDocument.load(inputStream);</span><br><span class="line">                                merger.appendDocument(batchPdf, sourcePdf);</span><br><span class="line">                                sourcePdf.close();</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mimeType != <span class="literal">null</span> &amp;&amp; (mimeType.toLowerCase().contains(<span class="string">&quot;png&quot;</span>)</span><br><span class="line">                                || mimeType.toLowerCase().contains(<span class="string">&quot;jpg&quot;</span>) || mimeType.toLowerCase().contains(<span class="string">&quot;jpeg&quot;</span>))) &#123;</span><br><span class="line">                            <span class="type">PDPage</span> <span class="variable">page</span> <span class="operator">=</span> createPDPageFromImage(batchPdf, fileData);</span><br><span class="line">                            <span class="keyword">if</span> (page != <span class="literal">null</span>) &#123;</span><br><span class="line">                                batchPdf.addPage(page);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mimeType != <span class="literal">null</span> &amp;&amp; (mimeType.toLowerCase().contains(<span class="string">&quot;tiff&quot;</span>) || mimeType.toLowerCase().contains(<span class="string">&quot;tif&quot;</span>))) &#123;</span><br><span class="line">                            List&lt;<span class="type">byte</span>[]&gt; tiffImages = <span class="literal">null</span>;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                tiffImages = tiffToImage(fileData);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">for</span> (<span class="type">byte</span>[] imageFileData : tiffImages) &#123;</span><br><span class="line">                                <span class="type">PDPage</span> <span class="variable">page</span> <span class="operator">=</span> createPDPageFromImage(batchPdf, imageFileData);</span><br><span class="line">                                <span class="keyword">if</span> (page != <span class="literal">null</span>) &#123;</span><br><span class="line">                                    batchPdf.addPage(page);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> batchPdf;</span><br><span class="line">                &#125;, executorService);</span><br><span class="line"></span><br><span class="line">                futures.add(future);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            CompletableFuture&lt;Void&gt; allFutures = CompletableFuture.allOf(futures.toArray(<span class="keyword">new</span> <span class="title class_">CompletableFuture</span>[<span class="number">0</span>]));</span><br><span class="line">            allFutures.join();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 构建最终的有序 PDF 文档</span></span><br><span class="line">            <span class="comment">// 构建最终的有序 PDF 文档</span></span><br><span class="line">            <span class="type">PDDocument</span> <span class="variable">finalPdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PDDocument</span>();</span><br><span class="line">            <span class="type">PDFMergerUtility</span> <span class="variable">merger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PDFMergerUtility</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (CompletableFuture&lt;PDDocument&gt; future : futures) &#123;</span><br><span class="line">                <span class="type">PDDocument</span> <span class="variable">batchPdf</span> <span class="operator">=</span> future.join();</span><br><span class="line">                merger.appendDocument(finalPdf, batchPdf);</span><br><span class="line">                batchPdf.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">PDPage</span> <span class="variable">blankPage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PDPage</span>();</span><br><span class="line">            finalPdf.addPage(blankPage);</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            finalPdf.save(outputStream);</span><br><span class="line">            finalPdf.close();</span><br><span class="line"></span><br><span class="line">            executorService.shutdown();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> outputStream.toByteArray();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  设置图片的DPI为符合国家文档标准的300DPI便于查看</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">byte</span>[] changeDPI(<span class="type">byte</span>[] imageData) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 从字节数组读取图像</span></span><br><span class="line">            <span class="type">BufferedImage</span> <span class="variable">image</span> <span class="operator">=</span> ImageIO.read(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(imageData));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取一个ImageWriter</span></span><br><span class="line">            <span class="type">ImageWriter</span> <span class="variable">writer</span> <span class="operator">=</span> ImageIO.getImageWritersByFormatName(<span class="string">&quot;png&quot;</span>).next();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 准备输出流</span></span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ImageOutputStream</span> <span class="variable">ios</span> <span class="operator">=</span> ImageIO.createImageOutputStream(baos);</span><br><span class="line">            writer.setOutput(ios);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置DPI为300</span></span><br><span class="line">            <span class="type">IIOMetadata</span> <span class="variable">metadata</span> <span class="operator">=</span> writer.getDefaultImageMetadata(<span class="keyword">new</span> <span class="title class_">ImageTypeSpecifier</span>(image), <span class="literal">null</span>);</span><br><span class="line">            <span class="type">IIOMetadataNode</span> <span class="variable">root</span> <span class="operator">=</span> (IIOMetadataNode) metadata.getAsTree(<span class="string">&quot;javax_imageio_1.0&quot;</span>);</span><br><span class="line">            <span class="type">IIOMetadataNode</span> <span class="variable">dimension</span> <span class="operator">=</span> getChildNode(root, <span class="string">&quot;Dimension&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (dimension == <span class="literal">null</span>) &#123;</span><br><span class="line">                dimension = <span class="keyword">new</span> <span class="title class_">IIOMetadataNode</span>(<span class="string">&quot;Dimension&quot;</span>);</span><br><span class="line">                root.appendChild(dimension);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">IIOMetadataNode</span> <span class="variable">horiz</span> <span class="operator">=</span> getChildNode(dimension, <span class="string">&quot;HorizontalPixelSize&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (horiz == <span class="literal">null</span>) &#123;</span><br><span class="line">                horiz = <span class="keyword">new</span> <span class="title class_">IIOMetadataNode</span>(<span class="string">&quot;HorizontalPixelSize&quot;</span>);</span><br><span class="line">                dimension.appendChild(horiz);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">IIOMetadataNode</span> <span class="variable">vert</span> <span class="operator">=</span> getChildNode(dimension, <span class="string">&quot;VerticalPixelSize&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (vert == <span class="literal">null</span>) &#123;</span><br><span class="line">                vert = <span class="keyword">new</span> <span class="title class_">IIOMetadataNode</span>(<span class="string">&quot;VerticalPixelSize&quot;</span>);</span><br><span class="line">                dimension.appendChild(vert);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            horiz.setAttribute(<span class="string">&quot;value&quot;</span>, Double.toString(<span class="number">25.4</span> / <span class="number">300</span>));</span><br><span class="line">            vert.setAttribute(<span class="string">&quot;value&quot;</span>, Double.toString(<span class="number">25.4</span> / <span class="number">300</span>));</span><br><span class="line">            metadata.setFromTree(<span class="string">&quot;javax_imageio_1.0&quot;</span>, root);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 写入图像</span></span><br><span class="line">            writer.write(<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">IIOImage</span>(image, <span class="literal">null</span>, metadata), <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">            ios.close();</span><br><span class="line">            writer.dispose();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 将PDF的页拆分为图片</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> PDPage <span class="title function_">createPDPageFromImage</span><span class="params">(PDDocument pdf, <span class="type">byte</span>[] imageData)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(imageData)) &#123;</span><br><span class="line">            <span class="type">BufferedImage</span> <span class="variable">image</span> <span class="operator">=</span> ImageIO.read(is);</span><br><span class="line">            <span class="keyword">if</span> (image == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">PDImageXObject</span> <span class="variable">imageObject</span> <span class="operator">=</span> LosslessFactory.createFromImage(pdf, image);</span><br><span class="line">            <span class="type">PDPage</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PDPage</span>(<span class="keyword">new</span> <span class="title class_">PDRectangle</span>(image.getWidth(), image.getHeight()));</span><br><span class="line">            <span class="keyword">try</span> (<span class="type">PDPageContentStream</span> <span class="variable">contentStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PDPageContentStream</span>(pdf, page)) &#123;</span><br><span class="line">                contentStream.drawImage(imageObject, <span class="number">0</span>, <span class="number">0</span>, image.getWidth(), image.getHeight());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> page;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Error processing image data&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 将TIF以及TIFF文件转换成图片</span></span><br><span class="line"><span class="comment">* 适配多页</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> List&lt;<span class="type">byte</span>[]&gt; tiffToImage(<span class="type">byte</span>[] tiffData) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        List&lt;<span class="type">byte</span>[]&gt; imageFiles = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">ImageInputStream</span> <span class="variable">is</span> <span class="operator">=</span> ImageIO.createImageInputStream(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(tiffData))) &#123;</span><br><span class="line">            Iterator&lt;ImageReader&gt; it = ImageIO.getImageReaders(is);</span><br><span class="line">            <span class="keyword">if</span> (it.hasNext()) &#123;</span><br><span class="line">                <span class="type">ImageReader</span> <span class="variable">reader</span> <span class="operator">=</span> it.next();</span><br><span class="line">                reader.setInput(is);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; reader.getNumImages(<span class="literal">true</span>); i++) &#123;</span><br><span class="line">                    <span class="type">BufferedImage</span> <span class="variable">image</span> <span class="operator">=</span> reader.read(i);</span><br><span class="line">                    <span class="keyword">try</span> (<span class="type">ByteArrayOutputStream</span> <span class="variable">imageStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>()) &#123;</span><br><span class="line">                        ImageIO.write(image, <span class="string">&quot;png&quot;</span>, imageStream);</span><br><span class="line">                        imageFiles.add(imageStream.toByteArray());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> imageFiles;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* PDF转图片</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;<span class="type">byte</span>[]&gt; pdfToImagePlus(InputStream inputStream) &#123;</span><br><span class="line">        List&lt;<span class="type">byte</span>[]&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">PDDocument</span> <span class="variable">document</span> <span class="operator">=</span> PDDocument.load(inputStream);</span><br><span class="line">            <span class="type">PDFRenderer</span> <span class="variable">renderer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PDFRenderer</span>(document);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; document.getNumberOfPages(); i++) &#123;</span><br><span class="line">                <span class="type">BufferedImage</span> <span class="variable">bufferedImage</span> <span class="operator">=</span> renderer.renderImageWithDPI(i, DEFAULT_DPI);</span><br><span class="line">                <span class="type">ByteArrayOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">                <span class="type">ImageOutputStream</span> <span class="variable">imageOut</span> <span class="operator">=</span> ImageIO.createImageOutputStream(out);</span><br><span class="line">                ImageIO.write(bufferedImage, DEFAULT_FORMAT, imageOut);</span><br><span class="line">                result.add(out.toByteArray());</span><br><span class="line">                out.close();</span><br><span class="line">                imageOut.close();</span><br><span class="line">                inputStream.close();</span><br><span class="line">            &#125;</span><br><span class="line">            document.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="pom-xml-依赖项">pom.xml(依赖项)</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.twelvemonkeys.imageio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>imageio-tiff<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.pdfbox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pdfbox<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.pdfbox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pdfbox-tools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tika<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tika-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itextpdf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>itext7-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>7.1.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--解决PDF转图片的时候jpeg2000问题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.jai-imageio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jai-imageio-jpeg2000<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.ofdrw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ofdrw<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.ofdrw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ofdrw-reader<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.ofdrw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ofdrw-converter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 各种类型文件操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K、各种格式文件拼接为PDF</title>
      <link href="/posts/30ce191e.html"/>
      <url>/posts/30ce191e.html</url>
      
        <content type="html"><![CDATA[<h2 id="所需数据">所需数据</h2><ol><li>首先需要将所有需要合并的文件转换成字节流也就是byte[] 然后把，每个数据都放到一个list</li></ol><h3 id="文件路径转换成byte">文件路径转换成byte[]</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> List&lt;String&gt; collect = <span class="comment">//你的文件路径集合</span></span><br><span class="line">logger.info(<span class="string">&quot;开始转换pdf&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">totalUrls</span> <span class="operator">=</span> collect.size();</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">batchSize</span> <span class="operator">=</span> <span class="number">20</span>; <span class="comment">// 每批文件数量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">totalBatches</span> <span class="operator">=</span> (<span class="type">int</span>) Math.ceil((<span class="type">double</span>) totalUrls / batchSize); <span class="comment">// 共多少批任务</span></span><br><span class="line"><span class="keyword">if</span> (totalBatches &lt;=<span class="number">0</span> ) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> <span class="comment">//你的自定义线程池</span></span><br><span class="line"></span><br><span class="line">List&lt;CompletableFuture&lt;<span class="type">byte</span>[]&gt;&gt; futures = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; totalBatches; i++) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">fromIndex</span> <span class="operator">=</span> i * batchSize;</span><br><span class="line">    <span class="type">int</span> <span class="variable">toIndex</span> <span class="operator">=</span> Math.min((i + <span class="number">1</span>) * batchSize, totalUrls);</span><br><span class="line">    List&lt;String&gt; batchUrls = collect.subList(fromIndex, toIndex);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (String url : batchUrls) &#123;</span><br><span class="line">        CompletableFuture&lt;<span class="type">byte</span>[]&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            logger.info(<span class="string">&quot;开始合并数据路径为:&#123;&#125;&quot;</span>, url);</span><br><span class="line"></span><br><span class="line">            <span class="type">File</span> <span class="variable">imageFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(url);</span><br><span class="line">            <span class="keyword">if</span> (imageFile.exists() &amp;&amp; imageFile.isFile()) &#123;</span><br><span class="line">                <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(imageFile)) &#123;</span><br><span class="line">                    <span class="type">byte</span>[] fileData = IOUtils.toByteArray(fileInputStream);</span><br><span class="line">                    logger.info(<span class="string">&quot;文件大小为:&#123;&#125;&quot;</span>, fileData.length);</span><br><span class="line">                    <span class="keyword">return</span> fileData;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*if ((extName != null &amp;&amp; (extName.toLowerCase().contains(&quot;png&quot;)</span></span><br><span class="line"><span class="comment">                            || extName.toLowerCase().contains(&quot;jpg&quot;) || extName.toLowerCase().contains(&quot;jpeg&quot;)))) &#123;</span></span><br><span class="line"><span class="comment">                        try &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                            final byte[] bytes = PicUtil.compressPictureForScale(url, 1024, 0.9);</span></span><br><span class="line"><span class="comment">                            logger.info(&quot;文件大小为:&#123;&#125;&quot;, bytes.length);</span></span><br><span class="line"><span class="comment">                            return bytes;</span></span><br><span class="line"><span class="comment">                        &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">                            throw new RuntimeException(e);</span></span><br><span class="line"><span class="comment">                        &#125;</span></span><br><span class="line"><span class="comment">                    &#125;*/</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;, executorService);</span><br><span class="line"></span><br><span class="line">        futures.add(future);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List&lt;<span class="type">byte</span>[]&gt; imageFiles = futures.stream()</span><br><span class="line">.map(CompletableFuture::join)</span><br><span class="line">.collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">executorService.shutdown();</span><br></pre></td></tr></table></figure><blockquote><p>上图中进行注释的地方是进行大图片压缩的，本文中所有涉及到的工具类都会在另一篇文章中附上源码</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 各种类型文件操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前置处理操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Idea推送Github仓库超时问题</title>
      <link href="/posts/440070d0.html"/>
      <url>/posts/440070d0.html</url>
      
        <content type="html"><![CDATA[<div class="tip error"><h2 id="Idea推送Github仓库-emp-超时-emp-问题">Idea推送Github仓库<emp>超时</emp>问题</h2></div><blockquote><p>有时候在本地推送Github的仓库的时候经常Time OUT 并且你挂了梯子之后还是会超时，这个时候只需要配置一下终端代理就行</p></blockquote><div class="tip key"><p>寻找终端代理的</p></div><h2 id=""></h2><ol><li>找到梯子的终端代理端口号然后替换掉下边指令的</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export https_proxy=http://127.0.0.1:33210 http_proxy=http://127.0.0.1:33210 all_proxy=socks5://127.0.0.1:33211</span><br></pre></td></tr></table></figure><ol start="2"><li>或者找到您对应的梯子的可视化界面复制终端代理的代码</li></ol><div class="tip cogs"><h2 id="配置终端代理">配置终端代理</h2></div><blockquote><p>打开git bash 输入终端代理的代码<br>最后打开Idea重新推送代码就可以了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ如何保证消息不丢失？</title>
      <link href="/posts/3bd74647.html"/>
      <url>/posts/3bd74647.html</url>
      
        <content type="html"><![CDATA[<div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='0.5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>RabbitMQ如何保证消息不丢失？</p></div></div><div class="tip cogs"><p>1、生产者需要做的</p></div><blockquote><p>生产者重写 RabbitTemplate.ConfirmCallback的 confirm方法以及 returnedMessage 方法。<br>将 ack==false 的消息 持久化到数据库,定时扫描 DB 中投递失败的数据，重新投递到MQ中；</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者 确认消息的配置</span></span><br><span class="line"><span class="comment"> * 此函数为回调函数,用于通知producer消息是否投递成功</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> correlationData 消息唯一ID</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ack             确认消息是否被MQ 接收,true是已被接收,false反之</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cause</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">confirm</span><span class="params">(CorrelationData correlationData, <span class="type">boolean</span> ack, String cause)</span> &#123;</span><br><span class="line">   <span class="comment">//投递成功</span></span><br><span class="line">   <span class="keyword">if</span> (ack) &#123;</span><br><span class="line">      <span class="comment">//不做处理，等待消费成功</span></span><br><span class="line">      log.info(correlationData.getId() + <span class="string">&quot;：发送成功&quot;</span>);</span><br><span class="line">      <span class="comment">//删除redis里面备份的数据</span></span><br><span class="line">      redisTemplate.delete(correlationData.getId());</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//投递失败 //测试该逻辑时候 把上边的if(ack) 改成if(!ack)即可</span></span><br><span class="line">      <span class="comment">//持久化到数据库 (TODO 注意: 有时候 (严格保证消息投递成功的场景下) 可能需要增加定时任务，</span></span><br><span class="line">      <span class="comment">//TODO 定时扫描 redis或者DB (这里我们把投递失败的保存到了DB 所以定时任务扫描DB就可以了) 中投递失败的数据，重新投递到MQ中,这也是保证消息投递成功的一个手段)</span></span><br><span class="line">      <span class="comment">//TODO (但是 :  如果是需要顺序消费的话，这种重新投递的策略就显得不那么合适了，我想的是某几个顺序消息拥有同一个会话ID 。。。具体的实现我将在后续研究一下,这里先不考虑顺序消费的场景)</span></span><br><span class="line">      log.error(correlationData.getId() + <span class="string">&quot;：发送失败&quot;</span>);</span><br><span class="line">      log.info(<span class="string">&quot;备份到DB的内容：&quot;</span> + redisTemplate.opsForValue().get(correlationData.getId()));</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="type">SaveNackMessage</span> <span class="variable">strategy</span> <span class="operator">=</span> SaveNackMessage.getStrategy(SaveNackMessage.NackTypeEnum.PRODUCER.getType());</span><br><span class="line">         HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">         map.put(<span class="string">&quot;cause&quot;</span>, StringUtils.isNoneBlank(cause) ? cause : StringUtils.EMPTY);</span><br><span class="line">         map.put(<span class="string">&quot;ack&quot;</span>, ack ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">         map.put(<span class="string">&quot;correlationData&quot;</span>, Objects.nonNull(correlationData) ? correlationData : StringUtils.EMPTY);</span><br><span class="line">         saveNackMessageThread.execute(strategy.template(map));</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         <span class="comment">//TODO 发布event事件 监听方发送钉钉消息提醒开发者</span></span><br><span class="line">         log.error(<span class="string">&quot;记录mq发送端错误日志失败&quot;</span>, e);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>另外除了实现confirm方法，还需要实现returnedMessage方法 即(投递消息后，交换机找不到具体的queue将会回调该方法 一般我们需要配置钉钉预警，告知开发者)<br>具体代码如下:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ApplicationEventPublisher publisher;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当投递消息后，交换机找不到具体的queue将会回调该方法 一般我们需要配置钉钉预警，告知开发者</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> replyCode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> replyText</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> exchange</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> routingKey</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnedMessage</span><span class="params">(Message message, <span class="type">int</span> replyCode, String replyText, String exchange, String routingKey)</span> &#123;</span><br><span class="line">   log.error(<span class="string">&quot;returnedMessage 消息主体 message : &#123;&#125;&quot;</span>, message);</span><br><span class="line">   log.error(<span class="string">&quot;returnedMessage 描述：&#123;&#125;&quot;</span>, replyText);</span><br><span class="line">   log.error(<span class="string">&quot;returnedMessage 消息使用的交换器 exchange : &#123;&#125;&quot;</span>, exchange);</span><br><span class="line">   log.error(<span class="string">&quot;returnedMessage 消息使用的路由键 routing : &#123;&#125;&quot;</span>, routingKey);</span><br><span class="line"></span><br><span class="line">   HashMap&lt;String, Object&gt; maps = Maps.newHashMap();</span><br><span class="line">   maps.put(<span class="string">&quot;message&quot;</span>, message);</span><br><span class="line">   maps.put(<span class="string">&quot;replyCode&quot;</span>, replyCode);</span><br><span class="line">   maps.put(<span class="string">&quot;replyText&quot;</span>, replyText);</span><br><span class="line">   maps.put(<span class="string">&quot;exchange&quot;</span>, exchange);</span><br><span class="line">   maps.put(<span class="string">&quot;routingKey&quot;</span>, routingKey);</span><br><span class="line">   <span class="type">String</span> <span class="variable">returnedMessage</span> <span class="operator">=</span> JSON.toJSONString(maps);</span><br><span class="line"></span><br><span class="line">   <span class="type">SendFailNoticeEvent</span> <span class="variable">noticeEvent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SendFailNoticeEvent</span>();</span><br><span class="line">   noticeEvent.setLevel(<span class="number">1</span>);</span><br><span class="line">   noticeEvent.setErrorMsg(</span><br><span class="line">         System.lineSeparator() +</span><br><span class="line">               <span class="string">&quot;producer投递消息失败；报错信息: &quot;</span> + returnedMessage);</span><br><span class="line">   noticeEvent.setTalkTypeEnum(DingTalkTypeEnum.BIZ_NOTICE);</span><br><span class="line">   <span class="comment">//发送消息投递失败事件，监听器方将信息发送至钉钉机器人群里或者是某个具体的人。</span></span><br><span class="line">   publisher.publishEvent(noticeEvent);      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip cogs"><p>2、(MQ需要做的) 开启持久化参数</p></div><blockquote><p>durable=true</p></blockquote><div class="tip cogs"><p>3、消费者需要做的</p></div><blockquote><p>(消费者) 需要做的 手动ack,保证业务执行完后再ack,通知mq将某条消息删除</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.rabbitmq.listener.simple.acknowledge-mode</span>=<span class="string">manual</span></span><br></pre></td></tr></table></figure><p>我的博客即将同步至腾讯云开发者社区，邀请大家一同入驻：<a href="https://cloud.tencent.com/developer/support-plan?invite_code=ocj4bhqfct36">https://cloud.tencent.com/developer/support-plan?invite_code=ocj4bhqfct36</a></p>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 真实项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ如何保证消息幂等？</title>
      <link href="/posts/20032586.html"/>
      <url>/posts/20032586.html</url>
      
        <content type="html"><![CDATA[<div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='0.5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><h1>RabbitMQ如何保证消息幂等？</h1></div></div><div class="tip cogs"><h2 id="1、生产端做消息幂等-即不重复投递">1、生产端做消息幂等 (即不重复投递)</h2></div><blockquote><p>在生产端的话，其实消费端做好幂等，生产端就算投递多次，也无所谓了。 如果实在想在生产者做幂等的话，可以参考消费端的思路，比如通过redis的 setnx (key可以设计成 producer:具体业务:具有唯一性的某几个或者某一个业务字段 作为key) ,添加防重表等等。但是我个人觉得没必要。把消费端做好幂等就可以了。</p></blockquote><div class="tip cogs"><h2 id="2、消费端做消息幂等-即不重复消费">2、消费端做消息幂等 (即不重复消费)</h2></div><div class="note purple no-icon flat"><h3 id="A、方案">A、方案</h3></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/** </span></span><br><span class="line"><span class="comment">  * 是否能消费，用于防止重复消费</span></span><br><span class="line"><span class="comment">  * false 代表未消费过 ，true代表消费过</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span>  content </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span>  queueName </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Boolean <span class="title function_">checkConsumedFlag</span><span class="params">(T content, String queueName)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">messageKey</span> <span class="operator">=</span> queueName + <span class="string">&quot;:&quot;</span> + content.getId();</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(redisTemplate.opsForValue().get(messageKey))) &#123;</span><br><span class="line">        <span class="comment">//从redis中没获取到value，说明未消费过该消息，返回true</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//获取到了value说明消费过，然后将该消息标记为已消费并直接响应ack，不进行下边的业务处理，防止消费n次(保证幂等)</span></span><br><span class="line">        redisTemplate.opsForValue().set(messageKey, <span class="string">&quot;lock&quot;</span>, <span class="number">60</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="comment">//事实上，set操作应该放在业务执行完后，确保真正消费成功后执行。这里偷个懒。写在业务执行前了。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note green no-icon flat"><h3 id="B、方案-防重表">B、方案(防重表)</h3></div><blockquote><p>并发高情况下可能会有<span class='p red'>IO瓶颈</span> (先读在写) 该方式需要在发送消息时候，指定一个业务上唯一的字段。<br>如 xzll:order:10001 (10001代表订单id) 然后，在消费端获取该字段，并插入到防重表中(插入代码写在哪？)<br>如果你<span class='p green'>声明了事务</span>，那么插入防重这段代码位置无需关注(因为出现异常肯定会回滚)，<br>如果<span class='p green'>没实现事务</span>，那么最好在执行完业务逻辑后，再插入防重表，保证防重表中的数据肯定是消费成功的。实现步骤:<br>接收到消息后，<span class='p yellow'>select count(0) from 防重表 where biz_unique_id=message.getBizUniqueId();</span><br>如果大于0，那么说明以及消费过，将直接ack，告知mq删除该消息。如果=0说明没消费过。进行正常的业务逻辑。</p></blockquote><div class="note red no-icon flat"><h3 id="C、方案-唯一键-真正保证了幂等">C、方案(唯一键 : 真正保证了幂等)</h3></div><blockquote><p>直接写) 如果消费端业务是新增操作，我们可以为某几个或者某一个字段<span class='p cyan'>设置业务上的唯一键约束</span>，<br>如果重复消费将会插入两条相同的记录，数据库会<span class='p red'>报错</span>从而可以保证数据不会插入两条。</p></blockquote><div class="note orange no-icon flat"><h3 id="D、方案-乐观锁">D、方案(乐观锁)</h3></div><blockquote><p>并发高下也可能会产生<span class='p red'>IO瓶颈</span> (先读再写) 如果消费端业务是更新操作（例如扣减库存），<br>可以给<span class='p green'>业务表</span>加一个 <span class='p green'>version 字段</span>，每次更新把 <span class='p green'>version</span> 作为条件，更新之后 <span class='p green'>version + 1</span>。<br>由于 <span class='p cyan'>MySQL的innoDB</span>是<span class='p cyan'>行锁</span>，当其中一个请求成功更新之后，另一个请求才能进来(注意此时该请求拿到的<span class='p gray'>version</span>还是1)，<br>由于版本号<span class='p blue'>version</span>已经变成 2，所以<span class='p blue'>更新操作</span>不会执行，从而<span class='p blue'>保证幂等</span>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 真实项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ消费者ack超时问题</title>
      <link href="/posts/e5894e20.html"/>
      <url>/posts/e5894e20.html</url>
      
        <content type="html"><![CDATA[<div class="tip error"><h3 id="报错信息">报错信息</h3></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Shutdown Signal: channel error; protocol method: <span class="comment">#method&lt;channel.close&gt;(reply-code=40, reply-text-PRECONDITION FAILED </span></span><br><span class="line">- deliveryacknowledoement on channel 2 timed out, Timeout value used: 1800000 ms, This <span class="built_in">timeout</span> yalue can be confaured. se consumers doc ouide to learmore. </span><br><span class="line">class-id=0.method-id=0)</span><br></pre></td></tr></table></figure><div class="tip success"><h3 id="解决方法">解决方法</h3></div><blockquote><p>rabbitmq默认客户端超时时间是30分钟，手动ACK情况下会如果业务事件较长会超时，可以采用下面修改方式：</p></blockquote><h4 id="swig￼7"><span class='p blue'>第一种：需要重启MQ</span></h4><blockquote><p>在etc目录下建一个文件，/etc/rabbitmq.conf，rabbitmq默认不会建这个文件，然后文件里面设置consumer_timeout = 360000（根据需要来决定）。然后重新启动rabbitmq。</p></blockquote><h4 id="swig￼8"><span class='p blue'>第二种：无需重启，动态修改：</span></h4><blockquote><p>修改前，在MQ服务器上执行：<span class='p cyan'>rabbitmqctl eval application:get_env(rabbit</span> 来查看当前时间是多少，然后：</p></blockquote><h5 id="swig￼10"><span class='p green'>如果你是在docker容器中</span></h5><p>要在Docker容器中运行<code>rabbitmqctl</code>命令，你需要先进入到运行RabbitMQ的Docker容器内。下面是一些步骤说明如何执行这个任务：</p><ol><li>查找容器ID或名称:<br />首先，你需要找到运行RabbitMQ的Docker容器的ID或名称。你可以通过运行以下命令来做到这一点：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% span yellow, docker ps %&#125;</span><br></pre></td></tr></table></figure><p>这会列出所有正在运行的容器，包括它们的ID和名称。</p><ol start="2"><li>进入容器:<br />现在，你可以使用<code>docker exec</code>命令进入容器。替换<code>&lt;container_id_or_name&gt;</code>**为你在上一步找到的容器ID或名称：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% span cyan, docker <span class="built_in">exec</span> -it &lt;container_id_or_name&gt; /bin/bash %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这将打开一个bash shell，让你能够在容器内运行命令。</p></blockquote><ol start="3"><li>运行<code>rabbitmqctl</code>命令:<br />现在你可以运行<code>rabbitmqctl</code>命令来更新RabbitMQ的配置：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% span cyan, rabbitmqctl <span class="built_in">eval</span> <span class="string">&#x27;application:set_env(rabbit, consumer_timeout, 3600000).&#x27;</span> %&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>修改后，再执行验证。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% span cyan, rabbitmqctl <span class="built_in">eval</span> <span class="string">&#x27;application:get_env(rabbit,consumer_timeout).&#x27;</span> %&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><span class='p red'>退出容器:</span></li></ol><blockquote><p>完成后，你可以通过输入exit命令退出容器的bash shell。<br />请注意，更改RabbitMQ的配置可能需要RabbitMQ服务重启才能生效。在生产环境中执行此类操作时应当谨慎，并确保你已经备份了所有重要的数据和配置。**<br />此外，为了持久化这些配置更改，你可能需要考虑更新RabbitMQ的配置文件，并重新创建和启动容器。这样，即使容器被重新启动，配置更改也会保留。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 真实项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ消费者ack超时问题</title>
      <link href="/posts/e5894e26.html"/>
      <url>/posts/e5894e26.html</url>
      
        <content type="html"><![CDATA[<h2 id="消息手动ack-手动重试">消息手动ack + 手动重试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息最大重试次数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_RETRIES</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 重试间隔(秒)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">RETRY_INTERVAL</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ObjectMapper</span> <span class="variable">OBJECT_MAPPER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">    </span><br><span class="line"><span class="meta">@RabbitListener(queues = RabbitMqConfig.USER_ADD_QUEUE, concurrency = &quot;10&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">userAddReceiver</span><span class="params">(String data, Message message, Channel channel)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">    <span class="type">UserVo</span> <span class="variable">vo</span> <span class="operator">=</span> OBJECT_MAPPER.readValue(data, UserVo.class);</span><br><span class="line">    <span class="comment">// 重试次数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">retryCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 消费失败并且重试次数&lt;=重试上限次数</span></span><br><span class="line">    <span class="keyword">while</span> (!success &amp;&amp; retryCount &lt; MAX_RETRIES) &#123;</span><br><span class="line">        retryCount++;</span><br><span class="line">        <span class="comment">// 具体业务逻辑</span></span><br><span class="line">        success = messageHandle(vo);</span><br><span class="line">        <span class="comment">// 如果失败则重试</span></span><br><span class="line">        <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">errorTip</span> <span class="operator">=</span> <span class="string">&quot;第&quot;</span> + retryCount + <span class="string">&quot;次消费失败&quot;</span> +</span><br><span class="line">                    ((retryCount &lt; <span class="number">3</span>) ? <span class="string">&quot;,&quot;</span> + RETRY_INTERVAL + <span class="string">&quot;s后重试&quot;</span> : <span class="string">&quot;,进入死信队列&quot;</span>);</span><br><span class="line">            log.error(errorTip);</span><br><span class="line">            Thread.sleep(RETRY_INTERVAL * <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (success) &#123;</span><br><span class="line">        <span class="comment">// 消费成功，确认</span></span><br><span class="line">        channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="literal">false</span>);</span><br><span class="line">        log.info(<span class="string">&quot;创建订单数据消费成功&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 重试多次之后仍失败，发送到死信队列</span></span><br><span class="line">        channel.basicNack(message.getMessageProperties().getDeliveryTag(), <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">        log.info(<span class="string">&quot;创建订单数据消费失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 真实项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vavr(颠覆你对Java的认知)</title>
      <link href="/posts/9940a3e5.html"/>
      <url>/posts/9940a3e5.html</url>
      
        <content type="html"><![CDATA[<h1>Vavr(颠覆你对Java的认知)</h1><h3 id="什么是Vavr">什么是Vavr</h3><p>Vavr core是一个Java函数库。它有助于减少代码量并提高健壮性。函数式编程的第一步是开始思考不可变的值。Vavr 提供不可变的集合以及必要的函数和控制结构来操作这些值。</p><h2 id="引入依赖">引入依赖</h2><h3 id="maven">maven</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.vavr<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>vavr<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="gradle">gradle</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">&quot;io.vavr:vavr:0.10.4&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="gradle-7">gradle 7+</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&quot;io.vavr:vavr:0.10.4&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1、Tuples-元组">1、Tuples(元组)</h2><h3 id="1-1-什么是元组">1.1 什么是元组</h3><p>Java缺少元组的一般概念。元组将固定数量的元素组合在一起，以便它们可以作为一个整体传递。与数组或列表不同，元组可以保存不同类型的对象，但它们也是不可变的。<br>元组的类型为 Tuple1、Tuple2、Tuple3 等。目前有 8 个元素的上限。要访问元组的元素，可以使用方法访问第一个元素，访问第二个元素，依此类推。tt._1t._2</p><h3 id="1-2-创建元组">1.2 创建元组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Tuple2&lt;Integer, String&gt; eliauk = Tuple.of(<span class="number">1</span>, <span class="string">&quot;Eli auk&quot;</span>);</span><br><span class="line">Assert.equals(eliauk._1, <span class="number">1</span>);</span><br><span class="line">Assert.equals(eliauk._2, <span class="string">&quot;Eli auk&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>通过Tuple.of()静态工厂方法创建元组，元组的类型为Tuple2，元组的元素类型为Integer和String，元组的元素个数为2，元组的元素下标从1开始。</p></blockquote><h3 id="1-3-逐个映射元组组件">1.3 逐个映射元组组件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Tuple2&lt;Integer, String&gt; map = eliauk.map(</span><br><span class="line">        a -&gt; a + <span class="number">1</span>,</span><br><span class="line">        b -&gt; b + <span class="string">&quot;1&quot;</span></span><br><span class="line">        );</span><br><span class="line">Assert.equals(map._1, <span class="number">2</span>);</span><br><span class="line">Assert.equals(map._2, <span class="string">&quot;Eli auk1&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>通过map()方法逐个映射元组组件，map()方法的参数为一个函数，函数的参数为元组的元素，函数的返回值为一个新的元组。</p></blockquote><h3 id="1-4-使用一个映射函数映射元组组件">1.4 使用一个映射函数映射元组组件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Tuple2&lt;Integer, String&gt; eliauk = Tuple.of(<span class="number">1</span>, <span class="string">&quot;Eli auk&quot;</span>);</span><br><span class="line"><span class="keyword">final</span> Tuple2&lt;Integer, String&gt; map = eliauk.map((a, b) -&gt; Tuple.of(a + <span class="number">1</span>, b + <span class="string">&quot;1&quot;</span>));</span><br><span class="line">Assert.equals(map._1, <span class="number">2</span>);</span><br><span class="line">Assert.equals(map._2, <span class="string">&quot;Eli auk1&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>通过map()方法使用一个映射函数映射元组组件，map()方法的参数为一个函数，函数的参数为元组的元素，函数的返回值为一个新的元组。</p></blockquote><h3 id="1-5-变换元组">1.5 变换元组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">apply</span> <span class="operator">=</span> eliauk.apply((a, b) -&gt; b.substring(<span class="number">2</span>) + a);</span><br><span class="line">Assert.equals(apply, <span class="string">&quot;i auk1&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>通过apply()方法变换元组，apply()方法的参数为一个函数，函数的参数为元组的元素，函数的返回值为一个新的元组。</p></blockquote><h2 id="2、Function-函数">2、Function(函数)</h2><h3 id="2-1-什么是函数">2.1 什么是函数</h3><p>函数式编程是关于使用函数进行值和值转换的。Java 8 只提供了一个接受一个参数和一个接受两个参数的参数。Vavr 提供的功能最多为 8 个参数。功能接口被调用等。</p><h3 id="2-2-创建函数">2.2 创建函数</h3><h4 id="2-2-1-匿名类创建">2.2.1 匿名类创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Function2&lt;Integer, Integer, Integer&gt; sum = <span class="keyword">new</span> <span class="title class_">Function2</span>&lt;Integer, Integer, Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">apply</span><span class="params">(Integer a, Integer b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>通过匿名类创建函数，匿名类的参数为函数的参数，匿名类的返回值为函数的返回值。</p></blockquote><h4 id="2-2-2-lambda表达式创建">2.2.2 lambda表达式创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Function2&lt;Integer, Integer, Integer&gt; sum = (a, b) -&gt; a + b;</span><br></pre></td></tr></table></figure><h4 id="2-2-3-静态工厂创建">2.2.3 静态工厂创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Function1&lt;Integer, Integer&gt; function1 = Function1.of(a -&gt; a + <span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="2-3-Composition-组合操作">2.3 Composition(组合操作)</h3><h4 id="2-3-1-andThen">2.3.1 andThen</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Function1&lt;Integer, Integer&gt; plusOne = a -&gt; a + <span class="number">1</span>;</span><br><span class="line">Function1&lt;Integer, Integer&gt; multiply = a -&gt; a*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">final</span> Function1&lt;Integer, Integer&gt; add1AndMultiplyBy2 = plusOne.andThen(multiply);</span><br><span class="line">Assert.equals(add1AndMultiplyBy2.apply(<span class="number">2</span>),<span class="number">6</span>);</span><br></pre></td></tr></table></figure><blockquote><p>通过andThen()方法组合函数，andThen()方法的参数为一个函数，函数的参数为当前函数的返回值，函数的返回值为一个新的函数。</p></blockquote><h4 id="2-3-2-compose">2.3.2 compose</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Function1&lt;Integer, Integer&gt; plusOne = a -&gt; a + <span class="number">1</span>;</span><br><span class="line">Function1&lt;Integer, Integer&gt; multiply = a -&gt; a*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">final</span> Function1&lt;Integer, Integer&gt; add1AndMultiplyBy2 = plusOne.compose(multiply);</span><br><span class="line">Assert.equals(add1AndMultiplyBy2.apply(<span class="number">2</span>),<span class="number">5</span>);</span><br></pre></td></tr></table></figure><blockquote><p>通过compose()方法组合函数，compose()方法的参数为一个函数，函数的参数为当前函数的参数，函数的返回值为一个新的函数。</p></blockquote><blockquote><p>andThen()和compose()的区别在于参数的顺序不同，andThen()方法的参数为一个函数，函数的参数为当前函数的返回值，compose()方法的参数为一个函数，函数的参数为当前函数的参数。<br>上边说的解释可能太官方了，大概理解为andThen()方法是先执行当前函数，再执行参数函数，compose()方法是先执行参数函数，再执行当前函数。</p></blockquote><h3 id="2-4-Lifting-提升操作">2.4 Lifting(提升操作)</h3><p>您可以将部分函数提升为返回结果的总函数。术语偏函数来自数学。从 X 到 Y 的部分函数是函数 f：X′ → Y，对于 X 的某个子集 X′。它推广了函数 f：X → Y 的概念，不强制 f 将 X 的每个元素映射到 Y 的元素。这意味着部分函数仅对某些输入值正常工作。如果使用不允许的输入值调用函数，它通常会引发异常。</p><h4 id="2-4-1-lift">2.4.1 lift</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Function2&lt;Integer, Integer, Integer&gt; divide = (a, b) -&gt; a / b;</span><br><span class="line"><span class="keyword">final</span> Option&lt;Integer&gt; apply = Function2.lift(divide).apply(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">Assert.equals(apply.isEmpty(),<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><blockquote><p>通过lift()方法提升函数，lift()方法的参数为一个函数，函数的参数为当前函数的参数，函数的返回值为一个新的函数，新的函数的返回值为一个Option。</p></blockquote><h3 id="2-5-Partial-application-部分应用">2.5 Partial application(部分应用)</h3><p>部分应用程序允许您通过修复某些值从现有函数派生新函数。您可以修复一个或多个参数，固定参数的数量定义了新函数的 arity，例如 .参数从左到右绑定</p><h4 id="2-5-1-apply">2.5.1 apply</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Function2&lt;Integer, Integer, Integer&gt; sum = Integer::sum;</span><br><span class="line">Function1&lt;Integer, Integer&gt; add1 = sum.apply(<span class="number">1</span>);</span><br><span class="line">Function5&lt;Integer, Integer, Integer, Integer, Integer, Integer&gt; sum1 = (a, b, c, d, e) -&gt; a + b + c + d + e;</span><br><span class="line">Function2&lt;Integer, Integer, Integer&gt; add6 = sum1.apply(<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">final</span> Function2&lt;Integer, Integer, Integer&gt; memoized = add6.memoized();</span><br><span class="line">Assert.equals(add1.apply(<span class="number">2</span>),<span class="number">3</span>);</span><br><span class="line">Assert.equals(add6.apply(<span class="number">4</span>).apply(<span class="number">5</span>),<span class="number">15</span>);</span><br></pre></td></tr></table></figure><blockquote><p>通过apply()方法部分应用函数，可以先传一个参数再传一个在传一个从左到右一次绑定</p></blockquote><h4 id="2-5-2-curried">2.5.2 curried</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Function2&lt;Integer, Integer, Integer&gt; sum = Integer::sum;</span><br><span class="line"><span class="keyword">final</span> Function1&lt;Integer, Integer&gt; add1 = sum.curried().apply(<span class="number">1</span>);</span><br><span class="line">Function5&lt;Integer, Integer, Integer, Integer, Integer, Integer&gt; sum1 = (a, b, c, d, e) -&gt; a + b + c + d + e;</span><br><span class="line"><span class="keyword">final</span> Function1&lt;Integer, Function1&lt;Integer, Function1&lt;Integer, Function1&lt;Integer, Integer&gt;&gt;&gt;&gt; apply = sum1.curried().apply(<span class="number">1</span>);</span><br><span class="line">Assert.equals(add1.apply(<span class="number">2</span>),<span class="number">3</span>);</span><br><span class="line">Assert.equals(apply.apply(<span class="number">2</span>).apply(<span class="number">3</span>).apply(<span class="number">4</span>).apply(<span class="number">5</span>),<span class="number">15</span>);</span><br></pre></td></tr></table></figure><blockquote><p>区别</p><ol><li>语法: 偏函数通常通过 .apply() 来指定一些参数，而柯里化则使用 .curried().apply()。</li><li>返回类型: 偏函数直接返回一个新的函数，这个新的函数期待剩余的参数。柯里化返回一个新的单参数函数，这个函数会返回另一个单参数函数，依此类推。</li><li>灵活性: 偏函数更灵活，因为你可以一次性指定多个参数。柯里化则严格地每次只能应用一个参数。</li><li>用途: 偏函数通常用于指定一些固定的参数来创建新的函数。柯里化则更多地用于函数组合和链式调用。</li></ol></blockquote><h3 id="2-6-Memoization-记忆化">2.6 Memoization(记忆化)</h3><p>记忆是缓存的一种形式。记忆函数仅执行一次，然后从缓存返回结果。<br>下面的示例在第一次调用时计算一个随机数，并在第二次调用时返回缓存的数字。</p><h4 id="2-6-1-memoized">2.6.1 memoized</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Function0&lt;Integer&gt; randomGenerator = getRandomGenerator();</span><br><span class="line"><span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">apply</span> <span class="operator">=</span> randomGenerator.apply();</span><br><span class="line"><span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">apply1</span> <span class="operator">=</span> randomGenerator.apply();</span><br><span class="line">Assert.equals(apply,apply1);</span><br></pre></td></tr></table></figure><blockquote><p>肯定大多数人不太理解这个memoized和普通变量声明有什么区别，其实这个memoized是一个函数，这个函数的返回值是一个随机数，但是这个函数只会执行一次，第二次调用的时候会直接返回第一次调用的结果，这就是memoized的作用。<br>普通变量声明</p></blockquote><h5 id="memoized与普通变量的区别与使用场景">memoized与普通变量的区别与使用场景</h5><ol><li><p><strong>配置设置</strong>: 当你有一个固定的值（如配置信息）需要在整个应用程序中使用时。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">API_KEY</span> <span class="operator">=</span> <span class="string">&quot;your-api-key-here&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>配置设置</strong>: 当你有一个固定的值（如配置信息）需要在整个应用程序中使用时。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">API_KEY</span> <span class="operator">=</span> <span class="string">&quot;your-api-key-here&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>单次计算</strong>: 当你只需要进行一次计算并存储结果时。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">squareRootOfTwo</span> <span class="operator">=</span> Math.sqrt(<span class="number">2</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>状态存储</strong>: 当你需要在应用程序的生命周期内维护某种状态时。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>临时变量</strong>: 在循环或条件语句中作为临时存储。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">square</span> <span class="operator">=</span> i * i;</span><br><span class="line">    System.out.println(square);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h6 id="使用-Function0-和-memoized">使用 Function0 和 <code>.memoized()</code></h6><ol><li><p><strong>缓存计算密集型操作</strong>: 如果你有一个计算密集型的操作，多次调用它是不高效的，你可以使用 <code>.memoized()</code> 来缓存结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Function0&lt;Double&gt; expensiveCalculation = Function0.of(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// ... some expensive calculations</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;).memoized();</span><br></pre></td></tr></table></figure></li><li><p><strong>懒加载</strong>: 如果你有一个操作可能不会被立即需要，或者可能根本就不需要，使用 Function0 会更高效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Function0&lt;DatabaseConnection&gt; lazyDbConnection = Function0.of(() -&gt; connectToDatabase()).memoized();</span><br></pre></td></tr></table></figure></li><li><p><strong>函数组合</strong>: 当你需要将多个函数组合在一起进行复杂的操作时，使用 Function0 可以更容易地实现函数组合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Function0&lt;Integer&gt; combinedFunction = Function0.of(() -&gt; function1()).andThen(result -&gt; function2(result));</span><br></pre></td></tr></table></figure></li><li><p><strong>高阶函数</strong>: 当你需要将函数作为参数传递或从另一个函数返回函数时。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Function0&lt;Double&gt; <span class="title function_">getRandomGenerator</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Function0.of(Math::random).memoized();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>测试与模拟</strong>: 使用 Function0 可以更容易地在单元测试中模拟依赖。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Function0&lt;Long&gt; currentTimeProvider = Function0.of(System::currentTimeMillis).memoized();</span><br></pre></td></tr></table></figure></li></ol><h2 id="3、Value-值">3、Value(值)</h2><h3 id="3-1-Option-选项">3.1 Option(选项)</h3><p>用法可以参考<a href="http://stream-query.dromara.org/pages/53b6d6/">Stream-Query的Opp</a></p><h3 id="3-2-Try-尝试">3.2 Try(尝试)</h3><p>用法可以参考<a href="http://stream-query.dromara.org/pages/53b6d6/#oftry">Stream-Query的Opp中的ofTry</a></p><h3 id="3-3-Lazy-懒加载">3.3 Lazy(懒加载)</h3><p>惰性是表示惰性求值的 monadic 容器类型。与Supplier相比，Lazy 是记忆的，即它只评估一次，因此在引用上是透明的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Lazy&lt;Double&gt; lazy = Lazy.of(Math::random);</span><br><span class="line">lazy.isEvaluated(); <span class="comment">// = false</span></span><br><span class="line">lazy.get();         <span class="comment">// = 0.123 (random generated)</span></span><br><span class="line">lazy.isEvaluated(); <span class="comment">// = true</span></span><br><span class="line">lazy.get();</span><br><span class="line">Assert.equals(lazy.get(),lazy.get());</span><br><span class="line"><span class="keyword">final</span> Supplier&lt;Double&gt; doubleSupplier = Math::random;</span><br><span class="line">doubleSupplier.get();</span><br><span class="line">doubleSupplier.get();</span><br><span class="line">Assert.notEquals(doubleSupplier.get(),doubleSupplier.get());</span><br></pre></td></tr></table></figure><blockquote><p>通过Lazy.of()方法创建Lazy，Lazy.of()方法的参数为一个函数，函数的返回值为Lazy的值，Lazy的值只会计算一次，之后再调用get()方法都会返回第一次计算的值。</p></blockquote><h3 id="3-4-Either-左或右">3.4 Either(左或右)</h3><p>Either 表示一个值是左值还是右值。通常，左值用于错误，右值用于成功。默认情况下，Either 是一个不可变的类型，但是您可以使用 Either.left() 和 Either.right() 创建可变的 Either。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testEither</span><span class="params">()</span> &#123;</span><br><span class="line">        Either&lt;String, Integer&gt; value = compute().map(i -&gt; i * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (value.isRight()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Success: &quot;</span> + value.get());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Failure: &quot;</span> + value.getLeft());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Either&lt;String, Integer&gt; <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟一个条件，例如，随机数生成来决定是否成功</span></span><br><span class="line">        <span class="keyword">if</span> (RandomUtil.randomBoolean()) &#123;</span><br><span class="line">            <span class="comment">// 计算成功，返回一个“右”值</span></span><br><span class="line">            <span class="keyword">return</span> Either.right(<span class="number">42</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 计算失败，返回一个“左”值</span></span><br><span class="line">            <span class="keyword">return</span> Either.left(<span class="string">&quot;Computation failed&quot;</span>);  <span class="comment">// 这是一个示例错误消息</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个方法还是挺有意思的，大多数情况下成功设定为返回右边的值，失败返回左边的值，这样就可以通过isRight()方法判断是否成功，通过get()方法获取值，通过getLeft()方法获取错误信息。<br>还可以对返回成功的值进行一些列的操作也可以使用toEither()自定义失败的返回值</p></blockquote><h3 id="3-5-Validation-验证">3.5 Validation(验证)</h3><p>验证控件是一个应用函子，有助于累积错误。当尝试组合Monads时，组合过程将在第一次遇到错误时短路。但是“验证”将继续处理组合函数，累积所有错误。这在验证多个字段（例如 Web 表单）时特别有用，并且您希望知道遇到的所有错误，而不是一次一个错误。</p><h4 id="3-5-1-combine">3.5.1 combine</h4><h5 id="3-5-1-1-接下来我们验证一下，首先创建一个实体类Person">3.5.1.1 接下来我们验证一下，首先创建一个实体类Person</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> String name;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">        Person(String name, <span class="type">int</span> age) &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Person(&quot;</span> + name + <span class="string">&quot;, &quot;</span> + age + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="3-5-1-2-然后编写一个用于验证的方法">3.5.1.2 然后编写一个用于验证的方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Validation&lt;Seq&lt;String&gt;, Person&gt; <span class="title function_">validatePerson</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Validation.combine(validateName(name), validateAge(age)).ap(Person::<span class="keyword">new</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Validation&lt;String, String&gt; <span class="title function_">validateName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name == <span class="literal">null</span> || name.trim().isEmpty() ? Validation.invalid(<span class="string">&quot;Name cannot be empty&quot;</span>) : Validation.valid(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Validation&lt;String, Integer&gt; <span class="title function_">validateAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age &lt; <span class="number">0</span> || age &gt; <span class="number">150</span> ? Validation.invalid(<span class="string">&quot;Age must be between 0 and 150&quot;</span>) : Validation.valid(age);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="3-2-1-3-最后编写一个测试方法">3.2.1.3 最后编写一个测试方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Validation&lt;Seq&lt;String&gt;, Person&gt; validPerson = validatePerson(<span class="string">&quot;John&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        Assert.equals(validPerson.get().age,<span class="number">30</span>);</span><br><span class="line">        Assert.equals(validPerson.get().name,<span class="string">&quot;John&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Validation&lt;Seq&lt;String&gt;, Person&gt; invalidPerson = validatePerson(<span class="string">&quot; &quot;</span>, -<span class="number">1</span>);</span><br><span class="line">        Assert.equals(invalidPerson.getError().asJava(), List.of(<span class="string">&quot;Name cannot be empty&quot;</span>, <span class="string">&quot;Age must be between 0 and 150&quot;</span>).asJava());</span><br></pre></td></tr></table></figure><h2 id="4、Collection-集合">4、Collection(集合)</h2><p>为了设计一个全新的Java集合库，它满足了函数式编程的要求，即不变性，已经投入了很多精力。</p><p>Java的Stream将计算提升到不同的层，并在另一个显式步骤中链接到特定的集合。有了Vavr，我们不需要所有这些额外的样板。</p><h3 id="4-1-List-列表">4.1 List(列表)</h3><p>Vavr 是一个不可变的链表。突变会创建新的实例。大多数操作都是线性时间执行的。后续操作将逐个执行。</p><h4 id="4-1-1-创建列表">4.1.1 创建列表</h4><h5 id="4-1-1-1-Java8的使用">4.1.1.1 Java8的使用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Optional&lt;Integer&gt; reduce = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).reduce(Integer::sum);</span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> IntStream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).sum();</span><br></pre></td></tr></table></figure><h5 id="4-1-1-2-Vavr的使用">4.1.1.2 Vavr的使用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">Number</span> <span class="variable">sum1</span> <span class="operator">=</span> List.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).sum();</span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> sum1.intValue();</span><br><span class="line">Assert.equals(i,sum);</span><br></pre></td></tr></table></figure><h3 id="4-2-Stream-流">4.2 Stream(流)</h3><p>因为Vavr引入了元组的说明那么与JDK8的Stream相比，Vavr新增了好多便捷的方法以及新特性这里举一个例子</p><blockquote><p>将一个list转换为Map</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> java.util.Map&lt;Integer, Character&gt; collect = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).collect(Collectors.toMap(a -&gt; a, b -&gt; (<span class="type">char</span>) (b + <span class="number">64</span>)));</span><br><span class="line"><span class="keyword">final</span> Map&lt;Integer, Character&gt; map = List.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).toMap(a -&gt; a, b -&gt; (<span class="type">char</span>) (b + <span class="number">64</span>));</span><br><span class="line">Assert.equals(map.get(<span class="number">1</span>).get(), collect.get(<span class="number">1</span>));</span><br><span class="line"><span class="comment">// 上边是普通的转换为map的方法，下边是Vavr新加入了元组之后的转换为map的方法</span></span><br><span class="line"><span class="keyword">final</span> HashMap&lt;Integer, Character&gt; javaMap = List.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).toJavaMap(HashMap::<span class="keyword">new</span>, a -&gt; Tuple.of(a, (<span class="type">char</span>) (a + <span class="number">64</span>)));</span><br><span class="line">Assert.equals(javaMap.get(<span class="number">1</span>), <span class="string">&#x27;A&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="5、Property-Checking-属性检查">5、Property Checking(属性检查)</h2><p>这个特性需要引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.vavr<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>vavr-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Arbitrary&lt;Integer&gt; ints = Arbitrary.integer();</span><br><span class="line"></span><br><span class="line"><span class="comment">// square(int) &gt;= 0: OK, passed 1000 tests.</span></span><br><span class="line">Property.def(<span class="string">&quot;square(int) &gt;= 0&quot;</span>)</span><br><span class="line">        .forAll(ints)</span><br><span class="line">        .suchThat(i -&gt; i * i &gt;= <span class="number">0</span>)</span><br><span class="line">        .check()</span><br><span class="line">        .assertIsSatisfied();</span><br></pre></td></tr></table></figure><blockquote><p>通过Arbitrary.integer()方法创建一个随机数，然后通过Property.def()方法创建一个属性，然后通过forAll()方法传入随机数，然后通过suchThat()方法传入一个函数，函数的返回值为boolean，最后通过check()方法检查属性是否满足，最后通过assertIsSatisfied()方法断言属性是否满足。</p></blockquote><h2 id="6、Pattern-Matching-模式匹配">6、Pattern Matching(模式匹配)</h2><p>模式匹配是一种功能，它允许您根据值的类型和结构执行不同的操作。模式匹配是函数式编程的一个重要特性，因为它允许您编写更简洁，更可读的代码。</p><h3 id="6-1-基础匹配">6.1 基础匹配</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> Match(<span class="number">1</span>).of(</span><br><span class="line">        Case($(<span class="number">1</span>), <span class="string">&quot;one&quot;</span>),</span><br><span class="line">        Case($(<span class="number">2</span>), <span class="string">&quot;two&quot;</span>),</span><br><span class="line">        Case($(), <span class="string">&quot;?&quot;</span>)</span><br><span class="line">        );</span><br><span class="line">Assert.equals(s,<span class="string">&quot;one&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">opt</span> <span class="operator">=</span> Match(<span class="literal">null</span>).of(</span><br><span class="line">        Case($(<span class="number">1</span>), <span class="string">&quot;one&quot;</span>),</span><br><span class="line">        Case($(<span class="number">2</span>), <span class="string">&quot;two&quot;</span>),</span><br><span class="line">        Case($(), <span class="string">&quot;?&quot;</span>)</span><br><span class="line">        );</span><br><span class="line">Assert.equals(opt,<span class="string">&quot;?&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>单值匹配，通过Match()，如果值为null可以通过$()匹配，如果值不为null可以通过$(value)匹配</p></blockquote><h3 id="6-2-多条件匹配">6.2 多条件匹配</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">input</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> Match(input).of(</span><br><span class="line">        Case($(n -&gt; n &gt; <span class="number">0</span> &amp;&amp; n &lt; <span class="number">3</span>), <span class="string">&quot;Between 1 and 2&quot;</span>),</span><br><span class="line">        Case($(n -&gt; n &gt; <span class="number">3</span> &amp;&amp; n &lt; <span class="number">6</span>), <span class="string">&quot;Between 4 and 5&quot;</span>),</span><br><span class="line">        Case($(), <span class="string">&quot;Other&quot;</span>)</span><br><span class="line">);</span><br><span class="line">Assert.equals(output,<span class="string">&quot;Between 4 and 5&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="6-3-断言匹配">6.3 断言匹配</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> Match(<span class="number">2</span>).of(</span><br><span class="line">        Case($(a -&gt; a==<span class="number">1</span>), <span class="string">&quot;one&quot;</span>),</span><br><span class="line">        Case($(a-&gt; a==<span class="number">2</span>), <span class="string">&quot;two&quot;</span>),</span><br><span class="line">        Case($(), <span class="string">&quot;?&quot;</span>)</span><br><span class="line">);</span><br><span class="line">Assert.equals(s,<span class="string">&quot;two&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>断言也就是使用lambda表达式Predicate进行匹配</p></blockquote><blockquote><p>Vavr内部还提供了一些常用的断言，比如is(),isIn(),isNotNull(),isNull(),isOneOf(),isZero()等等<br>比如</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">opt</span> <span class="operator">=</span> Match(<span class="literal">null</span>).of(</span><br><span class="line">        Case($(is(<span class="number">1</span>)), <span class="string">&quot;one&quot;</span>),</span><br><span class="line">        Case($(is(<span class="number">2</span>)), <span class="string">&quot;two&quot;</span>),</span><br><span class="line">        Case($(), <span class="string">&quot;?&quot;</span>)</span><br><span class="line">);</span><br><span class="line">Assert.equals(opt,<span class="string">&quot;?&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Lambda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法糖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch和Kibana配置</title>
      <link href="/posts/e81b0353.html"/>
      <url>/posts/e81b0353.html</url>
      
        <content type="html"><![CDATA[<h2 id="ElasticSearch和Kibana配置">ElasticSearch和Kibana配置</h2><h3 id="1、docker-comppose">1、docker-comppose</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">elasticsearch:</span></span><br><span class="line">  <span class="attr">container_name:</span> <span class="string">gw-es</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">registry.cn-hangzhou.aliyuncs.com/zhengqing/elasticsearch:7.14.1</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./elasticsearch/logs/elasticsearch.log:/usr/share/elasticsearch/logs/elasticsearch.log</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./elasticsearch/data:/usr/share/elasticsearch/data</span> <span class="comment">#配置文件挂载</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./elasticsearch/plugins:/usr/share/elasticsearch/plugins</span> <span class="comment">#日志文件挂载</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;39200:9200&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;39300:9300&quot;</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">discovery.type=single-node</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ES_JAVA_OPTS=-Xms512m</span> <span class="string">-Xmx1024m</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ELASTIC_PASSWORD=</span> <span class="string">&quot;123456&quot;</span> <span class="comment"># elastic账号密码</span></span><br><span class="line">  <span class="attr">networks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">gw_net</span></span><br><span class="line">  <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">kibana:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">registry.cn-hangzhou.aliyuncs.com/zhengqing/kibana:7.14.1</span></span><br><span class="line">  <span class="attr">container_name:</span> <span class="string">gw-kibana</span></span><br><span class="line">  <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./elasticsearch/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;5601:5601&quot;</span></span><br><span class="line">  <span class="attr">depends_on:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">elasticsearch</span></span><br><span class="line">  <span class="attr">links:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">elasticsearch</span></span><br><span class="line">  <span class="attr">networks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">gw_net</span></span><br></pre></td></tr></table></figure><h3 id="2、配置文件">2、配置文件</h3><h4 id="2-1、kibana-yml">2.1、kibana.yml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.name:</span> <span class="string">kibana</span></span><br><span class="line"><span class="attr">server.host:</span> <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line"><span class="attr">elasticsearch.hosts:</span> [ <span class="string">&quot;http://elasticsearch:9200&quot;</span> ] <span class="comment"># http://www.zhengqingya.com:9200 TODO 修改为自己的ip</span></span><br><span class="line"><span class="attr">xpack.monitoring.ui.container.elasticsearch.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">elasticsearch.username:</span> <span class="string">&quot;elastic&quot;</span>  <span class="comment"># es账号</span></span><br><span class="line"><span class="attr">elasticsearch.password:</span> <span class="string">&quot;123456&quot;</span>   <span class="comment"># es密码</span></span><br><span class="line"><span class="attr">i18n.locale:</span> <span class="string">zh-CN</span> <span class="comment"># 中文</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-2、elasticsearch-yml">2.2、elasticsearch.yml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cluster.name:</span> <span class="string">&quot;docker-cluster&quot;</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9200</span></span><br><span class="line"><span class="comment"># 开启es跨域</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"><span class="attr">http.cors.allow-headers:</span> <span class="string">Authorization</span></span><br><span class="line"><span class="comment"># 开启安全控制</span></span><br><span class="line"><span class="attr">xpack.security.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">xpack.security.transport.ssl.enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="3、初始化密码">3、初始化密码</h2><h3 id="3、1-首先执行以下命令进如到ES容器中">3、1 首先执行以下命令进如到ES容器中</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it [容器ID/容器名] /bin/bash </span><br></pre></td></tr></table></figure><h3 id="3、2-执行以下命令初始化密码">3、2 执行以下命令初始化密码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/elasticsearch-setup-passwords interactive</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker-compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解析双层DDF</title>
      <link href="/posts/8dda91f7.html"/>
      <url>/posts/8dda91f7.html</url>
      
        <content type="html"><![CDATA[<p>需引入Maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.pdfbox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pdfbox<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.pdfbox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pdfbox-tools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;Integer, String&gt; <span class="title function_">PDFIdentification</span><span class="params">(InputStream inputStream)</span> &#123;</span><br><span class="line">        Map&lt;Integer, String&gt; textMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//读取PDF</span></span><br><span class="line">        <span class="type">PDDocument</span> <span class="variable">document</span> <span class="operator">=</span> PDDocument.load(inputStream);</span><br><span class="line">        <span class="comment">//按照页码读取文本</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; document.getNumberOfPages(); i++) &#123;</span><br><span class="line">            <span class="comment">//文本剥离器</span></span><br><span class="line">            <span class="type">PDFTextStripper</span> <span class="variable">stripper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PDFTextStripper</span>();</span><br><span class="line">            stripper.setStartPage(i + <span class="number">1</span>);</span><br><span class="line">            stripper.setEndPage(i + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">//按照位置排序</span></span><br><span class="line">            stripper.setSortByPosition(<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//获取文本</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> stripper.getText(document);</span><br><span class="line">            <span class="keyword">if</span> (StrUtil.isBlank(text)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            text = text.replace(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            textMap.put(i + <span class="number">1</span>, text);</span><br><span class="line">        &#125;</span><br><span class="line">        document.close();</span><br><span class="line">        <span class="keyword">return</span> textMap;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>解析完之后Map的Key是pdf的页数，Value是pdf的内容</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模板模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据最终一致性问题</title>
      <link href="/posts/3224ec7a.html"/>
      <url>/posts/3224ec7a.html</url>
      
        <content type="html"><![CDATA[<p>数据库和缓存Redis的一致性问题无论在面试还是平时使用的时候都是一个很常见且关键的问题这里我写一篇文章记录一下</p><h2 id="Cache-Aside">Cache-Aside</h2><p>旁路缓存模式，应用最为广泛的一种缓存策略。</p><h3 id="读请求">读请求</h3><p>首先查询redis查看是否存在，如果存在的话直接返回数据，如果不存在查询数据库，然后写入缓存</p><h3 id="写请求">写请求</h3><p>直接更新数据库然后删除缓存</p><blockquote><h3 id="为什么先更新数据库，而不是先删除缓存">为什么先更新数据库，而不是先删除缓存</h3><p>因为在并发的情况下如果线程A先去删除缓存然后线程B去查询了数据K，此时线程B查询了数据K，并且将数据写入了缓存，然后线程A才去更新了数据库，然后此时我们的缓存就会是一个旧数据所以不能先删除缓存</p></blockquote><h4 id="在这种情况下怎么解决缓存一致性的问题呢">在这种情况下怎么解决缓存一致性的问题呢</h4><p>由于先删除缓存后更新数据会有缓存脏数据，所以业内又提出了延时双删，也就是在删除数据之后，更新数据库，防止别的线程读取了数据产生了脏缓存延时之后再进行一次删除，这个延时的时间一般稍微大于业务的读时间耗时，但是无论这个值如何预估，都很难和读请求的完成时间点准确衔接，这也是延时双删被诟病的主要原因。</p><h3 id="先更新数据之后再删除缓存就没有问题了么">先更新数据之后再删除缓存就没有问题了么</h3><p>肯定不是的，在读写并发的时候也是会出现数据不一致的问题的，下面列举一种场景</p><ol><li>线程A读取数据K</li><li>线程B更新数据K</li><li>(在线程B)更新了数据K的时候，现在并没有缓存所以我们不需要去删除掉缓存</li><li>线程A读取的旧数据K就将旧数据写入到Redis缓存中了</li></ol><blockquote><p>此时就会造成数据不一致，单无论是缓存双删还是先更新数据后删除缓存都会有可能删除失败</p></blockquote><h2 id="删除数据失败的补偿机制">删除数据失败的补偿机制</h2><p>在上边说到的所有机制里边都会发生缓存不一致的问题，所以针对可能出现删除失败问题，主要有一下几种补偿机制</p><h3 id="消息队列进行重试">消息队列进行重试</h3><p>原因是因为如果我们使用另外一个线程的话，如果在执行失败的线程中一直重试，还没等执行成功，此时如果项目重启了，那这次重试请求也就丢失了，那这条数据就一直不一致了。所以，这里我们必须把重试或第二步操作放到另一个服务中，这个服务用消息队列最为合适。</p><ul><li><strong>消息队列保证可靠性</strong>：写到队列中的消息，成功消费之前不会丢失（重启项目也不担心）</li><li><strong>消息队列保证消息成功投递</strong>：下游从队列拉取消息，成功消费后才会删除消息，否则还会继续投递消息给消费者（符合我们重试的场景）</li></ul><blockquote><p>但是无论是使用消息队列或者去异步的进行重试都会去触及业务层所以我们在为了不干扰业务的时候去进行同步可以监听binlog</p></blockquote><h3 id="使用maxwell监听binlog">使用maxwell监听binlog</h3><p>使用maxwell监听binlog，在数据发生变化的时候生成JSON格式的消息，作为生产者发送给mq然后通过mq去根据这条数据删除对应的缓存</p><p>订阅变更日志，目前也有了比较成熟的开源中间件，例如阿里的 canal，使用这种方案的优点在于：</p><ul><li><strong>无需考虑写消息队列失败情况</strong>：只要写 MySQL 成功，binlog 肯定会有</li><li><strong>自动投递到下游队列</strong>：canal 自动把数据库变更日志「投递」给下游的消息队列</li></ul><h2 id="Write-Read-Through">Write/Read-Through</h2><p>核心思想：应用需要操作数据时只与缓存组件进行交互；缓存数据不会过期</p><p><code>Read-Through</code>应用查询缓存是否存在，存在则直接返回，不存在则由缓存组件去数据库加载数据</p><p><code>Write-Through</code>，先查询数据是否存在，存在则先更新缓存再去由缓存组件更新数据库，如果不存在的话有两种办法1. 直接更新数据库 2. 更新缓存然后由缓存组件去同步数据库</p><blockquote><p>存在的问题：</p><ul><li>因为应用操作数据时只与缓存组件交互，相对于Cache-Aside而言数据不一致的概率要低一些。</li><li>因为此模式下缓存没有过期时间，所以缓存的使用量会非常大。</li></ul></blockquote><h2 id="Write-Back">Write-Back</h2>]]></content>
      
      
      <categories>
          
          <category> 实用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AQS万字解析</title>
      <link href="/posts/be7fed04.html"/>
      <url>/posts/be7fed04.html</url>
      
        <content type="html"><![CDATA[<h1>AQS源码</h1><p>最近研究了一下AQS的源码这里写一篇文章讲一下AQS到底是干什么的怎么工作的</p><h2 id="AbstractQueuedSynchronizer">AbstractQueuedSynchronizer</h2><p>AbstractQueuedSynchronizer这个类大家应该都听说过，他是一个用于编写并发编程的框架，可以在他的基础上对一些方法进行重写实现不同的策略</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20221213112527308.png" alt="image-20221213112527308"></p><p>可以看到我们这个类是一个抽象类，但是他里边并没有任何一个抽象方法，而是留有很多这种以protected关键字修饰的方法</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20221213112838142.png" alt="image-20221213112838142"></p><p>那么可能会有疑问,为什么在抽象类中一个抽象方法都没有,而是好多这种默认方法呢，因为为了子类更好的实现定制化如果子类不去实现的话直接就会抛出异常，而不是像抽象方法一样必须重写。</p><p>然后我们看一下里边的Node节点是怎样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="comment">/** Marker to indicate a node is waiting in shared mode */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">SHARED</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">    <span class="comment">/** Marker to indicate a node is waiting in exclusive mode */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">EXCLUSIVE</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** waitStatus value to indicate thread has cancelled */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CANCELLED</span> <span class="operator">=</span>  <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/** waitStatus value to indicate successor&#x27;s thread needs unparking */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SIGNAL</span>    <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">/** waitStatus value to indicate thread is waiting on condition */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CONDITION</span> <span class="operator">=</span> -<span class="number">2</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * waitStatus value to indicate the next acquireShared should</span></span><br><span class="line"><span class="comment">     * unconditionally propagate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">PROPAGATE</span> <span class="operator">=</span> -<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Status field, taking on only the values:</span></span><br><span class="line"><span class="comment">     *   SIGNAL:     The successor of this node is (or will soon be)</span></span><br><span class="line"><span class="comment">     *               blocked (via park), so the current node must</span></span><br><span class="line"><span class="comment">     *               unpark its successor when it releases or</span></span><br><span class="line"><span class="comment">     *               cancels. To avoid races, acquire methods must</span></span><br><span class="line"><span class="comment">     *               first indicate they need a signal,</span></span><br><span class="line"><span class="comment">     *               then retry the atomic acquire, and then,</span></span><br><span class="line"><span class="comment">     *               on failure, block.</span></span><br><span class="line"><span class="comment">     *   CANCELLED:  This node is cancelled due to timeout or interrupt.</span></span><br><span class="line"><span class="comment">     *               Nodes never leave this state. In particular,</span></span><br><span class="line"><span class="comment">     *               a thread with cancelled node never again blocks.</span></span><br><span class="line"><span class="comment">     *   CONDITION:  This node is currently on a condition queue.</span></span><br><span class="line"><span class="comment">     *               It will not be used as a sync queue node</span></span><br><span class="line"><span class="comment">     *               until transferred, at which time the status</span></span><br><span class="line"><span class="comment">     *               will be set to 0. (Use of this value here has</span></span><br><span class="line"><span class="comment">     *               nothing to do with the other uses of the</span></span><br><span class="line"><span class="comment">     *               field, but simplifies mechanics.)</span></span><br><span class="line"><span class="comment">     *   PROPAGATE:  A releaseShared should be propagated to other</span></span><br><span class="line"><span class="comment">     *               nodes. This is set (for head node only) in</span></span><br><span class="line"><span class="comment">     *               doReleaseShared to ensure propagation</span></span><br><span class="line"><span class="comment">     *               continues, even if other operations have</span></span><br><span class="line"><span class="comment">     *               since intervened.</span></span><br><span class="line"><span class="comment">     *   0:          None of the above</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The values are arranged numerically to simplify use.</span></span><br><span class="line"><span class="comment">     * Non-negative values mean that a node doesn&#x27;t need to</span></span><br><span class="line"><span class="comment">     * signal. So, most code doesn&#x27;t need to check for particular</span></span><br><span class="line"><span class="comment">     * values, just for sign.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The field is initialized to 0 for normal sync nodes, and</span></span><br><span class="line"><span class="comment">     * CONDITION for condition nodes.  It is modified using CAS</span></span><br><span class="line"><span class="comment">     * (or when possible, unconditional volatile writes).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> waitStatus;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Link to predecessor node that current node/thread relies on</span></span><br><span class="line"><span class="comment">     * for checking waitStatus. Assigned during enqueuing, and nulled</span></span><br><span class="line"><span class="comment">     * out (for sake of GC) only upon dequeuing.  Also, upon</span></span><br><span class="line"><span class="comment">     * cancellation of a predecessor, we short-circuit while</span></span><br><span class="line"><span class="comment">     * finding a non-cancelled one, which will always exist</span></span><br><span class="line"><span class="comment">     * because the head node is never cancelled: A node becomes</span></span><br><span class="line"><span class="comment">     * head only as a result of successful acquire. A</span></span><br><span class="line"><span class="comment">     * cancelled thread never succeeds in acquiring, and a thread only</span></span><br><span class="line"><span class="comment">     * cancels itself, not any other node.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">volatile</span> Node prev;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Link to the successor node that the current node/thread</span></span><br><span class="line"><span class="comment">     * unparks upon release. Assigned during enqueuing, adjusted</span></span><br><span class="line"><span class="comment">     * when bypassing cancelled predecessors, and nulled out (for</span></span><br><span class="line"><span class="comment">     * sake of GC) when dequeued.  The enq operation does not</span></span><br><span class="line"><span class="comment">     * assign next field of a predecessor until after attachment,</span></span><br><span class="line"><span class="comment">     * so seeing a null next field does not necessarily mean that</span></span><br><span class="line"><span class="comment">     * node is at end of queue. However, if a next field appears</span></span><br><span class="line"><span class="comment">     * to be null, we can scan prev&#x27;s from the tail to</span></span><br><span class="line"><span class="comment">     * double-check.  The next field of cancelled nodes is set to</span></span><br><span class="line"><span class="comment">     * point to the node itself instead of null, to make life</span></span><br><span class="line"><span class="comment">     * easier for isOnSyncQueue.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">volatile</span> Node next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The thread that enqueued this node.  Initialized on</span></span><br><span class="line"><span class="comment">     * construction and nulled out after use.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">volatile</span> Thread thread;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Link to next node waiting on condition, or the special</span></span><br><span class="line"><span class="comment">     * value SHARED.  Because condition queues are accessed only</span></span><br><span class="line"><span class="comment">     * when holding in exclusive mode, we just need a simple</span></span><br><span class="line"><span class="comment">     * linked queue to hold nodes while they are waiting on</span></span><br><span class="line"><span class="comment">     * conditions. They are then transferred to the queue to</span></span><br><span class="line"><span class="comment">     * re-acquire. And because conditions can only be exclusive,</span></span><br><span class="line"><span class="comment">     * we save a field by using special value to indicate shared</span></span><br><span class="line"><span class="comment">     * mode.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Node nextWaiter;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns true if node is waiting in shared mode.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">isShared</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nextWaiter == SHARED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns previous node, or throws NullPointerException if null.</span></span><br><span class="line"><span class="comment">     * Use when predecessor cannot be null.  The null check could</span></span><br><span class="line"><span class="comment">     * be elided, but is present to help the VM.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the predecessor of this node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> Node <span class="title function_">predecessor</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> prev;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node() &#123;    <span class="comment">// Used to establish initial head or SHARED marker</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node(Thread thread, Node mode) &#123;     <span class="comment">// Used by addWaiter</span></span><br><span class="line">        <span class="built_in">this</span>.nextWaiter = mode;</span><br><span class="line">        <span class="built_in">this</span>.thread = thread;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node(Thread thread, <span class="type">int</span> waitStatus) &#123; <span class="comment">// Used by Condition</span></span><br><span class="line">        <span class="built_in">this</span>.waitStatus = waitStatus;</span><br><span class="line">        <span class="built_in">this</span>.thread = thread;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>waitStatus这个属性是一个当前的节点状态，可能有以下状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">// 为1的时候说明这个任务可能因为中断或者其他原因取消了</span></span><br><span class="line">&gt;<span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CANCELLED</span> <span class="operator">=</span>  <span class="number">1</span>;</span><br><span class="line">&gt;<span class="comment">// 代表下一个节点需要被唤醒</span></span><br><span class="line">&gt;<span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SIGNAL</span>    <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">&gt;<span class="comment">// 用于条件队列</span></span><br><span class="line">&gt;<span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CONDITION</span> <span class="operator">=</span> -<span class="number">2</span>;</span><br><span class="line">&gt;<span class="comment">// 用于共享锁</span></span><br><span class="line">&gt;<span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">PROPAGATE</span> <span class="operator">=</span> -<span class="number">3</span>;</span><br></pre></td></tr></table></figure></blockquote><h2 id="从ReentrantLock的非公平锁独占锁来看AQS的原理">从ReentrantLock的非公平锁独占锁来看AQS的原理</h2><p>以lock和unlock来看</p><p>ReentrantLock中有这样一个静态内部类NonfairSync也就是非公平锁的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">NonfairSync</span> <span class="keyword">extends</span> <span class="title class_">Sync</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">7316153563782823691L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Performs lock.  Try immediate barge, backing up to normal</span></span><br><span class="line"><span class="comment">     * acquire on failure.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">            setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            acquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">(<span class="type">int</span> acquires)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nonfairTryAcquire(acquires);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="lock详解">lock详解</h2><p>我们来看一下lock中的语句,一开始他通过cas操作将标识state从0更改为1，如果更改成功的话将当前线程设置为有访问权限线程当前拥有权限，如果cas失败的话会进入else语句执行acquire(1),这个方法很重点</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public final void <span class="built_in">acquire</span>(int arg) &#123;</span><br><span class="line">    if (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">        <span class="built_in">acquireQueued</span>(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">        <span class="built_in">selfInterrupt</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 里边包含了三个方法分别是tryAcquire(), addWaiter(Node.EXCLUSIVE), acquireQueued()</span></span><br></pre></td></tr></table></figure><p>从第一个方法开始看,tryAcquire是ReentrantLock自己重写的, 它里面调用了nonfairTryAcquire</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Performs non-fair tryLock.  tryAcquire is implemented in</span></span><br><span class="line"><span class="comment"> * subclasses, but both need nonfair try for trylock method.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">nonfairTryAcquire</span><span class="params">(<span class="type">int</span> acquires)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> getState();</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">nextc</span> <span class="operator">=</span> c + acquires;</span><br><span class="line">        <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line">        setState(nextc);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法总体来说就是通过cas的方式去尝试获得锁，获取不到的话也不会自旋而是进入addWaiter(Node.EXCLUSIVE)方法，我们来看一下</p><ol><li><p>获得当前的线程, 然后拿到当前锁的状态, 这个状态在不同同步器中有不同的含义, 在ReentrantLock中状态为0代表锁是空闲的, 1代表有线程持有锁, 大于1代表锁被重入的次数(1其实也可以看作第一次重入)</p></li><li><p>如果当前资源的状态为0, 使用cas尝试将状态从0设为1，如果成功, 标记当前线程持有锁</p></li><li><p>如果不是的话, 会再去判断当前线程是不是持有锁的线程, 如果是的话, 会将当前的state的值加上申请的资源值, 意味着锁被重入</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (nextc &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 在重入过程中, 如果资源数量由正变负, 代表资源溢出了, 毕竟初始值是0, 获取资源时也是不断累加, 不会有人尝试获取负数的资源, 那没有意义. </span></span><br><span class="line"><span class="comment"> * 我们都知道int类型的数据取值范围是[-2147483648, 2147483647]&quot; 所以一般是不可能触发这个Error的</span></span><br><span class="line"><span class="comment"> * */</span></span><br></pre></td></tr></table></figure><blockquote><p>如果都不满足返回false<br>上面我说的是理想状态下，如果是多线程竞争状态下呢，我们可以看一下, 假如线程A进来的时候, 状态码为0, 此时cas按理说应该是成功的, 可是在这个时候线程B来了, 获得的状态码也为0，而且线程B的cas先一步成功了，那么线程A获取锁就失败了, 又由于A和B是两个不同的线程, 所以线程A调用nonfairTryAcquire()的结果是false, 继续往后执行</p></blockquote><p>下面我们回到acquire方法, 如果tryAcquire方法返回了true, 说明已经成功获取到锁, 那么我们直接返回，继续往后执行代码就行，如果返回了false, 我们就会执行后边的方法addWaiter和acquireQueued方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">    acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">    selfInterrupt();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line"><span class="comment">// 这个方法会先执行assWaiter方法，参数为当前的模式独占模式和1，这个方法在尝试获得锁之后如果没有获得锁的话会将他加入到队列中</span></span><br></pre></td></tr></table></figure><h3 id="addWaiter-Node-EXCLUSIVE">addWaiter(Node.EXCLUSIVE)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Node <span class="title function_">addWaiter</span><span class="params">(Node mode)</span> &#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(Thread.currentThread(), mode);</span><br><span class="line">    <span class="comment">// Try the fast path of enq; backup to full enq on failure</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">pred</span> <span class="operator">=</span> tail;</span><br><span class="line">    <span class="keyword">if</span> (pred != <span class="literal">null</span>) &#123;</span><br><span class="line">        node.prev = pred;</span><br><span class="line">        <span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class="line">            pred.next = node;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    enq(node);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>addWaiter方法是给当前线程创建一个节点, 并添加到同步队列中, 排队等待机会获取锁, 参数Node.EXCLUSIVE代表当前线程希望以独占模式获取锁</p><p>然后获得尾节点, 如果尾节点已经创建，则使用尾插法将节点入队, 如果没有则调用enq方法入队, 实际上enq就是多了一步初始化头节点和尾节点的处理, 入队依然是使用相同的尾插法, 我们直接讲enq(node)里边的逻辑</p><h4 id="enq-node">enq(node)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Node <span class="title function_">enq</span><span class="params">(<span class="keyword">final</span> Node node)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">t</span> <span class="operator">=</span> tail;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123; <span class="comment">// Must initialize</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndSetHead(<span class="keyword">new</span> <span class="title class_">Node</span>()))</span><br><span class="line">                tail = head;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.prev = t;</span><br><span class="line">            <span class="keyword">if</span> (compareAndSetTail(t, node)) &#123;</span><br><span class="line">                t.next = node;</span><br><span class="line">                <span class="keyword">return</span> t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个里边的逻辑其实也挺简单的, 我们看一下, 首先是一个死循环, 这个死循环相当于一个自旋</p><blockquote><p>理想状态</p><p>在理想状态下首先同样会拿到当前队列的尾节点然后判断是否为null，如果为null的话说明此时还不存在尾节点，则创建一个节点当队列的头节点，里边的数据是null，然后cas的方式将其设为头节点然后尾节点也是它，因为我们这个分支里边并没有return语句所以还会重新进入循环，此时尾节点已经不是null了，那么我们进入else里边的分支，首先</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node.prev = t;</span><br><span class="line"><span class="comment">// 这句话会将当前节点的上一个节点设为头节点，然后通过cas的方式去将当前的节点设置为队列的尾节点</span></span><br><span class="line"><span class="comment">// 如果设置成功的话将当前队列的尾节点的下一个节点设置成当前节点然后将其返回</span></span><br></pre></td></tr></table></figure><p>不理想状态(并发)</p><p>在不理想状态的时候，模拟一下场景, 假如线程A进入了for循环, 判断了当前的尾节点为null，但是他在执行compareAndSetHead(new Node())的时候, 刚new出自己的节点来之后，就被线程B抢先将队列的头节点设置为自己new的节点，此时队列的尾节点就是线程B的节点数据，那么此时线程A去cas设置头节点就会失败，然后线程A进入下一轮循环, 此时的尾节点已经存在，我们就会使用尾插法将线程A设置为新的尾节点，最终返回旧的尾节点(这是因为AQS是前驱节点负责唤醒当前节点)</p></blockquote><blockquote><p>注意：enq()方法会返回旧的尾节点，但是addWaiter是返回当前线程的节点</p></blockquote><h3 id="acquireQueued-addWaiter-Node-EXCLUSIVE-arg">acquireQueued(addWaiter(Node.EXCLUSIVE), arg)</h3><p>上边讲完了addWaiter下面讲一下acquireQueued方法，上一个方法将当前线程的节点添加到同步队列之后, 会将其前驱节点返回, acquireQueued方法会尝试将该前驱节点设置为新的头节点, 以此来唤醒当前线程的节点, 我们来看一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="type">int</span> arg)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">failed</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">interrupted</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> node.predecessor();</span><br><span class="line">                <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">                    setHead(node);</span><br><span class="line">                    p.next = <span class="literal">null</span>; <span class="comment">// help GC</span></span><br><span class="line">                    failed = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">return</span> interrupted;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                    parkAndCheckInterrupt())</span><br><span class="line">                    interrupted = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (failed)</span><br><span class="line">                cancelAcquire(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个方法理解起来还是有点难度的，我们先看一下这两个标志位</p><p>boolean failed = true; // 在获取锁的过程中是否获取失败</p><p>boolean interrupted = false; // 在获取锁的过程中是否发生了中断</p></blockquote><p>接下来我们看一下for循环里边的逻辑</p><blockquote><ol><li><p>首先会拿到当前节点的前置节点, 如果前置节点是头节点的话, 代表当前节点已经是队列中第一个待执行的节点, 此时可以再次尝试获取锁, 无需任何等待(这里再次尝试获得锁的原因是，可能在添加节点到队列的过程中，拥有当前锁线程已经被释放)</p></li><li><p>我们先看获取锁成功的时候，如果获取锁成功的话我们就会将当前的节点设置为头节点，我们来看一下这个设置头节点的代码是怎么做的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setHead</span><span class="params">(Node node)</span> &#123;</span><br><span class="line"><span class="comment">// 首先将我们的当前节点设为头节点</span></span><br><span class="line">    head = node;</span><br><span class="line">    <span class="comment">// 然后将当前节点的线程数据置为null</span></span><br><span class="line">    node.thread = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 将当前节点的前驱节点置为null</span></span><br><span class="line">    node.prev = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接下来将我们的前驱节点的后继节点设为null</p></li></ol><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里的意思也就是，因为我们上一步已经将当前节点的前置节点设为了<span class="literal">null</span>所以现在已经不需要之前的头节点了，所以我们需要将原始头节点的的后继节点设为<span class="literal">null</span>，此时头节点就没有任何的引用了我们的GC会将他进行回收</span><br></pre></td></tr></table></figure></code></pre><ol start="3"><li><p>然后将是否获取失败标志位设为false，然后返回false</p></li><li><p>我们现在看了当前节点的前置节点是头节点并且抢占锁成功的状态，我们接下来看一下如果当前节点不是头节点或者是头节点但是抢占锁失败的情况下是如何处理的，也就是</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                         parkAndCheckInterrupt())</span><br><span class="line">                         interrupted = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 这里的处理我们挨个方法来讲首先来看一下shouldParkAfterFailedAcquire(p, node)</span></span><br></pre></td></tr></table></figure><pre><code> 1. shouldParkAfterFailedAcquire(p, node)    <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">shouldParkAfterFailedAcquire</span><span class="params">(Node pred, Node node)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ws</span> <span class="operator">=</span> pred.waitStatus;</span><br><span class="line">        <span class="keyword">if</span> (ws == Node.SIGNAL)</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * This node has already set status asking a release</span></span><br><span class="line"><span class="comment">             * to signal it, so it can safely park.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (ws &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 这里我在下边没有讲到这里就是如果大于0就说明这个任务可能因为中断或者其他原因取消了，我们就将当前的节点的前驱节点置为前驱节点的前驱，其实目的就是跳过有问题的节点，找到我们上一个可以唤醒下一节点的节点</span></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                node.prev = pred = pred.prev;</span><br><span class="line">            &#125; <span class="keyword">while</span> (pred.waitStatus &gt; <span class="number">0</span>);</span><br><span class="line">            pred.next = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * waitStatus must be 0 or PROPAGATE.  Indicate that we</span></span><br><span class="line"><span class="comment">             * need a signal, but don&#x27;t park yet.  Caller will need to</span></span><br><span class="line"><span class="comment">             * retry to make sure it cannot acquire before parking.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>    &gt;这个方法呢他的作用就是检查并重新获取失败节点的状态，我们可以看一下详细的代码，以为我们使用的非公平独占锁来进行讲解所以他的waitStatus只可能为-1，1，还有初始值0，注意有两个参数，参数一是我们的前驱节点，参数二是我们的当前的节点，当我们队列中添加了节点之后int ws = pred.waitStatus;获得前驱节点默认值肯定是0，然后进来进行判断走进else语句中执行compareAndSetWaitStatus(pred, ws, Node.SIGNAL);将前驱节点的状态值改为Node.SIGNAL，也就是-1，然后返回false此时就不去执行parkAndCheckInterrupt()方法了，而是重新进入for循环，此时如果还不满足第一个if的条件的话还是进入我们的    &gt;    &gt;<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">parkAndCheckInterrupt())</span><br></pre></td></tr></table></figure>    &gt;    &gt;此时在进入shouldParkAfterFailedAcquire(p, node)之后我们的前驱节点的标志位就是-1了所以进入parkAndCheckInterrupt()方法中    &gt;    &gt;<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">parkAndCheckInterrupt</span><span class="params">()</span> &#123;</span><br><span class="line">    LockSupport.park(<span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">return</span> Thread.interrupted();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    &gt;    &gt;这个方法就是将当前的线程挂起</code></pre><ol start="2"><li><p>我为什么没有说finally里边的cancelAcquire(node);方法呢因为他在我们的非公平锁独占模式下发生的概率很小，可以看一下上边的代码，如果我们想要进入cancelAcquire(node);方法首先failer必须为true，但是呢一旦进入了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">    setHead(node);</span><br><span class="line">    p.next = <span class="literal">null</span>; <span class="comment">// help GC</span></span><br><span class="line">    failed = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> interrupted;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 只有进入这段代码之后才会进入finally但是一旦进入finally我们的faile的值已经变成false了不会执行，还有一种情况就是抛出异常但是只有node.predecessor();这段代码会抛出异常所以概率很小很小，下面我单独讲一下这个方法的内部实现就不说出现的场景了</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h3 id="cancelAcquire-node">cancelAcquire(node)</h3><p>这个方法的作用是在当前节点再次获取锁失败后，判断当前线程是否需要挂起等待,  此时, 当前节点确实是队列中下一个执行的节点, 但是前面的节点还没释放锁, 所以当前线程可能需要挂起自己, 等待唤醒, 该方法返回true则挂起当前线程, false则返回acquireQueued方法继续自旋.<br>我们可以看一下详细的代码，因为我们使用的非公平独占锁来进行讲解, 所以他的waitStatus只可能为-1，1，还有初始值0，注意该方法有两个参数，参数一是我们的前驱节点，参数二是我们的当前的节点，当前节点是我们队列中的新节点, 获得前驱节点的waitStatus值肯定是0，直接执行compareAndSetWaitStatus(pred, ws, Node.SIGNAL);将前驱节点的状态值改为Node.SIGNAL，也就是-1，代表着, 当前线程已经将唤醒自己的任务托付给了前驱节点(这里我比较疑惑, 为什么要将等待状态放到前驱节点上, 放自己身上不行吗), 然后返回false, 此时就不去执行parkAndCheckInterrupt()方法了，而是重新进入for循环，此时如果还不满足第一个if的条件的话还是进入我们的, 第二次循环中, 如果再次进入shouldParkAfterFailedAcquire, 此时前驱节点的等待状态就是Node.SIGNAL, 所以直接返回true, 并执行parkAndCheckInterrupt(), 将当前线程挂起</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">cancelAcquire</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">    <span class="comment">// Ignore if node doesn&#x27;t exist</span></span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    node.thread = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Skip cancelled predecessors</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">pred</span> <span class="operator">=</span> node.prev;</span><br><span class="line">    <span class="keyword">while</span> (pred.waitStatus &gt; <span class="number">0</span>)</span><br><span class="line">        node.prev = pred = pred.prev;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// predNext is the apparent node to unsplice. CASes below will</span></span><br><span class="line">    <span class="comment">// fail if not, in which case, we lost race vs another cancel</span></span><br><span class="line">    <span class="comment">// or signal, so no further action is necessary.</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">predNext</span> <span class="operator">=</span> pred.next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Can use unconditional write instead of CAS here.</span></span><br><span class="line">    <span class="comment">// After this atomic step, other Nodes can skip past us.</span></span><br><span class="line">    <span class="comment">// Before, we are free of interference from other threads.</span></span><br><span class="line">    node.waitStatus = Node.CANCELLED;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we are the tail, remove ourselves.</span></span><br><span class="line">    <span class="keyword">if</span> (node == tail &amp;&amp; compareAndSetTail(node, pred)) &#123;</span><br><span class="line">        compareAndSetNext(pred, predNext, <span class="literal">null</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// If successor needs signal, try to set pred&#x27;s next-link</span></span><br><span class="line">        <span class="comment">// so it will get one. Otherwise wake it up to propagate.</span></span><br><span class="line">        <span class="type">int</span> ws;</span><br><span class="line">        <span class="keyword">if</span> (pred != head &amp;&amp;</span><br><span class="line">            ((ws = pred.waitStatus) == Node.SIGNAL ||</span><br><span class="line">             (ws &lt;= <span class="number">0</span> &amp;&amp; compareAndSetWaitStatus(pred, ws, Node.SIGNAL))) &amp;&amp;</span><br><span class="line">            pred.thread != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">next</span> <span class="operator">=</span> node.next;</span><br><span class="line">            <span class="keyword">if</span> (next != <span class="literal">null</span> &amp;&amp; next.waitStatus &lt;= <span class="number">0</span>)</span><br><span class="line">                compareAndSetNext(pred, predNext, next);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            unparkSuccessor(node);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        node.next = node; <span class="comment">// help GC</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>同样来一步一步的分析，我们aqs是如何将Node节点的状态标记为CANCELLED的</p><p>首先进入方法后会先判断当前节点是否为null也就是是否是有意义的，如果没有意义直接结束</p><p>然后当前节点的关联线程设置为null，然后获取到我们的前驱节点</p><p>通过while循环将我们waitStatus的值大于0的过滤掉也就是跳过有问题的节点，找到我们上一个可以唤醒下一节点的节点。并且把当前的节点状态设置为Node.CANCELLED;此时出现if语句根据不同情况进行不同的处理</p><p>情况一:</p><ol><li><p>如果当前节点是尾节点的话，将从后往前找，找到第一个状态为非取消状态的节点设置为尾节点</p><ol><li>如果设置成功的话将当前尾节点的后继节点设为null</li><li>如果设置失败的话将进入else语句</li></ol></li><li><p>如果当前节点不是尾节点的话也进入eles语句</p><ol><li><p>进入else语句之后声明一个ws变量再次进入if语句判断这里也分为不同的情况下面挨个说一下</p><ol><li><p>首先这一段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pred != head</span><br></pre></td></tr></table></figure><blockquote><p>如果当前节点不是头节点的后继节点</p></blockquote></li><li><p>然后中间的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((ws = pred.waitStatus) == Node.SIGNAL || (ws &lt;= <span class="number">0</span> &amp;&amp; compareAndSetWaitStatus(pred, ws, Node.SIGNAL)))</span><br></pre></td></tr></table></figure><blockquote><ol><li>判断当前节点的前驱节点状态是不是SIGNAL ，如果不是的话则把前驱节点设置为SIGNAL 看看是否成功</li></ol></blockquote></li><li></li></ol></li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pred.thread != <span class="literal">null</span></span><br></pre></td></tr></table></figure><pre><code>     &gt; 如果上边中间条件任意成立一个的话再判断当前节点的线程是否为null</code></pre><ol start="2"><li><p>此时如果上述条件都满足则把当前节点的前驱节点的后继指针指向当前节点的后继节点</p></li><li><p>如果上述条件都不满足的话也就是当前节点是头节点的后继节点或者不满足上边的条件那就调用unparkSuccessor(node);环形当前线程的后继节点</p></li></ol></blockquote><p>以上就是所有的加锁流程了</p><h2 id="unlock详解">unlock详解</h2><p>我们ReentrantLock中的解锁并没有区分公平锁和非公平锁，我们来根据源码一步一步的来看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">sync.release(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入release方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">release</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (tryRelease(arg)) &#123;</span><br><span class="line"><span class="type">Node</span> <span class="variable">h</span> <span class="operator">=</span> head;</span><br><span class="line"><span class="keyword">if</span> (h != <span class="literal">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</span><br><span class="line">unparkSuccessor(h);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>会先进入tryRelease(arg)方法</p></blockquote><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20221214202126150.png" alt="image-20221214202126150"></p><p>很明显这个方法是由子类去实现的我们下面来看一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">tryRelease</span><span class="params">(<span class="type">int</span> releases)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> getState() - releases;</span><br><span class="line">    <span class="keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalMonitorStateException</span>();</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">free</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">        free = <span class="literal">true</span>;</span><br><span class="line">        setExclusiveOwnerThread(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    setState(c);</span><br><span class="line">    <span class="keyword">return</span> free;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>引入我们的ReentrantLock加锁过程中支持可重入锁，首先会减去可重入的次数，然后判断一下当前持有锁的线程是不是当前线程如果不是的话直接抛出IllegalMonitorStateException();异常</p><ol><li>接下来定义一个free，如果我们tryRelease将当前持有的线程全部释放掉的话则返回true，否则返回false</li><li>如果已经全部释放掉了做一下处理将free设置为true然后设置当前的锁没有线程拥有它然后返回true</li></ol></blockquote><p>然后我们回到release()方法，如果此时的tryRelease(arg)返回了ture说明了该锁没有被任何线程持有然后我们可以进行if语句里边的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取头节点</span></span><br><span class="line"><span class="type">Node</span> <span class="variable">h</span> <span class="operator">=</span> head;</span><br><span class="line"><span class="comment">// 头节点不为空并且头节点的waitStatus不是初始化节点情况，解除线程挂起状态</span></span><br><span class="line"><span class="keyword">if</span> (h != <span class="literal">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</span><br><span class="line">unparkSuccessor(h);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><blockquote><p>我说一下这里为什么是<code>h != null &amp;&amp; h.waitStatus != 0</code></p><ol><li><p>h == null Head还没初始化。初始情况下，head == null，第一个节点入队，Head会被初始化一个虚拟节点。所以说，这里如果还没来得及入队，就会出现head == null 的情况。</p></li><li><p>h != null &amp;&amp; waitStatus == 0 表明后继节点对应的线程仍在运行中，不需要唤醒。</p></li><li><p>h != null &amp;&amp; waitStatus &lt; 0 表明后继节点可能被阻塞了，需要唤醒。</p></li></ol></blockquote><h3 id="unparkSuccessor">unparkSuccessor();</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">unparkSuccessor</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * If status is negative (i.e., possibly needing signal) try</span></span><br><span class="line"><span class="comment">     * to clear in anticipation of signalling.  It is OK if this</span></span><br><span class="line"><span class="comment">     * fails or if status is changed by waiting thread.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">ws</span> <span class="operator">=</span> node.waitStatus;</span><br><span class="line">    <span class="keyword">if</span> (ws &lt; <span class="number">0</span>)</span><br><span class="line">        compareAndSetWaitStatus(node, ws, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Thread to unpark is held in successor, which is normally</span></span><br><span class="line"><span class="comment">     * just the next node.  But if cancelled or apparently null,</span></span><br><span class="line"><span class="comment">     * traverse backwards from tail to find the actual</span></span><br><span class="line"><span class="comment">     * non-cancelled successor.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">s</span> <span class="operator">=</span> node.next;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="literal">null</span> || s.waitStatus &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        s = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">Node</span> <span class="variable">t</span> <span class="operator">=</span> tail; t != <span class="literal">null</span> &amp;&amp; t != node; t = t.prev)</span><br><span class="line">            <span class="keyword">if</span> (t.waitStatus &lt;= <span class="number">0</span>)</span><br><span class="line">                s = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (s != <span class="literal">null</span>)</span><br><span class="line">        LockSupport.unpark(s.thread);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>首先进入方法后会会的头节点的状态，如果小于0则设置为0，也就是初始状态</p><p>然后获取当前节点的下一个节点</p><p>if语句的意思就是如果当前节点的下一个节点被<em>cancelled</em>掉了就找到队列最开始的非<em>cancelled</em>的节点，但是里边的for循环是从队列的尾部开始找的，而不是从一开始就找，是从队尾到队首拿到队列的第一个<em>waitStatus&lt;0</em>的节点</p><blockquote><p>这里我说一下为什么是从后往前找这里要回顾一下我们的addWaiter方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;<span class="keyword">private</span> Node <span class="title function_">addWaiter</span><span class="params">(Node mode)</span> &#123;</span><br><span class="line">   <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(Thread.currentThread(), mode);</span><br><span class="line">   <span class="comment">// Try the fast path of enq; backup to full enq on failure</span></span><br><span class="line">   <span class="type">Node</span> <span class="variable">pred</span> <span class="operator">=</span> tail;</span><br><span class="line">   <span class="keyword">if</span> (pred != <span class="literal">null</span>) &#123;</span><br><span class="line">       node.prev = pred;</span><br><span class="line">       <span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class="line">           pred.next = node;</span><br><span class="line">           <span class="keyword">return</span> node;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   enq(node);</span><br><span class="line">   <span class="keyword">return</span> node;</span><br><span class="line">&gt;&gt;&#125;</span><br></pre></td></tr></table></figure><p>这个节点入队列的操作并不是原子的，所以不排除有这种情况在入队过程中执行到了pred.next = node的时候，此时还没有执行这条代码，但是这时候调用了unparkSuccessor，到达这里的时候就没有办法从前往后找了因为这里相当于链表的断链了所以需要从后往前找</p></blockquote></blockquote><h3 id="线程被唤醒后的操作">线程被唤醒后的操作</h3><p>在我们的中断线程恢复之后会做什么操作呢</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">parkAndCheckInterrupt</span><span class="params">()</span> &#123;</span><br><span class="line">LockSupport.park(<span class="built_in">this</span>);</span><br><span class="line"><span class="keyword">return</span> Thread.interrupted();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 首先回到这里执行return Thread.interrupted();</span></span><br><span class="line"><span class="comment">// 这里的作用是返回当前执行线程的中断状态，并清除</span></span><br></pre></td></tr></table></figure><p>然后回到我们的acquireQueued()方法中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                    parkAndCheckInterrupt())</span><br><span class="line">                    interrupted = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 这里parkAndCheckInterrupt返回True或者False的时候，interrupted的值不同，但都会执行下次循环。如果这个时候获取锁成功，就会把当前interrupted返回。</span></span><br></pre></td></tr></table></figure><h3 id="selfInterrupt">selfInterrupt</h3><p>能力有限当前方法的作用后续会补充</p>]]></content>
      
      
      <categories>
          
          <category> AQS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql8.0中的Json数据类型</title>
      <link href="/posts/9aeaf84b.html"/>
      <url>/posts/9aeaf84b.html</url>
      
        <content type="html"><![CDATA[<h2 id="场景">场景</h2><p>在某张表中存在一个字段数据类型是一个Json，这个字段保存的数据格式是一个JsonArray，其中每个JsonObject都有一个属性为UUID，现在我们有以下两个需求<br>1、 根据UUID查询出对应的JsonObject<br>2、 根据UUID查询出对应的JsonObject并且将其删除，并保留该JsonArray的其他数据</p><blockquote><p>条件只有一个UUID，而没有该JsonArray所在的数据的主键索引</p></blockquote><h2 id="根据UUID查询出对应的JsonObject">根据UUID查询出对应的JsonObject</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过uuid查询当页对应的敏感句对应的jsonObject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query(value = &quot;SELECT json_extract(machine_wording, &#x27;$[0]&#x27;) &quot; +</span></span><br><span class="line"><span class="meta">            &quot;FROM xxxxxx &quot; +</span></span><br><span class="line"><span class="meta">            &quot;WHERE json_extract(machine_wording, &#x27;$[0].uuid&#x27;) = :uuid&quot;,</span></span><br><span class="line"><span class="meta">            nativeQuery = true)</span></span><br><span class="line">    String <span class="title function_">findJsonObjectByUuid</span><span class="params">(<span class="meta">@Param(&quot;uuid&quot;)</span> String uuid)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>上述machine_wording就是存放这个JsonArray的字段名称<br>通过json_extract函数可以获取到JsonArray中的第一个JsonObject，然后通过json_extract函数获取到该JsonObject中的uuid属性，然后与传入的uuid进行比较，如果相等则返回该JsonObject</p></blockquote><h2 id="根据UUID查询出对应的JsonObject并且将其删除，并保留该JsonArray的其他数据">根据UUID查询出对应的JsonObject并且将其删除，并保留该JsonArray的其他数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过uuid删除当页对应的敏感句</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Modifying</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Query(nativeQuery = true, value = &quot;UPDATE xxx AS a &quot; +</span></span><br><span class="line"><span class="meta">            &quot;SET a.machine_wording = coalesce((&quot; +</span></span><br><span class="line"><span class="meta">            &quot;    SELECT JSON_ARRAYAGG(json_object) &quot; +</span></span><br><span class="line"><span class="meta">            &quot;    FROM (&quot; +</span></span><br><span class="line"><span class="meta">            &quot;        SELECT JSON_EXTRACT(a.machine_wording, CONCAT(&#x27;$[&#x27;, jt.idx - 1, &#x27;]&#x27;)) as json_object &quot; +</span></span><br><span class="line"><span class="meta">            &quot;        FROM JSON_TABLE(&quot; +</span></span><br><span class="line"><span class="meta">            &quot;            a.machine_wording, &quot; +</span></span><br><span class="line"><span class="meta">            &quot;            &#x27;$[*]&#x27; COLUMNS (&quot; +</span></span><br><span class="line"><span class="meta">            &quot;                idx FOR ORDINALITY, &quot; +</span></span><br><span class="line"><span class="meta">            &quot;                uuid VARCHAR(255) PATH &#x27;$.uuid&#x27;&quot; +</span></span><br><span class="line"><span class="meta">            &quot;            )&quot; +</span></span><br><span class="line"><span class="meta">            &quot;        ) AS jt &quot; +</span></span><br><span class="line"><span class="meta">            &quot;        WHERE jt.uuid != :uuid&quot; +</span></span><br><span class="line"><span class="meta">            &quot;    ) AS filtered_json_objects&quot; +</span></span><br><span class="line"><span class="meta">            &quot;), a.machine_wording)&quot; +</span></span><br><span class="line"><span class="meta">            &quot;WHERE JSON_CONTAINS(a.machine_wording, JSON_OBJECT(&#x27;uuid&#x27;, :uuid));&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteJsonObjectByUuid</span><span class="params">(<span class="meta">@Param(&quot;uuid&quot;)</span> String uuid)</span>;</span><br></pre></td></tr></table></figure><blockquote><ul><li>上述machine_wording就是存放这个JsonArray的字段名称</li><li>上述xxx就是表名</li><li>通过json_table函数将JsonArray转换成一个表，然后通过where条件过滤掉uuid等于传入的uuid的JsonObject，然后通过json_arrayagg函数将过滤后的JsonObject转换成JsonArray，最后通过update语句将原来的JsonArray替换成过滤后的JsonArray</li></ul></blockquote><h2 id="2323-07-22测试环境产生问题">2323-07-22测试环境产生问题</h2><blockquote><p>在测试环境中的时候对下边这个需求进行测试的时候产生了一些小问题<br>根据UUID查询出对应的JsonObject并且将其删除，并保留该JsonArray的其他数据</p></blockquote><ol><li>首先使用我上边deleteJsonObjectByUuid方法时会在特殊环境下产生一些问题</li><li>出现问题的场景<br>当我们的machine_wording字段中的JsonArray中的JsonObject为一个的时候会出现删除不掉的问题</li><li>产生问题的原因是对应的sql是先找到UUID不等于传入的时候他就会拿到所有不等于的然后更新到这个字段中，相当于删掉了，所以当只有一个的时候他找不到然后没有办法更新上去，所以就会出现问题</li></ol><p>以下是我进行修改之后的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Modifying</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Query(nativeQuery = true, value = &quot;UPDATE ai_sensitive_appraisal_file_ocr_post_artificial AS a &quot; +</span></span><br><span class="line"><span class="meta">            &quot;SET a.mark_words = CASE WHEN (&quot; +</span></span><br><span class="line"><span class="meta">            &quot;    SELECT JSON_ARRAYAGG(json_object) &quot; +</span></span><br><span class="line"><span class="meta">            &quot;    FROM (&quot; +</span></span><br><span class="line"><span class="meta">            &quot;        SELECT JSON_EXTRACT(a.mark_words, CONCAT(&#x27;$[&#x27;, jt.idx - 1, &#x27;]&#x27;)) as json_object &quot; +</span></span><br><span class="line"><span class="meta">            &quot;        FROM JSON_TABLE(&quot; +</span></span><br><span class="line"><span class="meta">            &quot;            a.mark_words, &quot; +</span></span><br><span class="line"><span class="meta">            &quot;            &#x27;$[*]&#x27; COLUMNS (&quot; +</span></span><br><span class="line"><span class="meta">            &quot;                idx FOR ORDINALITY, &quot; +</span></span><br><span class="line"><span class="meta">            &quot;                uuid VARCHAR(255) PATH &#x27;$.uuid&#x27;&quot; +</span></span><br><span class="line"><span class="meta">            &quot;            )&quot; +</span></span><br><span class="line"><span class="meta">            &quot;        ) AS jt &quot; +</span></span><br><span class="line"><span class="meta">            &quot;        WHERE jt.uuid != :uuid&quot; +</span></span><br><span class="line"><span class="meta">            &quot;    ) AS filtered_json_objects&quot; +</span></span><br><span class="line"><span class="meta">            &quot;) IS NULL THEN &#x27;[]&#x27; ELSE (&quot; +</span></span><br><span class="line"><span class="meta">            &quot;    SELECT JSON_ARRAYAGG(json_object) &quot; +</span></span><br><span class="line"><span class="meta">            &quot;    FROM (&quot; +</span></span><br><span class="line"><span class="meta">            &quot;        SELECT JSON_EXTRACT(a.mark_words, CONCAT(&#x27;$[&#x27;, jt.idx - 1, &#x27;]&#x27;)) as json_object &quot; +</span></span><br><span class="line"><span class="meta">            &quot;        FROM JSON_TABLE(&quot; +</span></span><br><span class="line"><span class="meta">            &quot;            a.mark_words, &quot; +</span></span><br><span class="line"><span class="meta">            &quot;            &#x27;$[*]&#x27; COLUMNS (&quot; +</span></span><br><span class="line"><span class="meta">            &quot;                idx FOR ORDINALITY, &quot; +</span></span><br><span class="line"><span class="meta">            &quot;                uuid VARCHAR(255) PATH &#x27;$.uuid&#x27;&quot; +</span></span><br><span class="line"><span class="meta">            &quot;            )&quot; +</span></span><br><span class="line"><span class="meta">            &quot;        ) AS jt &quot; +</span></span><br><span class="line"><span class="meta">            &quot;        WHERE jt.uuid != :uuid&quot; +</span></span><br><span class="line"><span class="meta">            &quot;    ) AS filtered_json_objects&quot; +</span></span><br><span class="line"><span class="meta">            &quot;) END &quot; +</span></span><br><span class="line"><span class="meta">            &quot;WHERE JSON_CONTAINS(a.mark_words, JSON_OBJECT(&#x27;uuid&#x27;, :uuid));&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteBModelWord</span><span class="params">(<span class="meta">@Param(&quot;uuid&quot;)</span> String uuid)</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 实用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多种格式文件合并为pdf(大数据量)</title>
      <link href="/posts/a532201c.html"/>
      <url>/posts/a532201c.html</url>
      
        <content type="html"><![CDATA[<h2 id="需求场景">需求场景</h2><p>最近遇到了一个比较恶心的需求，就是用户为了安全性，本地的富文本文件不存放到我们的minio中，而是富文本的原件存在了客户的服务器中，但是我们只能在数据库存放对应的路径。<br>富文本与档案的绑定关系是多对一，也就是多个富文本绑定一个档案，现在有个问题就是我们系统都是档案都是以pdf进行展示的，而客户那边档案下对应的富文本是多种数据类型的包括以下几种：jpg，png，jpeg，pdf，tif，tiff<br>所以我要去做兼容也就是说需要把档案下对应的各种格式的富文本拼接成一个pdf，然后再去展示。</p><p>先看一下我最开始写的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isPDF</span><span class="params">(<span class="type">byte</span>[] data)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">PDDocument</span> <span class="variable">document</span> <span class="operator">=</span> PDDocument.load(data)) &#123;</span><br><span class="line">            <span class="comment">// 如果加载成功，表示是有效的 PDF 文件</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// 加载失败，不是有效的 PDF 文件</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] convertToPdf(List&lt;<span class="type">byte</span>[]&gt; files) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">PDDocument</span> <span class="variable">pdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PDDocument</span>();</span><br><span class="line"></span><br><span class="line">        List&lt;<span class="type">byte</span>[]&gt; imageFiles = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">byte</span>[] fileData : files) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">mimeType</span> <span class="operator">=</span> URLConnection.guessContentTypeFromStream(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(fileData));</span><br><span class="line">            <span class="keyword">if</span> (isPDF(fileData)) &#123;</span><br><span class="line">                imageFiles.addAll(pdfToImage(fileData));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mimeType != <span class="literal">null</span> &amp;&amp; (mimeType.toLowerCase().contains(<span class="string">&quot;png&quot;</span>)</span><br><span class="line">                    || mimeType.toLowerCase().contains(<span class="string">&quot;jpg&quot;</span>) || mimeType.toLowerCase().contains(<span class="string">&quot;jpeg&quot;</span>))) &#123;</span><br><span class="line">                imageFiles.add(fileData);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mimeType != <span class="literal">null</span> &amp;&amp; (mimeType.toLowerCase().contains(<span class="string">&quot;tiff&quot;</span>) || mimeType.toLowerCase().contains(<span class="string">&quot;tif&quot;</span>))) &#123;</span><br><span class="line">                List&lt;<span class="type">byte</span>[]&gt; tiffImages = tiffToImage(fileData);</span><br><span class="line">                imageFiles.addAll(tiffImages);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">numThreads</span> <span class="operator">=</span> Runtime.getRuntime().availableProcessors() * <span class="number">2</span>;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(numThreads);</span><br><span class="line"></span><br><span class="line">        List&lt;Future&lt;PDPage&gt;&gt; futures = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">byte</span>[] imageFileData : imageFiles) &#123;</span><br><span class="line">            futures.add(executorService.submit(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(imageFileData)) &#123;</span><br><span class="line">                    <span class="type">BufferedImage</span> <span class="variable">readPic</span> <span class="operator">=</span> ImageIO.read(is);</span><br><span class="line">                    <span class="keyword">if</span> (ObjectUtil.isEmpty(readPic)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="type">PDImageXObject</span> <span class="variable">fromImage</span> <span class="operator">=</span> LosslessFactory.createFromImage(pdf, readPic);</span><br><span class="line">                    <span class="type">PDPage</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PDPage</span>(PDRectangle.A4);</span><br><span class="line">                    <span class="type">PDPageContentStream</span> <span class="variable">contents</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PDPageContentStream</span>(pdf, page);</span><br><span class="line">                    <span class="type">float</span> <span class="variable">height</span> <span class="operator">=</span> page.getMediaBox().getHeight();</span><br><span class="line">                    <span class="type">float</span> <span class="variable">y</span> <span class="operator">=</span> page.getMediaBox().getHeight() - height;</span><br><span class="line">                    contents.drawImage(fromImage, <span class="number">0</span>, y, page.getMediaBox().getWidth(), height);</span><br><span class="line">                    contents.close();</span><br><span class="line">                    <span class="keyword">return</span> page;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Error processing image data&quot;</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Future&lt;PDPage&gt; future : futures) &#123;</span><br><span class="line">                <span class="type">PDPage</span> <span class="variable">page</span> <span class="operator">=</span> future.get();</span><br><span class="line">                <span class="keyword">if</span> (page != <span class="literal">null</span>) &#123;</span><br><span class="line">                    pdf.addPage(page);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Error retrieving page futures&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            executorService.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            pdf.save(outputStream);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            pdf.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> outputStream.toByteArray();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;<span class="type">byte</span>[]&gt; pdfToImage(<span class="type">byte</span>[] pdfData) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        List&lt;<span class="type">byte</span>[]&gt; imageFiles = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(pdfData);</span><br><span class="line">             <span class="type">PDDocument</span> <span class="variable">document</span> <span class="operator">=</span> PDDocument.load(is)) &#123;</span><br><span class="line">            <span class="type">PDFRenderer</span> <span class="variable">pdfRenderer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PDFRenderer</span>(document);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">pageIndex</span> <span class="operator">=</span> <span class="number">0</span>; pageIndex &lt; document.getNumberOfPages(); ++pageIndex) &#123;</span><br><span class="line">                <span class="type">BufferedImage</span> <span class="variable">bim</span> <span class="operator">=</span> pdfRenderer.renderImageWithDPI(pageIndex, <span class="number">300</span>, ImageType.RGB);</span><br><span class="line">                <span class="keyword">try</span> (<span class="type">ByteArrayOutputStream</span> <span class="variable">imageStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>()) &#123;</span><br><span class="line">                    ImageIO.write(bim, <span class="string">&quot;png&quot;</span>, imageStream);</span><br><span class="line">                    imageFiles.add(imageStream.toByteArray());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> imageFiles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;<span class="type">byte</span>[]&gt; tiffToImage(<span class="type">byte</span>[] tiffData) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        List&lt;<span class="type">byte</span>[]&gt; imageFiles = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">ImageInputStream</span> <span class="variable">is</span> <span class="operator">=</span> ImageIO.createImageInputStream(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(tiffData))) &#123;</span><br><span class="line">            Iterator&lt;ImageReader&gt; it = ImageIO.getImageReaders(is);</span><br><span class="line">            <span class="keyword">if</span> (it.hasNext()) &#123;</span><br><span class="line">                <span class="type">ImageReader</span> <span class="variable">reader</span> <span class="operator">=</span> it.next();</span><br><span class="line">                reader.setInput(is);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; reader.getNumImages(<span class="literal">true</span>); i++) &#123;</span><br><span class="line">                    <span class="type">BufferedImage</span> <span class="variable">image</span> <span class="operator">=</span> reader.read(i);</span><br><span class="line">                    <span class="keyword">try</span> (<span class="type">ByteArrayOutputStream</span> <span class="variable">imageStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>()) &#123;</span><br><span class="line">                        ImageIO.write(image, <span class="string">&quot;png&quot;</span>, imageStream);</span><br><span class="line">                        imageFiles.add(imageStream.toByteArray());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> imageFiles;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>产生问题的原因是因为我们的数据量比较大，而且每次都是多个文件，所以这个方法的执行时间会比较长，而且在执行的过程中会产生大量的临时文件，这样会导致服务器的磁盘空间不足，所以使用了流代替temp。<br>然后对方数据量都是一个档案可能对应几百页的富文本，这种写法会特别慢，导致接口超时所以要想一种解决办法</p></blockquote><h2 id="现在要优化成什么样子呢">现在要优化成什么样子呢</h2><blockquote><p>1、首先是要保证合并的时候有序，<br>2、所以就直接排除并行流了，<br>3、既要有序也要保证大文件和多页数时候的效率，并且要保证有序合并<br>4、同时还要兼容各种不同的类型，所以就需要对不同的类型进行不同的处理</p></blockquote><h2 id="优化后的代码">优化后的代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">logger.info(<span class="string">&quot;开始转换pdf&quot;</span>);</span><br><span class="line">        <span class="comment">// Assume that urls is List&lt;String&gt; urls.</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">totalUrls</span> <span class="operator">=</span> collect.size();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">batchSize</span> <span class="operator">=</span> <span class="number">20</span>;  <span class="comment">// process 20 URLs in each batch</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">totalBatches</span> <span class="operator">=</span> (<span class="type">int</span>) Math.ceil((<span class="type">double</span>) totalUrls / batchSize);</span><br><span class="line"></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(Math.min(totalBatches, Runtime.getRuntime().availableProcessors()));</span><br><span class="line"></span><br><span class="line">        List&lt;CompletableFuture&lt;<span class="type">byte</span>[]&gt;&gt; futures = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; totalBatches; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">fromIndex</span> <span class="operator">=</span> i * batchSize;</span><br><span class="line">            <span class="type">int</span> <span class="variable">toIndex</span> <span class="operator">=</span> Math.min((i + <span class="number">1</span>) * batchSize, totalUrls);</span><br><span class="line">            List&lt;String&gt; batchUrls = collect.subList(fromIndex, toIndex);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (String url : batchUrls) &#123;</span><br><span class="line">                CompletableFuture&lt;<span class="type">byte</span>[]&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">                    logger.info(<span class="string">&quot;开始合并数据路径为:&#123;&#125;&quot;</span>, url);</span><br><span class="line">                    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">extName</span> <span class="operator">=</span> FileUtil.extName(url);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> ((extName != <span class="literal">null</span> &amp;&amp; (extName.toLowerCase().contains(<span class="string">&quot;png&quot;</span>)</span><br><span class="line">                            || extName.toLowerCase().contains(<span class="string">&quot;jpg&quot;</span>) || extName.toLowerCase().contains(<span class="string">&quot;jpeg&quot;</span>)))) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="keyword">final</span> <span class="type">byte</span>[] bytes = PicUtil.compressPictureForScale(url, <span class="number">1024</span>, <span class="number">0.9</span>);</span><br><span class="line">                            logger.info(<span class="string">&quot;文件大小为:&#123;&#125;&quot;</span>, bytes.length);</span><br><span class="line">                            <span class="keyword">return</span> bytes;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">File</span> <span class="variable">imageFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(url);</span><br><span class="line">                        <span class="keyword">if</span> (imageFile.exists() &amp;&amp; imageFile.isFile()) &#123;</span><br><span class="line">                            <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(imageFile)) &#123;</span><br><span class="line">                                <span class="type">byte</span>[] fileData = IOUtils.toByteArray(fileInputStream);</span><br><span class="line">                                logger.info(<span class="string">&quot;文件大小为:&#123;&#125;&quot;</span>, fileData.length);</span><br><span class="line">                                <span class="keyword">return</span> fileData;</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;  <span class="comment">// Or throw an exception if a URL does not correspond to a valid image</span></span><br><span class="line">                &#125;, executorService);</span><br><span class="line"></span><br><span class="line">                futures.add(future);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Now futures is a list of CompletableFuture&lt;byte[]&gt;, each of which represents the result of one task.</span></span><br><span class="line"><span class="comment">// We can ensure that we get the results in the same order as the tasks were submitted by retrieving the results in the order they were added to the futures list.</span></span><br><span class="line"></span><br><span class="line">        List&lt;<span class="type">byte</span>[]&gt; imageFiles = futures.stream()</span><br><span class="line">                .map(CompletableFuture::join)  <span class="comment">// This will block until the result is available</span></span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        executorService.shutdown();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Now imageFiles contains all the processed data in the same order as the URLs were provided.</span></span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">&quot;合并数据路径为&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] pdfData = appraisalFileService.convertToPdf(imageFiles);</span><br><span class="line">        logger.info(pdfData.length + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;转换pdf结束&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=converted.pdf&quot;</span>);</span><br><span class="line">        response.setContentLength(pdfData.length);</span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">        outputStream.write(pdfData);</span><br><span class="line">        outputStream.flush();</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;导入成功&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="convertToPdf方法">convertToPdf方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">byte</span>[] convertToPdf(List&lt;<span class="type">byte</span>[]&gt; files) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// calculate mime type in advance</span></span><br><span class="line">        <span class="type">Tika</span> <span class="variable">tika</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tika</span>();</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; mimeTypes = files.stream().map(fileData -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> (<span class="type">TikaInputStream</span> <span class="variable">tikaStream</span> <span class="operator">=</span> TikaInputStream.get(fileData)) &#123;</span><br><span class="line">                <span class="keyword">return</span> tika.detect(tikaStream);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mimeTypes.stream().noneMatch(mimeType -&gt; mimeType != <span class="literal">null</span> &amp;&amp; mimeType.toLowerCase().contains(<span class="string">&quot;pdf&quot;</span>))) &#123;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">finalOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">PdfWriter</span> <span class="variable">finalWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PdfWriter</span>(finalOutputStream);</span><br><span class="line">            <span class="type">PdfDocument</span> <span class="variable">finalPdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PdfDocument</span>(finalWriter);</span><br><span class="line">            <span class="type">Document</span> <span class="variable">finalDocument</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Document</span>(finalPdf);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; files.size(); i++) &#123;</span><br><span class="line">                <span class="type">byte</span>[] fileData = files.get(i);</span><br><span class="line">                <span class="type">String</span> <span class="variable">mimeType</span> <span class="operator">=</span> mimeTypes.get(i);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(fileData)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (mimeType != <span class="literal">null</span> &amp;&amp; mimeType.toLowerCase().contains(<span class="string">&quot;pdf&quot;</span>)) &#123;</span><br><span class="line">                    <span class="comment">/*PdfDocument sourcePdf = new PdfDocument(new PdfReader(inputStream));</span></span><br><span class="line"><span class="comment">                    int finalPdfNumberOfPages = finalPdf.getNumberOfPages();</span></span><br><span class="line"><span class="comment">                    sourcePdf.copyPagesTo(1, sourcePdf.getNumberOfPages(), finalPdf, finalPdfNumberOfPages + 1);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                    sourcePdf.close();*/</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mimeType != <span class="literal">null</span> &amp;&amp; (mimeType.toLowerCase().contains(<span class="string">&quot;png&quot;</span>)</span><br><span class="line">                            || mimeType.toLowerCase().contains(<span class="string">&quot;jpg&quot;</span>) || mimeType.toLowerCase().contains(<span class="string">&quot;jpeg&quot;</span>))) &#123;</span><br><span class="line">                        com.itextpdf.io.image.<span class="type">ImageData</span> <span class="variable">imageData</span> <span class="operator">=</span> ImageDataFactory.create(fileData);</span><br><span class="line">                        <span class="type">Image</span> <span class="variable">image</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Image</span>(imageData);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// Adjust the size of the image if it&#x27;s too large</span></span><br><span class="line">                        <span class="type">float</span> <span class="variable">pageWidth</span> <span class="operator">=</span> finalDocument.getPageEffectiveArea(PageSize.A4).getWidth();</span><br><span class="line">                        <span class="keyword">if</span> (image.getImageScaledWidth() &gt; pageWidth) &#123;</span><br><span class="line">                            image.scaleToFit(pageWidth, Float.MAX_VALUE);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        finalDocument.add(image);</span><br><span class="line">                        finalDocument.add(<span class="keyword">new</span> <span class="title class_">AreaBreak</span>(AreaBreakType.NEXT_PAGE)); <span class="comment">// Add a page break after each image</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mimeType != <span class="literal">null</span> &amp;&amp; (mimeType.toLowerCase().contains(<span class="string">&quot;tiff&quot;</span>) || mimeType.toLowerCase().contains(<span class="string">&quot;tif&quot;</span>))) &#123;</span><br><span class="line">                        <span class="keyword">try</span> (<span class="type">ImageInputStream</span> <span class="variable">imageInputStream</span> <span class="operator">=</span> ImageIO.createImageInputStream(inputStream)) &#123;</span><br><span class="line">                            Iterator&lt;ImageReader&gt; imageReaders = ImageIO.getImageReaders(imageInputStream);</span><br><span class="line">                            <span class="keyword">if</span> (imageReaders.hasNext()) &#123;</span><br><span class="line">                                <span class="type">ImageReader</span> <span class="variable">reader</span> <span class="operator">=</span> imageReaders.next();</span><br><span class="line">                                reader.setInput(imageInputStream);</span><br><span class="line">                                <span class="type">int</span> <span class="variable">pageCount</span> <span class="operator">=</span> reader.getNumImages(<span class="literal">true</span>);</span><br><span class="line">                                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; pageCount; k++) &#123;</span><br><span class="line">                                    <span class="type">BufferedImage</span> <span class="variable">page</span> <span class="operator">=</span> reader.read(k);</span><br><span class="line">                                    <span class="keyword">try</span> (<span class="type">ByteArrayOutputStream</span> <span class="variable">pageOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>()) &#123;</span><br><span class="line">                                        ImageIO.write(page, <span class="string">&quot;png&quot;</span>, pageOutputStream);</span><br><span class="line">                                        <span class="type">ImageData</span> <span class="variable">imageData</span> <span class="operator">=</span> ImageDataFactory.create(pageOutputStream.toByteArray());</span><br><span class="line">                                        <span class="type">Image</span> <span class="variable">image</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Image</span>(imageData);</span><br><span class="line">                                        finalDocument.add(image);</span><br><span class="line">                                        finalDocument.add(<span class="keyword">new</span> <span class="title class_">AreaBreak</span>(AreaBreakType.NEXT_PAGE)); <span class="comment">// Add a page break after each image</span></span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            finalDocument.close();</span><br><span class="line">            finalPdf.close();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> finalOutputStream.toByteArray();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">batchSize</span> <span class="operator">=</span> <span class="number">50</span>;                     <span class="comment">// 每批处理的文件数量</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">totalFiles</span> <span class="operator">=</span> files.size();</span><br><span class="line">            <span class="type">int</span> <span class="variable">batches</span> <span class="operator">=</span> (<span class="type">int</span>) Math.ceil((<span class="type">double</span>) totalFiles / batchSize);</span><br><span class="line"></span><br><span class="line">            <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(Math.min(batches, Runtime.getRuntime().availableProcessors()));</span><br><span class="line"></span><br><span class="line">            List&lt;CompletableFuture&lt;PDDocument&gt;&gt; futures = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; batches; i++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">fromIndex</span> <span class="operator">=</span> i * batchSize;</span><br><span class="line">                <span class="type">int</span> <span class="variable">toIndex</span> <span class="operator">=</span> Math.min((i + <span class="number">1</span>) * batchSize, totalFiles);</span><br><span class="line">                List&lt;<span class="type">byte</span>[]&gt; batchFiles = files.subList(fromIndex, toIndex);</span><br><span class="line"></span><br><span class="line">                CompletableFuture&lt;PDDocument&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">                    <span class="type">PDDocument</span> <span class="variable">batchPdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PDDocument</span>();</span><br><span class="line">                    <span class="type">PDFMergerUtility</span> <span class="variable">merger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PDFMergerUtility</span>();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">byte</span>[] fileData : batchFiles) &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">mimeType</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            mimeType = URLConnection.guessContentTypeFromStream(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(fileData));</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (isPDF(fileData)) &#123;</span><br><span class="line">                            <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(fileData)) &#123;</span><br><span class="line">                                <span class="type">PDDocument</span> <span class="variable">sourcePdf</span> <span class="operator">=</span> PDDocument.load(inputStream);</span><br><span class="line">                                merger.appendDocument(batchPdf, sourcePdf);</span><br><span class="line">                                sourcePdf.close();</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mimeType != <span class="literal">null</span> &amp;&amp; (mimeType.toLowerCase().contains(<span class="string">&quot;png&quot;</span>)</span><br><span class="line">                                || mimeType.toLowerCase().contains(<span class="string">&quot;jpg&quot;</span>) || mimeType.toLowerCase().contains(<span class="string">&quot;jpeg&quot;</span>))) &#123;</span><br><span class="line">                            <span class="type">PDPage</span> <span class="variable">page</span> <span class="operator">=</span> createPDPageFromImage(batchPdf, fileData);</span><br><span class="line">                            <span class="keyword">if</span> (page != <span class="literal">null</span>) &#123;</span><br><span class="line">                                batchPdf.addPage(page);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mimeType != <span class="literal">null</span> &amp;&amp; (mimeType.toLowerCase().contains(<span class="string">&quot;tiff&quot;</span>) || mimeType.toLowerCase().contains(<span class="string">&quot;tif&quot;</span>))) &#123;</span><br><span class="line">                            List&lt;<span class="type">byte</span>[]&gt; tiffImages = <span class="literal">null</span>;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                tiffImages = tiffToImage(fileData);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">for</span> (<span class="type">byte</span>[] imageFileData : tiffImages) &#123;</span><br><span class="line">                                <span class="type">PDPage</span> <span class="variable">page</span> <span class="operator">=</span> createPDPageFromImage(batchPdf, imageFileData);</span><br><span class="line">                                <span class="keyword">if</span> (page != <span class="literal">null</span>) &#123;</span><br><span class="line">                                    batchPdf.addPage(page);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> batchPdf;</span><br><span class="line">                &#125;, executorService);</span><br><span class="line"></span><br><span class="line">                futures.add(future);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            CompletableFuture&lt;Void&gt; allFutures = CompletableFuture.allOf(futures.toArray(<span class="keyword">new</span> <span class="title class_">CompletableFuture</span>[<span class="number">0</span>]));</span><br><span class="line">            allFutures.join();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 构建最终的有序 PDF 文档</span></span><br><span class="line">            <span class="comment">// 构建最终的有序 PDF 文档</span></span><br><span class="line">            <span class="type">PDDocument</span> <span class="variable">finalPdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PDDocument</span>();</span><br><span class="line">            <span class="type">PDFMergerUtility</span> <span class="variable">merger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PDFMergerUtility</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (CompletableFuture&lt;PDDocument&gt; future : futures) &#123;</span><br><span class="line">                <span class="type">PDDocument</span> <span class="variable">batchPdf</span> <span class="operator">=</span> future.join();</span><br><span class="line">                merger.appendDocument(finalPdf, batchPdf);</span><br><span class="line">                batchPdf.close();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            finalPdf.save(outputStream);</span><br><span class="line">            finalPdf.close();</span><br><span class="line"></span><br><span class="line">            executorService.shutdown();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> outputStream.toByteArray();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="压缩PDF工具类">压缩PDF工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PicUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] compressPictureForScale(String srcPath, <span class="type">long</span> desFileSize, <span class="type">double</span> accuracy) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(srcPath)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">File</span> <span class="variable">srcFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(srcPath);</span><br><span class="line">        <span class="keyword">if</span> (!srcFile.exists()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">formatName</span> <span class="operator">=</span> FilenameUtils.getExtension(srcPath);</span><br><span class="line">        BufferedImage image;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">srcFileSize</span> <span class="operator">=</span> srcFile.length();</span><br><span class="line">            System.out.println(<span class="string">&quot;源图片: &quot;</span> + srcPath + <span class="string">&quot;, 大小: &quot;</span> + srcFileSize / <span class="number">1024</span> + <span class="string">&quot;kb&quot;</span>);</span><br><span class="line"></span><br><span class="line">            image = Thumbnails.of(srcPath).scale(<span class="number">1f</span>).asBufferedImage();</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            compressPicCycle(image, desFileSize, accuracy, formatName, byteArrayOutputStream);</span><br><span class="line">            image.getGraphics().dispose();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;图片压缩完成!&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">byte</span>[] byteArray = byteArrayOutputStream.toByteArray();</span><br><span class="line">            System.out.println(<span class="string">&quot;源图片压缩后为: &quot;</span> + srcPath + <span class="string">&quot;, 大小: &quot;</span> + byteArray.length / <span class="number">1024</span> + <span class="string">&quot;kb&quot;</span>);</span><br><span class="line">            byteArrayOutputStream.close();</span><br><span class="line">            <span class="keyword">return</span> byteArray;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">compressPicCycle</span><span class="params">(BufferedImage desImage, <span class="type">long</span> desFileSize, <span class="type">double</span> accuracy, String formatName, ByteArrayOutputStream byteArrayOutputStream)</span> <span class="keyword">throws</span> IOException, IOException &#123;</span><br><span class="line">        byteArrayOutputStream.reset();</span><br><span class="line">        ImageIO.write(desImage, formatName, byteArrayOutputStream);</span><br><span class="line">        <span class="type">byte</span>[] byteArray = byteArrayOutputStream.toByteArray();</span><br><span class="line">        <span class="keyword">if</span> (byteArray.length / <span class="number">1024</span> &gt; desFileSize) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">srcWidth</span> <span class="operator">=</span> desImage.getWidth();</span><br><span class="line">            <span class="type">int</span> <span class="variable">srcHeight</span> <span class="operator">=</span> desImage.getHeight();</span><br><span class="line">            <span class="type">int</span> <span class="variable">destWidth</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(srcWidth).multiply(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(accuracy)).intValue();</span><br><span class="line">            <span class="type">int</span> <span class="variable">destHeight</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(srcHeight).multiply(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(accuracy)).intValue();</span><br><span class="line">            <span class="type">BufferedImage</span> <span class="variable">image</span> <span class="operator">=</span> Thumbnails.of(desImage).size(destWidth, destHeight).outputQuality(accuracy).asBufferedImage();</span><br><span class="line">            compressPicCycle(image, desFileSize, accuracy, formatName, byteArrayOutputStream);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="需引入依赖">需引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.coobird<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thumbnailator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.twelvemonkeys.imageio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>imageio-tiff<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.pdfbox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pdfbox<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.pdfbox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pdfbox-tools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tika<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tika-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itextpdf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>itext7-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>7.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 实用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pdf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>导出Excel将指定列加锁不可编辑</title>
      <link href="/posts/e6860ebf.html"/>
      <url>/posts/e6860ebf.html</url>
      
        <content type="html"><![CDATA[<h2 id="导出Excel将指定列加锁不可编辑">导出Excel将指定列加锁不可编辑</h2><p>最近写了一个需求，需要将Excel导出，但是有些列是不允许编辑的，所以需要将这些列加锁，不允许编辑，这里就记录一下</p><h3 id="首先将整个sheet页全部加锁">首先将整个sheet页全部加锁</h3><p>需要创建一个Handler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.irm.ai.sensitive.excel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Sheet;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.streaming.SXSSFSheet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.write.handler.SheetWriteHandler;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.write.metadata.holder.WriteSheetHolder;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.write.metadata.holder.WriteWorkbookHolder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 锁定Sheet页</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Eliauk</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2023/5/18 14:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LockSheetWriteHandler</span> <span class="keyword">implements</span> <span class="title class_">SheetWriteHandler</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeSheetCreate</span><span class="params">(WriteWorkbookHolder writeWorkbookHolder, WriteSheetHolder writeSheetHolder)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterSheetCreate</span><span class="params">(WriteWorkbookHolder writeWorkbookHolder, WriteSheetHolder writeSheetHolder)</span> &#123;</span><br><span class="line">        <span class="type">Sheet</span> <span class="variable">sheet</span> <span class="operator">=</span> writeSheetHolder.getSheet();</span><br><span class="line">        <span class="comment">//锁定工作簿，设置保护密码</span></span><br><span class="line">        sheet.protectSheet(String.valueOf(UUID.randomUUID()));</span><br><span class="line">        <span class="comment">// 锁定单元格不可选中(防止别人直接复制内容到其他excel修改)</span></span><br><span class="line">        ((SXSSFSheet) writeSheetHolder.getSheet()).lockSelectLockedCells(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="需要解锁的列，也就是允许编辑的列">需要解锁的列，也就是允许编辑的列</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.irm.ai.sensitive.excel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Cell;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.util.CellUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.annotation.ExcelProperty;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.metadata.Head;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.metadata.data.WriteCellData;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.write.handler.CellWriteHandler;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.write.metadata.holder.WriteSheetHolder;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.write.metadata.holder.WriteTableHolder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Eliauk</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2023/5/18 14:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CellHandler</span> <span class="keyword">implements</span> <span class="title class_">CellWriteHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将指定的要解锁的列放到set中</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HashSet&lt;String&gt; values = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">        Field[] fields = TriageResultsExcel.class.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            <span class="keyword">if</span> (field.isAnnotationPresent(ExcelProperty.class)) &#123;</span><br><span class="line">                <span class="type">ExcelProperty</span> <span class="variable">annotation</span> <span class="operator">=</span> field.getAnnotation(ExcelProperty.class);</span><br><span class="line">                <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> Arrays.toString(annotation.value());</span><br><span class="line">                <span class="keyword">if</span> (value.startsWith(<span class="string">&quot;[&quot;</span>) &amp;&amp; value.endsWith(<span class="string">&quot;]&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">substring</span> <span class="operator">=</span> value.substring(<span class="number">1</span>, value.length() - <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">&quot;文件唯一Id(请勿修改)&quot;</span>.equals(substring)) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    values.add(substring);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                values.add(value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCellDispose</span><span class="params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, List&lt;WriteCellData&lt;?&gt;&gt; cellDataList, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将需要解锁的列解锁</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">dataHead</span> <span class="operator">=</span> head.getHeadNameList().get(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (values.contains(dataHead)) &#123;</span><br><span class="line">            Map&lt;String, Object&gt; properties = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">            properties.put(CellUtil.LOCKED, <span class="literal">false</span>);</span><br><span class="line">            CellUtil.setCellStyleProperties(cell, properties);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 实用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EasyExcel </tag>
            
            <tag> POI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swagger刷新页面异常解决</title>
      <link href="/posts/10e6d135.html"/>
      <url>/posts/10e6d135.html</url>
      
        <content type="html"><![CDATA[<p>直接引入maven依赖即可解决</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.swagger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.swagger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-models<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异常记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优美的统一返回结果处理</title>
      <link href="/posts/5b3efee2.html"/>
      <url>/posts/5b3efee2.html</url>
      
        <content type="html"><![CDATA[<h2 id="优美的统一返回结果处理">优美的统一返回结果处理</h2><p>我们写项目一般都会自己写一个Result对象，然后去处理，但是有一个问题，逐渐的接口写多了之后</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220920205449418.png" alt="image-20220920205449418"></p><p>会发现每次都要写这个被Result包裹会很麻烦，这时候我们就可以考虑将他抽取出来，使用一个Handler去处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zang.blogz.result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.github.vampireachao.stream.core.optional.Op;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.MethodParameter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZVerify</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestControllerAdvice(basePackages = &quot;com.zang.blogz.controller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnimeResultHandler</span> <span class="keyword">implements</span> <span class="title class_">ResponseBodyAdvice</span>&lt;Object&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Whether this component supports the given controller method return type</span></span><br><span class="line"><span class="comment">     * and the selected &#123;<span class="doctag">@code</span> HttpMessageConverter&#125; type.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> returnType    the return type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> converterType the selected converter type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if &#123;<span class="doctag">@link</span> #beforeBodyWrite&#125; should be invoked;</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> false&#125; otherwise</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(MethodParameter returnType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> !(returnType.getParameterType().isAssignableFrom(Result.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Invoked after an &#123;<span class="doctag">@code</span> HttpMessageConverter&#125; is selected and just before</span></span><br><span class="line"><span class="comment">     * its write method is invoked.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> body                  the body to be written</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> returnType            the return type of the controller method</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> selectedContentType   the content type selected through content negotiation</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> selectedConverterType the converter type selected to write to the response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request               the current request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response              the current response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the body that was passed in or a modified (possibly new) instance</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">beforeBodyWrite</span><span class="params">(Object body, MethodParameter returnType, MediaType selectedContentType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; selectedConverterType, ServerHttpRequest request, ServerHttpResponse response)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Op.of(body).map(Result::ok).orElseGet(Result::ok);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这样只需要在controller层返回要返回的对象就好了，如果想要返回error可以抛出异常然后全局异常处理</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Result </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sa-Token整合OAuth2</title>
      <link href="/posts/148eb857.html"/>
      <url>/posts/148eb857.html</url>
      
        <content type="html"><![CDATA[<h1>Sa-Token整合OAuth2</h1><p>开源地址 <a href="https://gitee.com/ZVerify/zverify-blog">https://gitee.com/ZVerify/zverify-blog</a></p><h2 id="为什么要整合OAuth2">为什么要整合OAuth2</h2><p>有些时候我们自己写的网站注册过于繁琐需要每个用户花费时间去注册，所以我们可以添加各种第三方登录，方便网站的用户去登录。</p><h2 id="写之前思考一下">写之前思考一下</h2><p>我们先想一下我们在进行第三方登录的时候是怎样的一个步骤，首先第三方登录都需要遵守OAuth2的流程，这里我使用了授权码模式，对于其他三种授权模式请参考网络文章，因为我使用了授权码模式所以他的整体流程都是一样的，这时候我们可以考虑使用模板模式，然后我们可能需要整合多个第三方登录，因为要考虑到用户的体验性，如果你只写一个的话，用户可能没有这个账号，所以可能会造成体验性差。这时候我们就需要横向扩展所以我们可以使用策略模式和模板模式。</p><p>这里我就用Gitee登录作为例子来说一下</p><h2 id="整合Gitee第三方登录">整合Gitee第三方登录</h2><p><a href="https://gitee.com/api/v5/oauth_doc#/list-item-1%EF%BC%8CgiteeOauth%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3">https://gitee.com/api/v5/oauth_doc#/list-item-1，giteeOauth官方文档</a></p><p>这里的策略模式我就不讲解了，不懂的去看之前的文件上传，然后讲一下我所设计的模板，首先我们要要遵守Oauth2的授权码流程，首先前端通过访问网站拿到授权的code，然后回调我们后端的接口，此时只有code是变化的所以只需要接收到code，然后获取access_token ，拿到access_token之后我们可以去获取第三方用户信息，获取完用户信息要检查一下是否已经在我们数据库中存在了，如果存在的话就更新一下数据就放行就好了，如果没有当前用户的话就去保存一下再去更新登录信息就好啦。</p><h2 id="代码解析">代码解析</h2><h3 id="总登录方法">总登录方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;SaTokenInfo&gt; <span class="title function_">login</span><span class="params">(String data, LoginTypeEnum loginTypeEnum)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">    AtomicReference&lt;Result&lt;SaTokenInfo&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">AtomicReference</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 创建登录信息</span></span><br><span class="line">    <span class="type">SocialTokenDTO</span> <span class="variable">socialToken</span> <span class="operator">=</span> getSocialToken(data);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取用户ip信息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">ipAddress</span> <span class="operator">=</span> IpUtil.getIpAddress(request);</span><br><span class="line">    <span class="type">String</span> <span class="variable">ipSource</span> <span class="operator">=</span> IpUtil.getIpSource(ipAddress);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取第三方用户信息</span></span><br><span class="line">    <span class="type">SocialUserInfoDTO</span> <span class="variable">socialUserInfo</span> <span class="operator">=</span> getSocialUserInfo(socialToken);</span><br><span class="line">    <span class="comment">// 判断是否已经注册</span></span><br><span class="line">    Opp.of(userAuthService.getUserAuth(loginTypeEnum, socialUserInfo))</span><br><span class="line"></span><br><span class="line">            .ifPresent((user) -&gt; result.set(getUserDetail(user, ipAddress, ipSource, loginTypeEnum.getType())))</span><br><span class="line">            .orElseRun(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    result.set(saveUserDetail(socialToken, ipAddress, ipSource, loginTypeEnum.getType(), socialUserInfo));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="type">Object</span> <span class="variable">loginId</span> <span class="operator">=</span> result.get().getResult().getLoginId();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (StpUtil.isDisable(loginId)) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DisableLoginException</span>(loginTypeEnum.getDesc(), loginId, StpUtil.getDisableTime(loginId));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result.get();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取第三方登录token信息">获取第三方登录token信息</h3><p>这里对接的是gitee的登录所以是获取code然后调用gitee获取access_token的接口，通过clientId，redirectUri，clientSecret，和code</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> SocialTokenDTO <span class="title function_">getSocialToken</span><span class="params">(String data)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> String.format(SocialLoginConstant.OAUTH2_GITEE_CODE, giteeConfigProperties.getClientId(), giteeConfigProperties.getRedirectUri(), giteeConfigProperties.getClientSecret(), data);</span><br><span class="line"></span><br><span class="line">    <span class="type">CloseableHttpClient</span> <span class="variable">build</span> <span class="operator">=</span> HttpClientBuilder.create().build();</span><br><span class="line">    <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(url);</span><br><span class="line"></span><br><span class="line">    <span class="type">HttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> build.execute(httpPost);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> EntityUtils.toString(response.getEntity());</span><br><span class="line"></span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> JSON.parseObject(json);</span><br><span class="line">    <span class="type">String</span> <span class="variable">access_token</span> <span class="operator">=</span> jsonObject.getString(SocialLoginConstant.ACCESS_TOKEN);</span><br><span class="line">    <span class="keyword">return</span> SocialTokenDTO.builder().accessToken(access_token).openId(data).loginType(LoginTypeEnum.GITEE.getType()).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拿到access_token封装到对象中</p><h3 id="通过access-token获得用户信息">通过access_token获得用户信息</h3><p>然后通过access_token去访问gitee提供的通过access_token拿到用户信息的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> SocialUserInfoDTO <span class="title function_">getSocialUserInfo</span><span class="params">(SocialTokenDTO socialTokenDTO)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">urlUser</span> <span class="operator">=</span> String.format(SocialLoginConstant.OAUTH2_GITEE_USERINFO, socialTokenDTO.getAccessToken());</span><br><span class="line"></span><br><span class="line">    <span class="type">HttpClient</span> <span class="variable">httpClientUser</span> <span class="operator">=</span> HttpClientBuilder.create().build();</span><br><span class="line">    <span class="type">HttpGet</span> <span class="variable">httpPostUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(urlUser);</span><br><span class="line"></span><br><span class="line">    <span class="type">HttpResponse</span> <span class="variable">responseUser</span> <span class="operator">=</span> httpClientUser.execute(httpPostUser);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> EntityUtils.toString(responseUser.getEntity());</span><br><span class="line"></span><br><span class="line">    <span class="type">GiteeUserInfoDTO</span> <span class="variable">giteeUserInfoDTO</span> <span class="operator">=</span> JSONUtil.toBean(user, GiteeUserInfoDTO.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> SocialUserInfoDTO.builder()</span><br><span class="line">            .nickname(giteeUserInfoDTO.getName())</span><br><span class="line">            .avatar(giteeUserInfoDTO.getAvatarUrl())</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拿到用户信息之后可以进行封装并返回。</p><p>判断是否我们当前用户数据库中是否存在要登录的用户，我这里使用用户名和登录类型做了一下简单的判断，可以根据自己的需求进行更改。</p><p>如果可以从数据库中查询数据出来，我们就更新一下登录，如果没有查询出来就进行用户信息初始化进行保存数据库然后更新登录就好啦，这两个可以根据自己的需求和业务去改，我这里用了sa-token，就简单把代码放这了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取用户信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user      用户账号</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ipAddress ip地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ipSource  ip源</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> loginType 登录类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> SaTokenInfo&#125; 用户信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Result&lt;SaTokenInfo&gt; <span class="title function_">getUserDetail</span><span class="params">(UserAuth user, String ipAddress, String ipSource, Integer loginType)</span> &#123;</span><br><span class="line">    <span class="comment">// 更新登录信息</span></span><br><span class="line">    StpUtil.login(user.getUserInfoId(), SaLoginConfig</span><br><span class="line">            .setExtra(<span class="string">&quot;name&quot;</span>, user.getUsername())</span><br><span class="line">            .setExtra(<span class="string">&quot;id&quot;</span>, user.getUserInfoId())</span><br><span class="line">            .setExtra(<span class="string">&quot;ipAddress&quot;</span>, ipAddress)</span><br><span class="line">            .setExtra(<span class="string">&quot;ipSource&quot;</span>, ipSource)</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 返回信息</span></span><br><span class="line"></span><br><span class="line">    <span class="type">SaTokenInfo</span> <span class="variable">tokenInfo</span> <span class="operator">=</span> StpUtil.getTokenInfo();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Result.ok(ResultConstant.LoginMessage.LOGIN_SUCCESS, tokenInfo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增用户信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> socialToken token信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ipAddress   ip地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ipSource    ip源</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Result&lt;SaTokenInfo&gt;&#125; 用户信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Result&lt;SaTokenInfo&gt; <span class="title function_">saveUserDetail</span><span class="params">(SocialTokenDTO socialToken, String ipAddress, String ipSource, Integer loginType, SocialUserInfoDTO socialUserInfo)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存用户信息</span></span><br><span class="line">    <span class="type">UserInfo</span> <span class="variable">userInfo</span> <span class="operator">=</span> UserInfo.builder()</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            .nickname(socialUserInfo.getNickname())</span><br><span class="line">            .avatar(socialUserInfo.getAvatar())</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    userInfoService.save(userInfo);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存账号信息</span></span><br><span class="line">    <span class="type">UserAuth</span> <span class="variable">userAuth</span> <span class="operator">=</span> UserAuth.builder()</span><br><span class="line">            .userInfoId(userInfo.getId())</span><br><span class="line">            .username(userInfo.getNickname())</span><br><span class="line">            .password(socialToken.getAccessToken())</span><br><span class="line">            .loginType(loginType)</span><br><span class="line">            .lastLoginTime(LocalDateTime.now(ZoneId.of(ZoneEnum.SHANGHAI.getZone())))</span><br><span class="line">            .ipAddress(ipAddress)</span><br><span class="line">            .ipSource(ipSource)</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    userAuthService.save(userAuth);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定角色</span></span><br><span class="line">    <span class="type">UserRole</span> <span class="variable">userRole</span> <span class="operator">=</span> UserRole.builder()</span><br><span class="line">            .userId(userInfo.getId())</span><br><span class="line">            .roleId(RoleEnum.USER.getRoleId())</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    userRoleService.save(userRole);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新登录信息</span></span><br><span class="line">    StpUtil.login(userAuth.getUserInfoId(), SaLoginConfig</span><br><span class="line">            .setExtra(<span class="string">&quot;name&quot;</span>, userAuth.getUsername())</span><br><span class="line">            .setExtra(<span class="string">&quot;id&quot;</span>, userAuth.getUserInfoId())</span><br><span class="line">            .setExtra(<span class="string">&quot;ipAddress&quot;</span>, ipAddress)</span><br><span class="line">            .setExtra(<span class="string">&quot;ipSource&quot;</span>, ipSource)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="type">SaTokenInfo</span> <span class="variable">tokenInfo</span> <span class="operator">=</span> StpUtil.getTokenInfo();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Result.ok(ResultConstant.LoginMessage.LOGIN_SUCCESS, tokenInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 第三方登录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OAuth2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringSecurity鉴权源码</title>
      <link href="/posts/b43e2d04.html"/>
      <url>/posts/b43e2d04.html</url>
      
        <content type="html"><![CDATA[<p>SpringSecurity鉴权源码</p><p>之前写了一篇SpringSecurity的认证，下面接着来说一下鉴权对源码，SpringSecurity有一个专门对过滤器来进行鉴权FilterSecurityInterceptor，他是专门来进行鉴权对，下面来根据源码一点点看一下。</p><p>这次由于测试我们先写一下基本对数据，基本跟认证时候一样，不过要改一些配置</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220916151258174.png" alt="image-20220916151258174"></p><p>也就是我们对hello请求需要ADMIN这个角色才能通过访问，所以为了测试我把ADMIN角色都给每个用户</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220916151547734.png" alt="image-20220916151547734"></p><p>下面我们登陆之后把断点打到FilterSecurityInterceptor中看一下整体对流程</p><p>登陆就略过了，然后我们请求/hello接口</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220916152501997.png" alt="image-20220916152501997"></p><p>通过源码可以看到FilterSecurityInterceptor实现类Filter所以核心方法应该是doFilter()方法</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220916152552710.png" alt="image-20220916152552710"></p><p>调用了invoke方法</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220916152838721.png" alt="image-20220916152838721"></p><p>进来之后先判断一下isApplied()，这个方法其实就是看一下requert似不似等于null，并且request没有FILTER_APPLIED这个常量的Attribute，很明显返回false，所以就进入下一个if判断observeOncePerRequest这个属性默认为true所以我们会给上个if判断的那个FILTER_APPLIED设置一个true，接下来就是进入我们的beforeInvocation()方法，这个是super调用的，我们去父类AbstractSecurityInterceptor看一眼</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220916153925832.png" alt="image-20220916153925832"></p><p>这个方法其实就很重要了</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220916170128400.png" alt="image-20220916170128400"></p><p>调用本类的SecurityMetadataSource，也就是继承抽象类的FilterSecurityInterceptor的这个方法也就是</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220916170948014.png" alt="image-20220916170948014">FilterInvocationSecurityMetadataSource类下的默认实现类DefaultFilterInvocationSecurityMetadataSource的getAttributes方法</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220916171243212.png" alt="image-20220916171243212"></p><p>这个方法里边有个requestMap其实就是我们配置对什么接口需要什么权限，key是请求路径，value是所需权限然后挨个比对，找到我们当前对请求之后就返回他所需要对权限集合，</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220916172041224.png" alt="image-20220916172041224"></p><p>很明显都不成立，进去下边的authenticateIfRequired();这个方法就是进入ProviderManager进行一下认证,然后出来之后就是进行鉴权attemptAuthorization，也就是AccessDecisionManager接口对默认实现AffirmativeBased类的decide方法，这个方法就是一个投票器，会轮训所有配置的AccessDecisionVoter并在任何AccessDecisionVoter投赞成票时授予访问权限。仅当有拒绝投票且没有赞成票时才拒绝访问。</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220916173021612.png" alt="image-20220916173021612"></p><h2 id="动态鉴权">动态鉴权</h2><p>这就是基本的鉴权了，现在问题来了，难到我们每次所有对接口都要去配置文件里边配置吗，很明显笨死了就，但是我们该如何去定制化对设置动态鉴权呢。前面的讲解应该很清楚了，关键是一个getAttributes()方法获得当前请求路径所需要对角色，一个是accessDecisionManager.decide()的投票，我们的数据一般都是存在数据库中进行动态的权限，这里我简单的说一下要怎么去配置动态权限</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220916190131154.png" alt="image-20220916190131154"></p><p>我们去自定义两个类</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220916190221563.png" alt="image-20220916190221563"></p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220916190252256.png" alt="image-20220916190252256"></p><p>可以根据自己的逻辑自行修改</p>]]></content>
      
      
      <categories>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringSecurity认证流程</title>
      <link href="/posts/7dde2051.html"/>
      <url>/posts/7dde2051.html</url>
      
        <content type="html"><![CDATA[<h2 id="SpringSecurity认证流程">SpringSecurity认证流程</h2><p>最近几天比较闲把SpringSecurity的源码看了一下，这里先讲一下认证的流程，debug级别的讲解</p><blockquote><p>注意此篇文章没有角色和鉴权，后续看完源码会发，还有如果不知道AuthenticationManager和ProviderManager还有AuthenticationProvider，可能有些地方会看不懂，后续会单独出一篇文章进行讲解</p></blockquote><p>首先准备，创建一个springboot项目，然后引入必要的一些依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.vampireachao<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>stream-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--freemarker模板--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.vampireachao<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>stream-plugin-mybatis-plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>数据库数据，因为我懒的创建一个新表了，所以这里就使用了之前的表结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for tb_user_role</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `tb_user_role`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_user_role`  (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `user_id` <span class="type">int</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">  `role_id` <span class="type">int</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;角色id&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">612</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">DYNAMIC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of tb_user_role</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user_role` <span class="keyword">VALUES</span> (<span class="number">578</span>, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user_role` <span class="keyword">VALUES</span> (<span class="number">579</span>, <span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user_role` <span class="keyword">VALUES</span> (<span class="number">580</span>, <span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user_role` <span class="keyword">VALUES</span> (<span class="number">581</span>, <span class="number">5</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user_role` <span class="keyword">VALUES</span> (<span class="number">582</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user_role` <span class="keyword">VALUES</span> (<span class="number">583</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user_role` <span class="keyword">VALUES</span> (<span class="number">584</span>, <span class="number">6</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user_role` <span class="keyword">VALUES</span> (<span class="number">585</span>, <span class="number">7</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user_role` <span class="keyword">VALUES</span> (<span class="number">586</span>, <span class="number">8</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user_role` <span class="keyword">VALUES</span> (<span class="number">587</span>, <span class="number">9</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user_role` <span class="keyword">VALUES</span> (<span class="number">589</span>, <span class="number">11</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user_role` <span class="keyword">VALUES</span> (<span class="number">590</span>, <span class="number">12</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user_role` <span class="keyword">VALUES</span> (<span class="number">591</span>, <span class="number">13</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user_role` <span class="keyword">VALUES</span> (<span class="number">592</span>, <span class="number">14</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user_role` <span class="keyword">VALUES</span> (<span class="number">593</span>, <span class="number">15</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user_role` <span class="keyword">VALUES</span> (<span class="number">595</span>, <span class="number">16</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user_role` <span class="keyword">VALUES</span> (<span class="number">597</span>, <span class="number">17</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user_role` <span class="keyword">VALUES</span> (<span class="number">598</span>, <span class="number">18</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user_role` <span class="keyword">VALUES</span> (<span class="number">599</span>, <span class="number">19</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user_role` <span class="keyword">VALUES</span> (<span class="number">600</span>, <span class="number">10</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user_role` <span class="keyword">VALUES</span> (<span class="number">601</span>, <span class="number">10</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user_role` <span class="keyword">VALUES</span> (<span class="number">602</span>, <span class="number">20</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user_role` <span class="keyword">VALUES</span> (<span class="number">603</span>, <span class="number">21</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user_role` <span class="keyword">VALUES</span> (<span class="number">604</span>, <span class="number">22</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user_role` <span class="keyword">VALUES</span> (<span class="number">605</span>, <span class="number">23</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user_role` <span class="keyword">VALUES</span> (<span class="number">606</span>, <span class="number">24</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user_role` <span class="keyword">VALUES</span> (<span class="number">611</span>, <span class="number">33</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for tb_user_auth</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `tb_user_auth`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_user_auth`  (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `user_info_id` <span class="type">int</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户信息id&#x27;</span>,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">50</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  `secret_key` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;秘钥&#x27;</span>,</span><br><span class="line">  `login_type` tinyint(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">1</span> COMMENT <span class="string">&#x27;登录类型&#x27;</span>,</span><br><span class="line">  `ip_address` <span class="type">varchar</span>(<span class="number">50</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户登录ip&#x27;</span>,</span><br><span class="line">  `ip_source` <span class="type">varchar</span>(<span class="number">50</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;ip来源&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  `last_login_time` datetime <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;上次登录时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  <span class="keyword">UNIQUE</span> INDEX `username`(`username` <span class="keyword">ASC</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">30</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">DYNAMIC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for tb_role_resource</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `tb_role_resource`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_role_resource`  (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `role_id` <span class="type">int</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;角色id&#x27;</span>,</span><br><span class="line">  `resource_id` <span class="type">int</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;权限id&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">4373</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">DYNAMIC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of tb_role_resource</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4011</span>, <span class="number">2</span>, <span class="number">254</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4012</span>, <span class="number">2</span>, <span class="number">267</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4013</span>, <span class="number">2</span>, <span class="number">269</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4014</span>, <span class="number">2</span>, <span class="number">270</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4015</span>, <span class="number">2</span>, <span class="number">257</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4016</span>, <span class="number">2</span>, <span class="number">258</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4164</span>, <span class="number">3</span>, <span class="number">192</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4165</span>, <span class="number">3</span>, <span class="number">195</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4166</span>, <span class="number">3</span>, <span class="number">183</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4167</span>, <span class="number">3</span>, <span class="number">246</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4168</span>, <span class="number">3</span>, <span class="number">199</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4169</span>, <span class="number">3</span>, <span class="number">185</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4170</span>, <span class="number">3</span>, <span class="number">191</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4171</span>, <span class="number">3</span>, <span class="number">254</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4172</span>, <span class="number">3</span>, <span class="number">208</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4173</span>, <span class="number">3</span>, <span class="number">234</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4174</span>, <span class="number">3</span>, <span class="number">237</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4175</span>, <span class="number">3</span>, <span class="number">213</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4176</span>, <span class="number">3</span>, <span class="number">241</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4177</span>, <span class="number">3</span>, <span class="number">239</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4178</span>, <span class="number">3</span>, <span class="number">276</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4179</span>, <span class="number">3</span>, <span class="number">205</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4180</span>, <span class="number">3</span>, <span class="number">218</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4181</span>, <span class="number">3</span>, <span class="number">223</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4182</span>, <span class="number">3</span>, <span class="number">202</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4183</span>, <span class="number">3</span>, <span class="number">230</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4184</span>, <span class="number">3</span>, <span class="number">238</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4185</span>, <span class="number">3</span>, <span class="number">232</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4186</span>, <span class="number">3</span>, <span class="number">243</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4187</span>, <span class="number">3</span>, <span class="number">196</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4188</span>, <span class="number">3</span>, <span class="number">257</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4189</span>, <span class="number">3</span>, <span class="number">258</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4190</span>, <span class="number">3</span>, <span class="number">225</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4191</span>, <span class="number">3</span>, <span class="number">231</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4192</span>, <span class="number">3</span>, <span class="number">210</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4282</span>, <span class="number">1</span>, <span class="number">165</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4283</span>, <span class="number">1</span>, <span class="number">192</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4284</span>, <span class="number">1</span>, <span class="number">193</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4285</span>, <span class="number">1</span>, <span class="number">194</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4286</span>, <span class="number">1</span>, <span class="number">195</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4287</span>, <span class="number">1</span>, <span class="number">166</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4288</span>, <span class="number">1</span>, <span class="number">183</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4289</span>, <span class="number">1</span>, <span class="number">184</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4290</span>, <span class="number">1</span>, <span class="number">246</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4291</span>, <span class="number">1</span>, <span class="number">247</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4292</span>, <span class="number">1</span>, <span class="number">167</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4293</span>, <span class="number">1</span>, <span class="number">199</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4294</span>, <span class="number">1</span>, <span class="number">200</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4295</span>, <span class="number">1</span>, <span class="number">201</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4296</span>, <span class="number">1</span>, <span class="number">168</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4297</span>, <span class="number">1</span>, <span class="number">185</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4298</span>, <span class="number">1</span>, <span class="number">186</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4299</span>, <span class="number">1</span>, <span class="number">187</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4300</span>, <span class="number">1</span>, <span class="number">188</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4301</span>, <span class="number">1</span>, <span class="number">189</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4302</span>, <span class="number">1</span>, <span class="number">190</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4303</span>, <span class="number">1</span>, <span class="number">191</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4304</span>, <span class="number">1</span>, <span class="number">254</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4305</span>, <span class="number">1</span>, <span class="number">169</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4306</span>, <span class="number">1</span>, <span class="number">208</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4307</span>, <span class="number">1</span>, <span class="number">209</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4308</span>, <span class="number">1</span>, <span class="number">170</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4309</span>, <span class="number">1</span>, <span class="number">234</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4310</span>, <span class="number">1</span>, <span class="number">235</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4311</span>, <span class="number">1</span>, <span class="number">236</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4312</span>, <span class="number">1</span>, <span class="number">237</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4313</span>, <span class="number">1</span>, <span class="number">171</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4314</span>, <span class="number">1</span>, <span class="number">213</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4315</span>, <span class="number">1</span>, <span class="number">214</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4316</span>, <span class="number">1</span>, <span class="number">215</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4317</span>, <span class="number">1</span>, <span class="number">216</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4318</span>, <span class="number">1</span>, <span class="number">217</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4319</span>, <span class="number">1</span>, <span class="number">224</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4320</span>, <span class="number">1</span>, <span class="number">172</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4321</span>, <span class="number">1</span>, <span class="number">240</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4322</span>, <span class="number">1</span>, <span class="number">241</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4323</span>, <span class="number">1</span>, <span class="number">244</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4324</span>, <span class="number">1</span>, <span class="number">245</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4325</span>, <span class="number">1</span>, <span class="number">267</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4326</span>, <span class="number">1</span>, <span class="number">269</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4327</span>, <span class="number">1</span>, <span class="number">270</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4328</span>, <span class="number">1</span>, <span class="number">173</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4329</span>, <span class="number">1</span>, <span class="number">239</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4330</span>, <span class="number">1</span>, <span class="number">242</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4331</span>, <span class="number">1</span>, <span class="number">276</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4332</span>, <span class="number">1</span>, <span class="number">174</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4333</span>, <span class="number">1</span>, <span class="number">205</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4334</span>, <span class="number">1</span>, <span class="number">206</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4335</span>, <span class="number">1</span>, <span class="number">207</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4336</span>, <span class="number">1</span>, <span class="number">175</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4337</span>, <span class="number">1</span>, <span class="number">218</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4338</span>, <span class="number">1</span>, <span class="number">219</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4339</span>, <span class="number">1</span>, <span class="number">220</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4340</span>, <span class="number">1</span>, <span class="number">221</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4341</span>, <span class="number">1</span>, <span class="number">222</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4342</span>, <span class="number">1</span>, <span class="number">223</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4343</span>, <span class="number">1</span>, <span class="number">176</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4344</span>, <span class="number">1</span>, <span class="number">202</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4345</span>, <span class="number">1</span>, <span class="number">203</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4346</span>, <span class="number">1</span>, <span class="number">204</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4347</span>, <span class="number">1</span>, <span class="number">230</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4348</span>, <span class="number">1</span>, <span class="number">238</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4349</span>, <span class="number">1</span>, <span class="number">177</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4350</span>, <span class="number">1</span>, <span class="number">229</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4351</span>, <span class="number">1</span>, <span class="number">232</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4352</span>, <span class="number">1</span>, <span class="number">233</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4353</span>, <span class="number">1</span>, <span class="number">243</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4354</span>, <span class="number">1</span>, <span class="number">178</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4355</span>, <span class="number">1</span>, <span class="number">196</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4356</span>, <span class="number">1</span>, <span class="number">197</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4357</span>, <span class="number">1</span>, <span class="number">198</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4358</span>, <span class="number">1</span>, <span class="number">257</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4359</span>, <span class="number">1</span>, <span class="number">258</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4360</span>, <span class="number">1</span>, <span class="number">179</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4361</span>, <span class="number">1</span>, <span class="number">225</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4362</span>, <span class="number">1</span>, <span class="number">226</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4363</span>, <span class="number">1</span>, <span class="number">227</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4364</span>, <span class="number">1</span>, <span class="number">228</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4365</span>, <span class="number">1</span>, <span class="number">231</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4366</span>, <span class="number">1</span>, <span class="number">180</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4367</span>, <span class="number">1</span>, <span class="number">210</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4368</span>, <span class="number">1</span>, <span class="number">211</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4369</span>, <span class="number">1</span>, <span class="number">212</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role_resource` <span class="keyword">VALUES</span> (<span class="number">4370</span>, <span class="number">1</span>, <span class="number">277</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for tb_role</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `tb_role`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_role`  (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键id&#x27;</span>,</span><br><span class="line">  `role_name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;角色名&#x27;</span>,</span><br><span class="line">  `role_label` <span class="type">varchar</span>(<span class="number">50</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;角色描述&#x27;</span>,</span><br><span class="line">  `is_disable` tinyint(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;是否禁用  0否 1是&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">5</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">DYNAMIC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of tb_role</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;管理员&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;2021-03-22 14:10:21&#x27;</span>, <span class="string">&#x27;2022-01-09 08:10:20&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;用户&#x27;</span>, <span class="string">&#x27;user&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;2021-03-22 14:25:25&#x27;</span>, <span class="string">&#x27;2021-08-11 21:12:21&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role` <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;测试&#x27;</span>, <span class="string">&#x27;test&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;2021-03-22 14:42:23&#x27;</span>, <span class="string">&#x27;2021-08-24 11:25:39&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_role` <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;test&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;2022-07-22 15:41:14&#x27;</span>, <span class="string">&#x27;2022-07-22 15:41:17&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后使用mp自动生成一下entity，controller，service，mapper层，下面我就从源码的角度一步一步的来讲解一下整个认证的流程，注意这里需要有一定的springsecurity基础。</p><h2 id="配置一下基本环境">配置一下基本环境</h2><p>首先我写了一些基本的配置然后从头走一遍认证流程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zang.securitysourcecodelearning.config.security;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zang.securitysourcecodelearning.entity.UserAuth;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.AuthenticationProvider;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.dao.DaoAuthenticationProvider;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.NoOpPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ZVerify</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO SpringSecurity配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DateTime</span>: 2022/9/14 17:07</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZVerifySpringSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ZVerifyUserDetailService zVerifyUserDetailService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    ZVerifyFilter <span class="title function_">zVerifyFilter</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ZVerifyFilter</span> <span class="variable">zVerifyFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZVerifyFilter</span>();</span><br><span class="line">        <span class="comment">// 设置登录的路径</span></span><br><span class="line">        zVerifyFilter.setFilterProcessesUrl(<span class="string">&quot;/doLogin&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置表单登录的key</span></span><br><span class="line">        zVerifyFilter.setPasswordParameter(<span class="string">&quot;pwd&quot;</span>);</span><br><span class="line">        zVerifyFilter.setUsernameParameter(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置自定义的AuthenticationManager</span></span><br><span class="line">        zVerifyFilter.setAuthenticationManager(authenticationManagerBean());</span><br><span class="line">        <span class="comment">// 登录成功之后的处理器</span></span><br><span class="line">        zVerifyFilter.setAuthenticationSuccessHandler((re,resp,au) -&gt;&#123;</span><br><span class="line">            <span class="type">UserAuth</span> <span class="variable">details</span> <span class="operator">=</span> (UserAuth) au.getPrincipal();</span><br><span class="line">            System.out.println(details.getUsername());</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> zVerifyFilter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">// 为了将我的AuthenticationManager放到容器中</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span>&#123;</span><br><span class="line">        <span class="comment">// 创建者创建一个AuthenticationManager，并且将我自定义的authenticationProvider放入其中，这就表明不适用默认的authenticationProvider</span></span><br><span class="line">        auth.authenticationProvider(dao());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationProvider <span class="title function_">dao</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DaoAuthenticationProvider</span> <span class="variable">provider</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DaoAuthenticationProvider</span>();</span><br><span class="line">        <span class="comment">// 自定义获取用户信息逻辑</span></span><br><span class="line">        provider.setUserDetailsService(zVerifyUserDetailService);</span><br><span class="line">        <span class="comment">// 自定义密码加密</span></span><br><span class="line">        provider.setPasswordEncoder(getNoOpPasswordEncoder());</span><br><span class="line">        <span class="keyword">return</span> provider;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">getNoOpPasswordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> NoOpPasswordEncoder.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.authorizeRequests().anyRequest().authenticated().and().csrf().disable().formLogin();</span><br><span class="line">        <span class="comment">// 这个东西就是使用我自己创建的filter去过滤器链中替换掉UsernamePasswordAuthenticationFilter这个过滤器</span></span><br><span class="line">        http.addFilterAt(zVerifyFilter(), UsernamePasswordAuthenticationFilter.class);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="启动项目">启动项目</h2><p>在我们进行登录的时候因为我们已经对UsernamePasswordAuthenticationFilter这个过滤器进行了替代，所以会进入我自定义的ZVerifyFilter中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZVerifyFilter</span> <span class="keyword">extends</span> <span class="title class_">UsernamePasswordAuthenticationFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Authentication <span class="title function_">attemptAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        <span class="comment">// 判断请求方式是否是POST</span></span><br><span class="line">        <span class="keyword">if</span> (!request.getMethod().equals(<span class="string">&quot;POST&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AuthenticationServiceException</span>(<span class="string">&quot;Authentication method not supported: &quot;</span> + request.getMethod());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 拿到表单信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> request.getParameter(getUsernameParameter());</span><br><span class="line">        <span class="type">String</span> <span class="variable">passWord</span> <span class="operator">=</span> request.getParameter(getPasswordParameter()) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 封装成UsernamePasswordAuthenticationToken</span></span><br><span class="line">        <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authRequest</span> <span class="operator">=</span> UsernamePasswordAuthenticationToken.unauthenticated(userName,</span><br><span class="line">                passWord);</span><br><span class="line">        setDetails(request, authRequest);</span><br><span class="line">        <span class="comment">// 进行认证</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getAuthenticationManager().authenticate(authRequest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后一句话会拿到当前的AuthenticationManager接口然后调用其实现类的authenticate()方法，但是AuthenticationManager接口真正的实现类只有ProviderManager，所以此时也就是调用ProviderManager的authenticate()方法此时会进入for循环然后进行判断</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220914200622864.png" alt="image-20220914200622864"></p><p>此时会退出当前的循环，因为是第一次进入所以size是1，退出本次循环之后就退出for循环了，进入下面的if判断</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220914200818752.png" alt="image-20220914200818752"></p><p>此时</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220914200854595.png" alt="image-20220914200854595"></p><p>这个parent其实还是一个AuthenticationManager，所以就又进入了这个方法，这次不同的是<img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220914201051167.png" alt="image-20220914201051167"></p><h3 id="获取完整用户信息">获取完整用户信息</h3><p>此时的AuthenticationProvider是我们自定义的DaoAuthenticationProvider</p><p>很明显这次if条件不成立了</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220914201246815.png" alt="image-20220914201246815"></p><p>然后会进入DaoAuthenticationProvider的authenticate()，首先进入的是抽象类AbstractUserDetailsAuthenticationProvider的authenticate()方法<img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220914201507925.png" alt="image-20220914201507925"></p><p>首先取出userName，然后判断缓存中存不存在，不存在的话进入下边的方法</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220914202000598.png" alt="image-20220914202000598"></p><p>注意当前的类是DaoAuthenticationProvider，所以会进入DaoAuthenticationProvider的retrieveUser()方法，</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220914202127093.png" alt="image-20220914202127093"></p><p>这里会看到获取用户信息的方法，所以我想要自定义的实现获取用户信息，只需要创建一个类然后实现UserDetailsService方法，并且设置到我的DaoAuthenticationProvider，这样就可以使用我们的自定义逻辑</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220914204148284.png" alt="image-20220914204148284"></p><p>拿到用户信息此时UserDetails对象已经是我们从数据库中查出来的UserAuth对象了<img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220914204316759.png" alt="image-20220914204316759"></p><h3 id="用户信息校验">用户信息校验</h3><p>拿到user之后会进行一些验证</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220914204414887.png" alt="image-20220914204414887"></p><p>现在看很明显</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220914204445987.png" alt="image-20220914204445987"></p><p>两个进行用户信息校验的都是使用的默认的，此时有了上面的经验我们如果不想用他默认的我们就可以自己创建一个Checker实现类，然后实现UserDetailsChecker接口，并且设置到我们的DaoAuthenticationProvider中就可以了<img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220914204753476.png" alt="image-20220914204753476"></p><h3 id="密码加密-自定义">密码加密(自定义)</h3><p>所以这里校验信息就不去看了直接进入additionalAuthenticationChecks()方法，这个方法是用来进行密码判断的，同样道理，因为我在配置类中指定了密码加密的方式<img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220914205343252.png" alt="image-20220914205343252"></p><p>所以这个方法调用的是我们名文密码中的matches()</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220914205421915.png" alt="image-20220914205421915"></p><p>直接进行判断</p><p>结束之后验证通过，然后还是会进行一个校验，这两个校验一个是看是否被锁定，以及各种信息，后面这个是判断密码是否过期，因为我们可能会有指定场景，写一个定时任务，在一个月之后设置为密码过期啥的。</p><h3 id="密码加密（默认）">密码加密（默认）</h3><p>因为我使用了自定义的密码加密，所以这里就带大家走一遍源码就不进行debug了</p><p>在DaoAuthenticationProvider中有这样一段话<img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220914211905574.png" alt="image-20220914211905574"></p><p>这是一个工厂<img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220914212000660.png" alt="image-20220914212000660"></p><p>会创建一个DelegatingPasswordEncoder将默认的bcrypt和map放入其中，很明显这是策略模式</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220914212153792.png" alt="image-20220914212153792"></p><p>在这里会先去调用extractId，将我们数据库中的密码拿出来看看有没有{xxx}xxxx这种类型的然后解析，解析出来从map中拿，如果没有的话就抛出异常，有的话就使用其对应的加密进行密码验证</p><h3 id="密码加密升级">密码加密升级</h3><p>最后这个<img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220914205837267.png" alt="image-20220914205837267"></p><p>createSuccessAuthentication()方法也很重要<img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220914210024831.png" alt="image-20220914210024831"></p><p>首先会判断我们有没有自己实现密码升级的服务，如果实现了，并且是默认的密码加密的话才会进行密码升级服务，这个也是我们自己可以去定义</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220914210347579.png" alt="image-20220914210347579"></p><p>但是别忘记要同时满足加密方式也可以进行密码升级服务哦，缺一不可</p><h3 id="认证成功发布事件">认证成功发布事件</h3><p>然后认证成功之后会发布一个事件也就是登录成功回调方法</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220914210643807.png" alt="image-20220914210643807"></p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220914210656012.png" alt="image-20220914210656012"></p><p>我们只需要在filter中设置一下就好，将其默认的覆盖掉就可以使用我们自己的了。</p><blockquote><p>此时整个用户认证就结束了，可以说只要把源码搞清楚定制性是非常高的了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-websocket实现聊天室功能</title>
      <link href="/posts/9748f1b4.html"/>
      <url>/posts/9748f1b4.html</url>
      
        <content type="html"><![CDATA[<h1>spring-websocket实现聊天室功能</h1><p>最近看到有些人的博客中有聊天室的功能所以我也在我博客中写了一个，不过他们用的是java原生的，这里我使用了spring封装的spring-websocket</p><h2 id="Spring-WebSocket配置">Spring-WebSocket配置</h2><p>我们第一步要先配置一下websocket 的基本信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ZVerify</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO WebSocket相关配置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DateTime</span>: 2022/9/6 14:21</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocket</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZVerifyWebSocketConfig</span> <span class="keyword">implements</span> <span class="title class_">WebSocketConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册 WebSocket 处理器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerWebSocketHandlers</span><span class="params">(WebSocketHandlerRegistry webSocketHandlerRegistry)</span> &#123;</span><br><span class="line">        webSocketHandlerRegistry</span><br><span class="line">                <span class="comment">// WebSocket 连接处理器</span></span><br><span class="line">                .addHandler(<span class="keyword">new</span> <span class="title class_">ZVerifyWebSocketHandler</span>(), <span class="string">&quot;/ws-connect&quot;</span>)</span><br><span class="line">                <span class="comment">// WebSocket 拦截器</span></span><br><span class="line">                .addInterceptors(<span class="keyword">new</span> <span class="title class_">ZVerifyWebSocketInterceptor</span>())</span><br><span class="line">                <span class="comment">// 允许跨域</span></span><br><span class="line">                .setAllowedOrigins(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其中连接处理器和拦截器是我们自己定义的</p></blockquote><p><code>&quot;/ws-connect&quot;</code>就是我们的路径</p><p>因为想要建立连接首先要通过我们的拦截器所以按照逻辑来写拦截器</p><h2 id="前置拦截器">前置拦截器</h2><p>这个前置拦截器一般我们会做安全的校验和一系列处理，这里我就简单了写了一下，这里要做安全校验是因为我们定义的websocket并没有托管给我所使用的安全框架去验证用户，所以在这里要简单校验一下，</p><p>前置处理器的创建要去实现HandshakeInterceptor接口然后重写beforeHandshake，afterHandshake，两个方法，beforeHandshake是用做握手前置校验的，afterHandshake是做握手后置校验的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ZVerify</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO WebSocket 前置拦截器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DateTime</span>: 2022/9/6 14:19</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZVerifyWebSocketInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandshakeInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">// 握手之前触发 (return true 才会握手成功 )</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">beforeHandshake</span><span class="params">(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler handler,</span></span><br><span class="line"><span class="params">                                   Map&lt;String, Object&gt; attr)</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;---- 握手之前触发 &quot;</span> + StpUtil.getTokenValue());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 未登录情况下拒绝握手</span></span><br><span class="line">        <span class="keyword">if</span>(!StpUtil.isLogin()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;---- 未授权客户端，连接失败&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 标记 userId，握手成功</span></span><br><span class="line">        attr.put(<span class="string">&quot;userId&quot;</span>, StpUtil.getLoginIdAsLong());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 握手之后触发</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterHandshake</span><span class="params">(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler,</span></span><br><span class="line"><span class="params">                               Exception exception)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---- 握手之后触发 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="连接处理器">连接处理器</h2><p>这里是我们的主要处理器，基本上所有重要业务都在这里</p><p>首先创建一个自己的ZVerifyWebSocketHandler然后再去继承TextWebSocketHandler我们可以定制的去实现里边的方法，这里我就按照我自己的博客需求进行重写了，如果需要可以自行扩展。</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220908205224501.png" alt="image-20220908205224501"></p><h3 id="重要属性">重要属性</h3><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220908205537147.png" alt="image-20220908205537147"></p><p>这个是用来存放我们当前在线的人的信息的，用于广播和人数统计还有私信</p><h3 id="进入聊天成功的逻辑">进入聊天成功的逻辑</h3><p>首先重写afterConnectionEstablished()方法这个方法是在连接开启的时候触发的，也就是我握手成功之后，因为是聊天室所以功能防QQ做了，在登录之后会看到当前博客群聊中的在线人数，然后加载聊天记录。这一些简单的过程</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220908211059504.png" alt="image-20220908211059504"></p><ol start="0"><li><p>首先要从session中取到当前连接的用户id，这里我要解释一下这个userId是从哪来的，是在我的握手之前触发的那个beforeHandshake()中写的项目中用的安全框架为Sa-Token，不熟悉的请自行查阅，拿到用户id之后将当前用户的webSocketSession存放到map中</p></li><li><p>更新当前的在线人数，这个处理是比较简单的<img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220908212420367.png" alt="image-20220908212420367"></p><p>就是获取一下map的大小就是当前在线人数，然后发送广播消息，这里说一下广播消息其实很简单就是将map中的webSocketSession都取出来然后挨个发送消息注意这里要加一个锁因为不加锁的话可能会导致消息前后异常<img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220908213052294.png" alt=""></p></li><li><p>加载历史记录也很平常就是将我们聊天记录存到数据库中，然后将其xxx小时的消息加载出来，然后想当前登录用户发送这里我使用的是历史12小时<img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220908213511483.png" alt="image-20220908213511483"></p></li></ol><h3 id="收到消息之后处理逻辑">收到消息之后处理逻辑</h3><p>处理收到消息逻辑是handleTextMessage()方法里边有两个参数一个是发送消息的session，一个是包装的消息对象TextMessage，首先先带大家看一下TextMessage是个什么东西，我们在通过webSocketSession发送消息的时候可以发送多种对象<img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220908214150426.png" alt="image-20220908214150426"></p><p>这里我使用了TextMessage，所以就讲一下这里我们在创建TextMessage对象的时候传入参数通过源码可以知道我可以传入一个可读的char值序列然后会将其转换成字符串调用抽象类的构造方法<img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220908214411389.png" alt="image-20220908214411389"></p><p>第二个参数的意义是这是否是作为一系列部分消息发送的消息的最后一部分。到这里可以知道我们发送的消息就是抽象类AbstractWebSocketMessage中的payload属性，所以在这里我买可以通过这个入参拿到数据，然后根据其数据的第一个参数，也就是当前的类型去进行对应的逻辑处理，这里就没什么难点了</p><h3 id="连接关闭">连接关闭</h3><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220908214928823.png" alt="image-20220908214928823"></p><p>连接关闭的时候讲当前的用户session从map中remove掉就好如需扩展请自己进行逻辑的修改</p><h3 id="源码">源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zang.blogz.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DateUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONUtil;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.zang.blogz.dto.ChatRecordDTO;</span><br><span class="line"><span class="keyword">import</span> com.zang.blogz.dto.RecallMessageDTO;</span><br><span class="line"><span class="keyword">import</span> com.zang.blogz.dto.WebsocketMessageDTO;</span><br><span class="line"><span class="keyword">import</span> com.zang.blogz.enmus.ChatTypeEnum;</span><br><span class="line"><span class="keyword">import</span> com.zang.blogz.enmus.FilePathEnum;</span><br><span class="line"><span class="keyword">import</span> com.zang.blogz.entity.ChatRecord;</span><br><span class="line"><span class="keyword">import</span> com.zang.blogz.entity.UserInfo;</span><br><span class="line"><span class="keyword">import</span> com.zang.blogz.model.input.ro.VoiceRO;</span><br><span class="line"><span class="keyword">import</span> com.zang.blogz.service.ChatRecordService;</span><br><span class="line"><span class="keyword">import</span> com.zang.blogz.service.UserInfoService;</span><br><span class="line"><span class="keyword">import</span> com.zang.blogz.steam.optional.Opp;</span><br><span class="line"><span class="keyword">import</span> com.zang.blogz.strategy.context.UploadStrategyContext;</span><br><span class="line"><span class="keyword">import</span> com.zang.blogz.utils.BeanCopyUtils;</span><br><span class="line"><span class="keyword">import</span> com.zang.blogz.utils.IpUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.CloseStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.TextMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.WebSocketSession;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.handler.TextWebSocketHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.ServerEndpoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ZVerify</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: websocket服务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DateTime</span>: 2022/9/6 14:03</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@ServerEndpoint(value = &quot;/ws-connect&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZVerifyWebSocketHandler</span> <span class="keyword">extends</span> <span class="title class_">TextWebSocketHandler</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ChatRecordService chatRecordService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setChatRecordDao</span><span class="params">(ChatRecordService chatRecordService)</span> &#123;</span><br><span class="line">        ZVerifyWebSocketHandler.chatRecordService = chatRecordService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> UserInfoService userInfoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserInfoService</span><span class="params">(UserInfoService userInfoService)</span> &#123;</span><br><span class="line">        ZVerifyWebSocketHandler.userInfoService = userInfoService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> UploadStrategyContext uploadStrategyContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUploadStrategyContext</span><span class="params">(UploadStrategyContext uploadStrategyContext)</span> &#123;</span><br><span class="line">        ZVerifyWebSocketHandler.uploadStrategyContext = uploadStrategyContext;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 固定前缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">HEADER_NAME</span> <span class="operator">=</span> <span class="string">&quot;X-Real-IP&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存放Session集合，方便推送消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ConcurrentHashMap&lt;String, WebSocketSession&gt; webSocketSessionMaps = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听：连接开启</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterConnectionEstablished</span><span class="params">(WebSocketSession session)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// put到集合，方便后续操作</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> session.getAttributes().get(<span class="string">&quot;userId&quot;</span>).toString();</span><br><span class="line">        webSocketSessionMaps.put(HEADER_NAME + userId, session);</span><br><span class="line">        <span class="comment">// 更新在线人数</span></span><br><span class="line">        updateOnlineCount();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载历史聊天记录</span></span><br><span class="line">        <span class="type">ChatRecordDTO</span> <span class="variable">chatRecordDTO</span> <span class="operator">=</span> listChartRecords(session);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送消息</span></span><br><span class="line">        <span class="type">WebsocketMessageDTO</span> <span class="variable">messageDTO</span> <span class="operator">=</span> WebsocketMessageDTO.builder()</span><br><span class="line">                .type(ChatTypeEnum.HISTORY_RECORD.getType())</span><br><span class="line">                .data(chatRecordDTO)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">synchronized</span> (session) &#123;</span><br><span class="line">            session.sendMessage(<span class="keyword">new</span> <span class="title class_">TextMessage</span>(JSON.toJSONString(messageDTO)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 给个提示</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">tips</span> <span class="operator">=</span> <span class="string">&quot;Web-Socket 连接成功，sid=&quot;</span> + session.getId() + <span class="string">&quot;，userId=&quot;</span> + userId;</span><br><span class="line">        System.out.println(tips);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载历史聊天记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 加载历史聊天记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ChatRecordDTO <span class="title function_">listChartRecords</span><span class="params">(WebSocketSession session)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">ipAddress</span> <span class="operator">=</span> session.getAcceptedProtocol();</span><br><span class="line"></span><br><span class="line">        LambdaQueryWrapper&lt;ChatRecord&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        queryWrapper.ge(ChatRecord::getCreateTime, DateUtil.offsetHour(<span class="keyword">new</span> <span class="title class_">Date</span>(), -<span class="number">12</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ChatRecordDTO.builder()</span><br><span class="line">                .chatRecordList(chatRecordService.list(queryWrapper))</span><br><span class="line">                .ipAddress(ipAddress)</span><br><span class="line">                .ipSource(IpUtil.getIpSource(ipAddress))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateOnlineCount</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取当前在线人数</span></span><br><span class="line">        <span class="type">WebsocketMessageDTO</span> <span class="variable">messageDTO</span> <span class="operator">=</span> WebsocketMessageDTO.builder()</span><br><span class="line">                .type(ChatTypeEnum.ONLINE_COUNT.getType())</span><br><span class="line">                .data(webSocketSessionMaps.size())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">// 广播消息</span></span><br><span class="line">        broadcastMessage(messageDTO);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听：连接关闭</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterConnectionClosed</span><span class="params">(WebSocketSession session, CloseStatus status)</span>&#123;</span><br><span class="line">        <span class="comment">// 从集合移除</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> session.getAttributes().get(<span class="string">&quot;userId&quot;</span>).toString();</span><br><span class="line">        webSocketSessionMaps.remove(HEADER_NAME + userId);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 收到消息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleTextMessage</span><span class="params">(WebSocketSession session, TextMessage message)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">ipAddress</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">WebsocketMessageDTO</span> <span class="variable">messageDTO</span> <span class="operator">=</span> JSONUtil.toBean(message.getPayload(), WebsocketMessageDTO.class, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">switch</span> (Objects.requireNonNull(ChatTypeEnum.getChatType(messageDTO.getType()))) &#123;</span><br><span class="line">            <span class="keyword">case</span> SEND_MESSAGE:</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> String.valueOf(messageDTO.getData()) ;</span><br><span class="line">                <span class="type">InetAddress</span> <span class="variable">address</span> <span class="operator">=</span> Objects.requireNonNull(session.getLocalAddress()).getAddress();</span><br><span class="line">                <span class="keyword">if</span> (Opp.of(address).isNonNull())&#123;</span><br><span class="line"></span><br><span class="line">                    ipAddress = address.getHostAddress();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> session.getAttributes().get(<span class="string">&quot;userId&quot;</span>).toString();</span><br><span class="line">                <span class="type">UserInfo</span> <span class="variable">byId</span> <span class="operator">=</span> userInfoService.getById(Integer.valueOf(userId));</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 发送消息</span></span><br><span class="line">                <span class="type">ChatRecord</span> <span class="variable">chatRecord</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChatRecord</span>();</span><br><span class="line"></span><br><span class="line">                chatRecord.setContent(data);</span><br><span class="line">                chatRecord.setType(messageDTO.getType());</span><br><span class="line">                chatRecord.setAvatar(byId.getAvatar());</span><br><span class="line">                chatRecord.setNickname(byId.getNickname());</span><br><span class="line">                chatRecord.setUserId(byId.getId());</span><br><span class="line">                chatRecord.setIpAddress(ipAddress);</span><br><span class="line">                <span class="type">String</span> <span class="variable">ipSource</span> <span class="operator">=</span> IpUtil.getIpSource(ipAddress);</span><br><span class="line">                chatRecord.setIpSource(ipSource);</span><br><span class="line">                chatRecordService.save(chatRecord);</span><br><span class="line"></span><br><span class="line">                messageDTO.setData(chatRecord);</span><br><span class="line">                <span class="comment">// 广播消息</span></span><br><span class="line">                broadcastMessage(messageDTO);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> RECALL_MESSAGE:</span><br><span class="line">                <span class="comment">// 撤回消息</span></span><br><span class="line">                <span class="type">RecallMessageDTO</span> <span class="variable">recallMessage</span> <span class="operator">=</span> JSON.parseObject(JSON.toJSONString(messageDTO.getData()), RecallMessageDTO.class);</span><br><span class="line">                <span class="comment">// 删除记录</span></span><br><span class="line">                chatRecordService.removeById(recallMessage.getId());</span><br><span class="line">                <span class="comment">// 广播消息</span></span><br><span class="line">                broadcastMessage(messageDTO);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> HEART_BEAT:</span><br><span class="line">                <span class="comment">// 心跳消息</span></span><br><span class="line">                messageDTO.setData(<span class="string">&quot;pong&quot;</span>);</span><br><span class="line">                session.sendMessage(<span class="keyword">new</span> <span class="title class_">TextMessage</span>((JSON.toJSONString(messageDTO))));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -----------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向指定客户端推送消息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(WebSocketSession session, String message)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;向sid为：&quot;</span> + session.getId() + <span class="string">&quot;，发送：&quot;</span> + message);</span><br><span class="line">            session.sendMessage(<span class="keyword">new</span> <span class="title class_">TextMessage</span>(message));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向指定用户推送消息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(<span class="type">long</span> userId, String message)</span> &#123;</span><br><span class="line">        <span class="type">WebSocketSession</span> <span class="variable">session</span> <span class="operator">=</span> webSocketSessionMaps.get(HEADER_NAME + userId);</span><br><span class="line">        <span class="keyword">if</span>(session != <span class="literal">null</span>) &#123;</span><br><span class="line">            sendMessage(session, message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 广播消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> messageDTO 消息dto</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException io异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">broadcastMessage</span><span class="params">(WebsocketMessageDTO messageDTO)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        Collection&lt;WebSocketSession&gt; sessions = webSocketSessionMaps.values();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (WebSocketSession webSocketService : sessions) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (webSocketService)&#123;</span><br><span class="line">                <span class="type">TextMessage</span> <span class="variable">textMessage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextMessage</span>(JSON.toJSONString(messageDTO));</span><br><span class="line">                webSocketService.sendMessage(textMessage);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送语音</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> voiceRO 语音路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendVoice</span><span class="params">(VoiceRO voiceRO)</span> &#123;</span><br><span class="line">        <span class="comment">// 上传语音文件</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> uploadStrategyContext.executeUploadStrategy(voiceRO.getFile(), FilePathEnum.VOICE.getPath());</span><br><span class="line">        voiceRO.setContent(content);</span><br><span class="line">        <span class="comment">// 保存记录</span></span><br><span class="line">        <span class="type">ChatRecord</span> <span class="variable">chatRecord</span> <span class="operator">=</span> BeanCopyUtils.copyObject(voiceRO, ChatRecord.class);</span><br><span class="line">        chatRecordService.save(chatRecord);</span><br><span class="line">        <span class="comment">// 发送消息</span></span><br><span class="line">        <span class="type">WebsocketMessageDTO</span> <span class="variable">messageDTO</span> <span class="operator">=</span> WebsocketMessageDTO.builder()</span><br><span class="line">                .type(ChatTypeEnum.VOICE_MESSAGE.getType())</span><br><span class="line">                .data(chatRecord)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">// 广播消息</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            broadcastMessage(messageDTO);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> WebSocket </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态生成初始化条件构造器</title>
      <link href="/posts/f87972ce.html"/>
      <url>/posts/f87972ce.html</url>
      
        <content type="html"><![CDATA[<p>在我没日没夜的写大量的增删改查的过程中意识到了一个问题，那就是我们在分页查询或者批量查寻的时候，通常会根据不同的场景去构造不同的<code>QueryWrapper</code>那就有一个问题，<br>对于我们后端很不友好，每次都是查询，只不过前端传过来的条件可能不一样，所以我就想有没有一种办法可以动态的去构造<code>QueryWrapper</code>这时候我就尝试造一个轮子</p><p>下面注释写的很详细，不过要使用这个构造器就要遵守我自己定的规范那么就是在RO对象上所有的属性添加<code>ApiModelProperty</code>注解并且其<code>value</code>值必须要为其数据库中对应的字段名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ZVerify</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 初始化查询条件构造</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DateTime</span>: 2022/9/4 16:41</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SearchQueryInit</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  &lt;T&gt; QueryWrapper&lt;T&gt; <span class="title function_">getQueryWrapper</span><span class="params">(Object entity,Class&lt;T&gt; clazz)</span>&#123;</span><br><span class="line"></span><br><span class="line">        QueryWrapper&lt;T&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取所有属性</span></span><br><span class="line">        <span class="keyword">for</span>(Field f : entity.getClass().getDeclaredFields()) &#123;</span><br><span class="line">            <span class="comment">// 得到私有属性</span></span><br><span class="line">            f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            </span><br><span class="line">            Opp.ofTry(() -&gt; &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (f.get(entity) != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 得到属性上的注解</span></span><br><span class="line">                    <span class="type">ApiModelProperty</span> <span class="variable">field</span> <span class="operator">=</span> f.getAnnotation(ApiModelProperty.class);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 在其不为空的情况下</span></span><br><span class="line">                    Opp.ofStr(field.value()).ifPresent(fQ-&gt;&#123;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            </span><br><span class="line">                            <span class="comment">// 如果是字符串类型的字段单独处理，过滤掉字符串为&quot;&quot;or&quot;    &quot;的,然后进行构造</span></span><br><span class="line">                            Opp&lt;Object&gt; opp = Opp.of(f.get(entity)).typeOfPeek((String s) -&gt; Opp.ofStr(s).ifPresent(Fq -&gt; queryWrapper.like(fQ, Fq)));</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 如果不是字符传则正常处理</span></span><br><span class="line">                            <span class="keyword">if</span> (opp.isNull())&#123;</span><br><span class="line"></span><br><span class="line">                                queryWrapper.like(fQ, f.get(entity));</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(ResultConstant.InitializationMessage.SEARCH_STRUCTURE);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> queryWrapper;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> orm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板模式+策略模式优美的实现上传文件</title>
      <link href="/posts/8dda91f7.html"/>
      <url>/posts/8dda91f7.html</url>
      
        <content type="html"><![CDATA[<h2 id="前提">前提</h2><p>首先你在阅读我这篇文字的时候可能不是很懂模板模式和策略模式，你可以先去网上看一些文章也可以直接看我写的这篇，仔细看我相信你会明白的。这是一篇有关于实战的文字，我会尽可能说的详细一点，我写这篇文字的初衷，</p><ol><li>自己总结一下昨天干了些什么</li><li>巩固一下设计模式</li><li>给需要的小伙伴分享一下</li></ol><h2 id="正文部分">正文部分</h2><h3 id="准备">准备</h3><p>首先在yml配置文件中配置一下上传策略</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 上传策略 可选 oss或local,如需自行扩展请创建impl并继承AbstractUploadStrategyImpl类</span></span><br><span class="line"><span class="attr">upload:</span></span><br><span class="line">  <span class="attr">mode:</span> <span class="string">oss</span></span><br><span class="line">  <span class="attr">local:</span></span><br><span class="line">    <span class="comment"># nginx映射本地文件路径，无域名则为 ip:83</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">http://你的文件上传子域名/</span></span><br><span class="line">    <span class="comment"># 本地文件存储路径</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/usr/local/upload/</span></span><br><span class="line">   <span class="comment">## 阿里云oss配置</span></span><br><span class="line">  <span class="attr">oss:</span></span><br><span class="line">    <span class="comment">## Region信息，就是你选择的地步分布，如：上海、杭州</span></span><br><span class="line">    <span class="attr">endpoint:</span> <span class="string">&#x27;xxxxx&#x27;</span></span><br><span class="line">    <span class="comment">## 阿里云账号AccessKey拥有所有API的访问权限，风险很高。强烈建议您创建并使用RAM用户进行API访问或日常运维，请登录RAM控制台创建RAM用户。</span></span><br><span class="line">    <span class="attr">accessKeyId:</span> <span class="string">&#x27;xxxxxx&#x27;</span></span><br><span class="line">    <span class="attr">accessKeySecret:</span> <span class="string">&#x27;xxxxxxx&#x27;</span></span><br><span class="line">    <span class="comment">## 填写Bucket名称，例如examplebucket。</span></span><br><span class="line">    <span class="attr">bucketName:</span> <span class="string">&#x27;xxxxxxx&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="创建一个策略的枚举类">创建一个策略的枚举类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zang.blogz.enmus;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> com.zang.blogz.steam.stream.Steam;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ZVerify</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO 上传策略枚举类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DateTime</span>: 2022/8/31 17:20</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">UploadStrategyEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * oss</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    OSS(<span class="string">&quot;oss&quot;</span>, <span class="string">&quot;ossUploadStrategyImpl&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 本地</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    LOCAL(<span class="string">&quot;local&quot;</span>, <span class="string">&quot;localUploadStrategyImpl&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String mode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 策略</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String strategy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取策略</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mode 模式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> String&#125; 搜索策略</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getStrategy</span><span class="params">(String mode)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Steam.of(UploadStrategyEnum.values()).findFirst(strategy(mode)).orElse(OSS).getStrategy();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Predicate&lt;? <span class="built_in">super</span> UploadStrategyEnum&gt; strategy(String mode)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> val-&gt;  StrUtil.equals(val.getMode(), mode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>到时候我们可以通过调用的方法在这里匹配到我们要选择的策略的服务名称，默认为OSS上传服务</p></blockquote><h3 id="创建一个UploadStrategy接口">创建一个UploadStrategy接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ZVerify</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO 上传策略</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DateTime</span>: 2022/8/31 18:49</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UploadStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path 文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> String&#125; 文件地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">uploadFile</span><span class="params">(MultipartFile file, String path)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们的策略都会去实现这个接口，因为我们也使用了模板模式到时候只需要抽象模板去实现这个接口就可以了</p></blockquote><h3 id="上传策略上下文">上传策略上下文</h3><p>这个类用于我们去进行策略的选择</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ZVerify</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO 上传策略上下文</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DateTime</span>: 2022/8/31 18:42</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadStrategyContext</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传模式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;upload.mode&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String uploadMode;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, UploadStrategy&gt; uploadStrategyMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path 路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> String&#125; 文件地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">executeUploadStrategy</span><span class="params">(MultipartFile file, String path)</span> &#123;</span><br><span class="line"></span><br><span class="line">        Opp&lt;String&gt; ofTry = Opp.ofTry(() -&gt; uploadStrategyMap.get(UploadStrategyEnum.getStrategy(uploadMode))</span><br><span class="line">                .uploadFile(file, path), NullPointerException.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Opp.of(ofTry.getException()).isNonNull()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BizException</span>(<span class="string">&quot;抱歉,请检查配置文件,当前没有你所选择的策略&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ofTry.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先从配置文件读到当前选择的上传模式，然后调用我们策略的枚举类里边的方法得到当前使用的策略的服务名称然后从map中通过服务名称拿到服务的实体去执行uploadFile(file, path)方法现在已经选择好了我们的策略了到了我们的抽象模板了</p><h3 id="抽象模板">抽象模板</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ZVerify</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO 抽象上传模板</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DateTime</span>: 2022/8/31 18:55</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractUploadStrategyImpl</span> <span class="keyword">implements</span> <span class="title class_">UploadStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">uploadFile</span><span class="params">(MultipartFile file, String path)</span> &#123;</span><br><span class="line"></span><br><span class="line">        Opp&lt;String&gt; uploadOpp = Opp.ofTry(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 获取文件md5值</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">md5</span> <span class="operator">=</span> FileUtils.getMd5(file.getInputStream());</span><br><span class="line">            <span class="comment">// 获取文件扩展名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">extName</span> <span class="operator">=</span> FileUtils.getExtName(file.getOriginalFilename());</span><br><span class="line">            <span class="comment">// 重新生成文件名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> md5 + extName;</span><br><span class="line">            <span class="comment">// 判断文件是否已存在</span></span><br><span class="line">            <span class="keyword">if</span> (!exists(path + fileName)) &#123;</span><br><span class="line">                <span class="comment">// 不存在则继续上传</span></span><br><span class="line">                upload(path, fileName, file.getInputStream());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 返回文件访问路径</span></span><br><span class="line">            <span class="keyword">return</span> getFileAccessUrl(path + fileName);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Opp.of(uploadOpp.getException()).isNonNull()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BizException</span>(<span class="string">&quot;文件上传失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> uploadOpp.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断文件是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath 文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Boolean&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Boolean <span class="title function_">exists</span><span class="params">(String filePath)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path        路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName    文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream 输入流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException io异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">upload</span><span class="params">(String path, String fileName, InputStream inputStream)</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取文件访问url</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath 文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> String&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">getFileAccessUrl</span><span class="params">(String filePath)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在抽象模板中去实现UploadStrategy，重写其uploadFile，然后声明三个抽象方法，因为我们的上传总体流程是一样的但是其内部的实现是不一样的，所以这就是我们的模板，我们策略的具体实现只需要继承抽象类并重写这三个方法就可以了</p><h3 id="oss上传具体实现">oss上传具体实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ZVerify</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO oss上传策略</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DateTime</span>: 2022/8/31 19:52</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Service(&quot;ossUploadStrategyImpl&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OssUploadStrategyImpl</span> <span class="keyword">extends</span> <span class="title class_">AbstractUploadStrategyImpl</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OssConfigProperties ossConfigProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;upload.oss.bucketName&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String P;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;upload.oss.endpoint&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String I;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">exists</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getOssClient().doesObjectExist(ossConfigProperties.getBucketName(), filePath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">upload</span><span class="params">(String path, String fileName, InputStream inputStream)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        getOssClient().putObject(ossConfigProperties.getBucketName(), path + fileName, inputStream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getFileAccessUrl</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line"></span><br><span class="line">       <span class="type">String</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="string">&quot;https://&quot;</span> + P + <span class="string">&quot;.&quot;</span> + I + <span class="string">&quot;/&quot;</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> URL + filePath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OSS <span class="title function_">getOssClient</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(ossConfigProperties.getEndpoint(), ossConfigProperties.getAccessKeyId(), ossConfigProperties.getAccessKeySecret());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="local上传实现">local上传实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;localUploadStrategyImpl&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalUploadStrategyImpl</span> <span class="keyword">extends</span> <span class="title class_">AbstractUploadStrategyImpl</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 本地路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;upload.local.path&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String localPath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问url</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;upload.local.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String localUrl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">exists</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">File</span>(localPath + filePath).exists();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">upload</span><span class="params">(String path, String fileName, InputStream inputStream)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断目录是否存在</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">directory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(localPath + path);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!directory.exists()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!directory.mkdirs()) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BizException</span>(<span class="string">&quot;创建目录失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 写入文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(localPath + path + fileName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (file.createNewFile()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(inputStream);</span><br><span class="line">            <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(Files.newOutputStream(file.toPath()));</span><br><span class="line"></span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> length;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> ((length = bis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">                bos.write(bytes, <span class="number">0</span>, length);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            bos.flush();</span><br><span class="line">            inputStream.close();</span><br><span class="line">            bis.close();</span><br><span class="line">            bos.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getFileAccessUrl</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> localUrl + filePath;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模板模式 </tag>
            
            <tag> 策略模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理模式</title>
      <link href="/posts/7b510e10.html"/>
      <url>/posts/7b510e10.html</url>
      
        <content type="html"><![CDATA[<h2 id="定义">定义</h2><p>代理模式又叫委托模式，是为某个对象提供一个代理对象，并且由代理对象控制对原对象的访问。代理模式通俗来讲就是我们生活中常见的中介。<br>代理模式可以提供非常好的访问控制，应用比较广泛。<br>举个例子来说明：假如说我现在想买一辆二手车，虽然我可以自己去找车源，做质量检测等一系列的车辆过户流程，但是这确实太浪费我得时间和精力了。我只是想买一辆车而已为什么我还要额外做这么多事呢？于是我就通过中介公司来买车，他们来给我找车源，帮我办理车辆过户流程，我只是负责选择自己喜欢的车，然后付钱就可以了。</p><h2 id="角色">角色</h2><p>抽象主题角色：可以是抽象类，也可以是接口。抽象主题是一个普通的业务类型，无特殊要求。</p><p>具体主题角色：也叫做被委托角色或被代理角色，是业务逻辑的具体执行者。</p><p>代理主题角色：也叫做委托类或代理类。它负责对真实角色的应用，把所有抽象主题类定义的方法限制委托给真实主题角色实现，并且在具体主题角色处理完毕前后做预处理和善后处理工作。</p><h2 id="静态代理">静态代理</h2><p>静态代理中，我们对目标对象的每个方法的增强都是手动完成的（后面会具体演示代码），非常不灵活（比如接口一旦新增加方法，目标对象和代理对象都要进行修改）且麻烦(需要对每个目标类都单独写一个代理类）。 实际应用场景非常非常少，日常开发几乎看不到使用静态代理的场景。</p><p>静态代理实现步骤:</p><ol><li>定义一个接口及其实现类；</li><li>创建一个代理类同样实现这个接口</li><li>将目标对象注入进代理类，然后在代理类的对应方法调用目标类中的对应方法。这样的话，我们就可以通过代理类屏蔽对目标对象的访问，并且可以在目标方法执行前后做一些自己想做的事情。</li></ol><p>下面我写一个结婚的案例方便理解静态代理</p><p>定义一个结婚的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ZVerify</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DateTime</span>: 2022/8/30 22:49</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MarryService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">marry</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体对象去实现接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ZVerify</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DateTime</span>: 2022/8/30 22:50</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Zverify</span> <span class="keyword">implements</span> <span class="title class_">MarryService</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">marry</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;抽空结个婚&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理类同样去实现接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ZVerify</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DateTime</span>: 2022/8/30 22:53</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZverifyMarryProxy</span> <span class="keyword">implements</span> <span class="title class_">MarryService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MarryService marryService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ZverifyMarryProxy</span><span class="params">(MarryService marryService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.marryService = marryService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">marry</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;我是婚庆主持我来主持&quot;</span>);</span><br><span class="line"></span><br><span class="line">        marryService.marry();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;我是打扫卫生的，婚礼结束我来打扫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220830225814257.png" alt="image-20220830225814257"></p><h2 id="动态代理">动态代理</h2><p>相比于静态代理来说，动态代理更加灵活。我们不需要针对每个目标类都单独创建一个代理类，并且也不需要我们必须实现接口，我们可以直接代理实现类( CGLIB 动态代理机制)。</p><p>从 JVM 角度来说，动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。</p><p>说到动态代理，Spring AOP、RPC 框架应该是两个不得不提的，它们的实现都依赖了动态代理。</p><p>动态代理在我们日常开发中使用的相对较少，但是在框架中的几乎是必用的一门技术。学会了动态代理之后，对于我们理解和学习各种框架的原理也非常有帮助。</p><p>就 Java 来说，动态代理的实现方式有很多种，比如 JDK 动态代理、CGLIB 动态代理等等。</p><h3 id="JDK动态代理">JDK动态代理</h3><p><code>在Java动态代理的机制中InvocationHandler接口和Proxy类是核心</code><br>Proxy 类中使用频率最高的方法是：newProxyInstance() ，这个方法主要用来生成一个代理对象。<br>这个方法一共有三个参数：</p><ol><li>loader：类加载器用于加载代理对象</li><li>interfaces：被代理类实现的一些接口</li><li>h：实现了InvocationHandler接口的invoke方法来调用</li></ol><p>所以我们第三个参数需要一个自定义的类去实现InvocationHandler接口并实现invoke方法这里因为这个接口就一个方法我们直接使用lambda表达式写一下就不去创建类了</p><p>invoke() 方法有下面三个参数：</p><p>proxy :动态生成的代理类<br>method : 与代理类对象调用的方法相对应<br>args : 当前 method 方法的参数<br>也就是说：你通过Proxy 类的 newProxyInstance() 创建的代理对象在调用方法的时候，实际会调用到实现InvocationHandler 接口的类的 invoke()方法。 你可以在 invoke() 方法中自定义处理逻辑，比如在方法执行前后做什么事情。</p><p>JDK 动态代理类使用步骤<br>定义一个接口及其实现类；<br>自定义 InvocationHandler 并重写invoke方法，在 invoke 方法中我们会调用原生方法（被代理类的方法）并自定义一些处理逻辑；<br>通过 Proxy.newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h) 方法创建代理对象；</p><p>抽象接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MarryService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">marry</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体被代理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Zverify</span> <span class="keyword">implements</span> <span class="title class_">MarryService</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">marry</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;抽空结个婚&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>产生代理对象的工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> MarryService <span class="title function_">getMarryProxy</span><span class="params">(MarryService marryService)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (MarryService) Proxy.newProxyInstance(marryService.getClass().getClassLoader(), marryService.getClass().getInterfaces(),</span><br><span class="line">                (proxy, method, args)-&gt;&#123;</span><br><span class="line"></span><br><span class="line">                    System.out.println(<span class="string">&quot;我帮你主持婚礼&quot;</span>);</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span> method.invoke(marryService, args);</span><br><span class="line">                    System.out.println(<span class="string">&quot;我帮你打扫卫生&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> invoke;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">MarryService</span> <span class="variable">marryProxy</span> <span class="operator">=</span> ProxyFactory.getMarryProxy(<span class="keyword">new</span> <span class="title class_">Zverify</span>());</span><br><span class="line"></span><br><span class="line">        marryProxy.marry();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下<br><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220831092221066.png" alt="image-20220831092221066"></p><h3 id="CGLIB动态代理">CGLIB动态代理</h3><p>介绍<br>JDK动态代理有一个最致命的问题就是他只能代理实现了接口的类<br>为了解决这个问题，我们可以使用CGLIB动态代理机制来避免</p><p>CGLIB(Code Generation Library)是一个基于ASM的字节码生成库，它允许我们在运行时对字节码进行修改和动态生成。CGLIB 通过继承方式实现代理。很多知名的开源框架都使用到了CGLIB， 例如 Spring 中的 AOP 模块中：如果目标对象实现了接口，则默认采用 JDK 动态代理，否则采用 CGLIB 动态代理。</p><p>在 CGLIB 动态代理机制中 MethodInterceptor 接口和 Enhancer 类是核心。</p><p>你需要自定义 MethodInterceptor 并重写 intercept 方法，intercept 用于拦截增强被代理类的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MethodInterceptor</span></span><br><span class="line"><span class="keyword">extends</span> <span class="title class_">Callback</span>&#123;</span><br><span class="line">    <span class="comment">// 拦截被代理类中的方法,参数基本和之前的一样见名知意</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object obj, java.lang.reflect.Method method, Object[] args,MethodProxy proxy)</span> <span class="keyword">throws</span> Throwable;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>你可以通过 Enhancer类来动态获取被代理类，当代理类调用方法的时候，实际调用的是 MethodInterceptor 中的 intercept 方法</p><p>CGLIB 动态代理类使用步骤</p><ol><li>定义一个类；</li><li>自定义 MethodInterceptor 并重写 intercept 方法，intercept 用于拦截增强被代理类的方法，和 JDK 动态代理中的 invoke 方法类似；</li><li>通过 Enhancer 类的 create()创建代理类；</li></ol><p>不同于 JDK 动态代理不需要额外的依赖。CGLIB(Code Generation Library) 实际是属于一个开源项目，如果你要使用它的话，需要手动添加相关依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建一个能够结婚的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ZVerify</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DateTime</span>: 2022/8/31 10:20</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MarryService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">marry</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;抽空结个婚&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次我们就不用lambda了，分开写一下，自定义一个拦截器实现MethodInterceptor接口重写intercept</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ZVerify</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DateTime</span>: 2022/8/31 10:25</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MarryInterceptor</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o           代理对象（增强的对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method      被拦截的方法（需要增强的方法）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objects        方法入参</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> methodProxy 用于调用原始方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;我帮助你主持婚礼&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">invokeSuper</span> <span class="operator">=</span> methodProxy.invokeSuper(o, objects);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;我帮你打扫卫生&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> invokeSuper;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取代理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ZVerify</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DateTime</span>: 2022/8/31 10:34</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CglibProxyFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;A&gt; A <span class="title function_">getProxy</span><span class="params">(Class&lt;A&gt; clazz)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line"></span><br><span class="line">        enhancer.setClassLoader(clazz.getClassLoader());</span><br><span class="line"></span><br><span class="line">        enhancer.setSuperclass(clazz);</span><br><span class="line"></span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> <span class="title class_">MarryInterceptor</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (A) enhancer.create();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试<br><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220831105319785.png" alt="image-20220831105319785"></p><h3 id="JDK-动态代理和-CGLIB-动态代理对比">JDK 动态代理和 CGLIB 动态代理对比</h3><p>JDK 动态代理只能代理实现了接口的类或者直接代理接口，而 CGLIB 可以代理未实现任何接口的类。 另外， CGLIB 动态代理是通过生成一个被代理类的子类来拦截被代理类的方法调用，因此不能代理声明为 final 类型的类和方法。<br>就二者的效率来说，大部分情况都是 JDK 动态代理更优秀，随着 JDK 版本的升级，这个优势更加明显。</p><h2 id="静态代理和动态代理的对比">静态代理和动态代理的对比</h2><p>灵活性 ：动态代理更加灵活，不需要必须实现接口，可以直接代理实现类，并且可以不需要针对每个目标类都创建一个代理类。另外，静态代理中，接口一旦新增加方法，目标对象和代理对象都要进行修改，这是非常麻烦的！<br>JVM 层面 ：静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的 class 文件。而动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代理模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis设置小key过期时间</title>
      <link href="/posts/8486078e.html"/>
      <url>/posts/8486078e.html</url>
      
        <content type="html"><![CDATA[<h2 id="场景">场景</h2><p>首先是一个这样的业务场景，我们要做一个注册的功能，我们会通过用户输入的邮箱进行发送一个验证码，并且验证码有效期是3分钟，但是我们要去使用redis保存验证码，但是又不想用string去做。用hash去怎么实现呢</p><h2 id="做法">做法</h2><h3 id="保存">保存</h3><p>在我们redis中可以通过hash做，但是呢redis只提供了hash类型的大key的过期时间，这个时候问题就来了，我就想使用一个大key，然后每个邮箱的地址小key，验证码为value，这个时候我们只需要在验证码之后拼接一个时间</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220706161815789.png" alt="image-20220706161815789"></p><p>此时就是获取我们的当前时间然后偏移三分钟转换为字符串之后拼接到验证码之后</p><h3 id="验证">验证</h3><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220706163004834.png" alt="image-20220706163004834"></p><p>我们这样的话取出来的时候就可以先把我们保存的过期时间取出来，然后获得当前时间进行比较如果当前时间在过期时间之后就代表我们的验证码已经过期了，如果没有的话就说明还没有过期，进行下边的思路</p>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lambda表达式也能写递归吗</title>
      <link href="/posts/43424dfc.html"/>
      <url>/posts/43424dfc.html</url>
      
        <content type="html"><![CDATA[<h2 id="🍑当你点进这篇文章的时候可能会有些疑问，什么Lambda表达式也能写递归？">🍑当你点进这篇文章的时候可能会有些疑问，什么Lambda表达式也能写递归？</h2><p>没错是这样的，我们在很多时候会用到递归树但是如果在数据库去写递归的SQL对数据库的压力就太大了，通常我们会一次性的都查出来在Java去进行递归的操作，我们这个操作要写好多代码而且思想基本都差不多，所以我们的Steam提供了这样一个方法toTree()，他可以定制的去进行集合转换为树的操作。<br>这里我感觉lambda能写递归感到这个思想很好玩所以这里给大家讲一下我写的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将集合转换为树，自定义树顶部的判断条件，内置一个小递归(没错，lambda可以写递归)</span></span><br><span class="line"><span class="comment"> * 因为需要在当前传入数据里查找，所以这是一个结束操作</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> idGetter        id的getter对应的lambda，可以写作 &#123;<span class="doctag">@code</span> Student::getId&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pIdGetter       parentId的getter对应的lambda，可以写作 &#123;<span class="doctag">@code</span> Student::getParentId&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> childrenSetter  children的setter对应的lambda，可以写作 &#123;<span class="doctag">@code</span> Student::setChildren&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> parentPredicate 树顶部的判断条件，可以写作 &#123;<span class="doctag">@code</span> s -&gt; Objects.equals(s.getParentId(),0L) &#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;R&gt;             此处是id、parentId的泛型限制</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> list 组装好的树</span></span><br><span class="line"><span class="comment"> * eg:</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> List studentTree = Steam.of(students).toTree(Student::getId, Student::getParentId, Student::setChildren, Student::getMatchParent) &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> &lt;R <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;R&gt;&gt; List&lt;T&gt; <span class="title function_">toTree</span><span class="params">(Function&lt;T, R&gt; idGetter,</span></span><br><span class="line"><span class="params">                                                Function&lt;T, R&gt; pIdGetter,</span></span><br><span class="line"><span class="params">                                                BiConsumer&lt;T, List&lt;T&gt;&gt; childrenSetter,</span></span><br><span class="line"><span class="params">                                                Predicate&lt;T&gt; parentPredicate)</span> &#123;</span><br><span class="line">    List&lt;T&gt; list = toList();</span><br><span class="line">    List&lt;T&gt; parents = Steam.of(list).filter(e -&gt; Opp.of(e).is(parentPredicate)).toList();</span><br><span class="line">    <span class="keyword">return</span> getChildrenFromMapByPidAndSet(idGetter, childrenSetter, Steam.of(list).group(pIdGetter), parents);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * toTree的内联函数，内置一个小递归(没错，lambda可以写递归)</span></span><br><span class="line"><span class="comment"> * 因为需要在当前传入数据里查找，所以这是一个结束操作</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> idGetter       id的getter对应的lambda，可以写作 &#123;<span class="doctag">@code</span> Student::getId&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> childrenSetter children的setter对应的lambda，可以写作 &#123;<span class="doctag">@code</span> Student::setChildren&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pIdValuesMap   parentId和值组成的map，用来降低复杂度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> parents        顶部数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;R&gt;            此处是id的泛型限制</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> list 组装好的树</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> &lt;R <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;R&gt;&gt; List&lt;T&gt; <span class="title function_">getChildrenFromMapByPidAndSet</span><span class="params">(Function&lt;T, R&gt; idGetter,</span></span><br><span class="line"><span class="params">        BiConsumer&lt;T, List&lt;T&gt;&gt; childrenSetter,</span></span><br><span class="line"><span class="params">        Map&lt;R, List&lt;T&gt;&gt; pIdValuesMap,</span></span><br><span class="line"><span class="params">        List&lt;T&gt; parents)</span> &#123;</span><br><span class="line">        AtomicReference&lt;Consumer&lt;List&lt;T&gt;&gt;&gt; recursiveRef = <span class="keyword">new</span> <span class="title class_">AtomicReference</span>&lt;&gt;();</span><br><span class="line">        Consumer&lt;List&lt;T&gt;&gt; recursive = values -&gt; Steam.of(values).forEach(value -&gt; &#123;</span><br><span class="line">        List&lt;T&gt; children = pIdValuesMap.get(idGetter.apply(value));</span><br><span class="line">        childrenSetter.accept(value, children);</span><br><span class="line">        recursiveRef.get().accept(children);</span><br><span class="line">        &#125;);</span><br><span class="line">        recursiveRef.set(recursive);</span><br><span class="line">        recursive.accept(parents);</span><br><span class="line">        <span class="keyword">return</span> parents;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>这里主要讲解一下getChildrenFromMapByPidAndSet()这个私有方法，因为递归主要是在这里做的</p><p>造一些数据debug一下更好理解</p><p>我们测试用这些数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; studentTree = Steam</span><br><span class="line">                    .of(</span><br><span class="line">                            Student.builder().id(<span class="number">1L</span>).name(<span class="string">&quot;dromara&quot;</span>).build(),</span><br><span class="line">                            Student.builder().id(<span class="number">2L</span>).name(<span class="string">&quot;baomidou&quot;</span>).build(),</span><br><span class="line">                            Student.builder().id(<span class="number">3L</span>).name(<span class="string">&quot;hutool&quot;</span>).parentId(<span class="number">1L</span>).build(),</span><br><span class="line">                            Student.builder().id(<span class="number">4L</span>).name(<span class="string">&quot;sa-token&quot;</span>).parentId(<span class="number">1L</span>).build(),</span><br><span class="line">                            Student.builder().id(<span class="number">5L</span>).name(<span class="string">&quot;mybatis-plus&quot;</span>).parentId(<span class="number">2L</span>).build(),</span><br><span class="line">                            Student.builder().id(<span class="number">6L</span>).name(<span class="string">&quot;looly&quot;</span>).parentId(<span class="number">3L</span>).build(),</span><br><span class="line">                            Student.builder().id(<span class="number">7L</span>).name(<span class="string">&quot;click33&quot;</span>).parentId(<span class="number">4L</span>).build(),</span><br><span class="line">                            Student.builder().id(<span class="number">8L</span>).name(<span class="string">&quot;jobob&quot;</span>).parentId(<span class="number">5L</span>).build()</span><br><span class="line">                    )</span><br><span class="line">                    <span class="comment">// just 3 lambda,top parentId is null</span></span><br><span class="line">                    .toTree(Student::getId, Student::getParentId, Student::setChildren);</span><br></pre></td></tr></table></figure><p>我们测试使用的顶部数据是parentId为null的</p><p>当进去方法之后我买会根据parentId去进行分组存到map中方便后续使用</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220826223948668.png" alt="image-20220826223948668"></p><p>进入getChildrenFromMapByPidAndSet()方法中这里就不对参数做说明了上边源码中解释的很清楚</p><p>我们创建一个原子引用类存放一个Consumer是对list类型的操作</p><p>然后写一下这个consumer所进行的操作，具体操作后边说</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220826224729454.png" alt="image-20220826224729454"></p><p>到这里的时候会将这个consumer对象存放到recursiveRef中然后下面对其进行操作就进如这个consumer的操作了</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220826225057371.png" alt="image-20220826225057371"></p><p>此时我们要操作的是顶部数据</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220826225412081.png" alt="image-20220826225412081"></p><p>上边这步意思是通过我们现在的顶部id取出parentId为我们顶部数据id的对象然后对其进行我们传入的set操作将其放入顶部数据的子节点中然后最妙的地方出现了我们此时还没有到第二个根节点，此时从recursiveRef中取出来将刚刚保存的子节点取进行consumer操作也就是看看齐有没有子节点有的话继续进行操作，其实如果有一些基础的话我讲到这应该已经知道这个使用的思想是dfs(深度优先遍历)，此时看一下<img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220826230254127.png" alt="image-20220826230254127"></p><p>下一次进行操作的是name为hutool的这个对象，很明显证实了我的话</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/image-20220826230406005.png" alt="image-20220826230406005"></p><p>第三次就是name为looly这个对象。说到这应该已经很清楚了。</p><blockquote><p>这个递归的操作最妙的就是使用一个AtomicReference去存放我买的消费操作然后在每一次操作的时候从原子类中取出来再次进行消费。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 开源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Steam </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVCC底层原理</title>
      <link href="/posts/11dc0777.html"/>
      <url>/posts/11dc0777.html</url>
      
        <content type="html"><![CDATA[<h2 id="MVCC底层原理">MVCC底层原理</h2><p>假设现在有一个index表，只有一条数据</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/dedf4345b7282d7a872b2bd1a11fa3c9.png" alt="dedf4345b7282d7a872b2bd1a11fa3c9"></p><p>此时他是有两个隐藏列的，一个是trxid(事务id)，一个是roll pointer(回滚指针)</p><p>此时新建三个会话，每个会话创建一个事务，我这里创建了</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/faca570a9ce125e0d6fd35096271340b.png" alt="faca570a9ce125e0d6fd35096271340b"></p><p>这三个依次进行一次更新操作，因为只有更新操作的时候才会生成事务id</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/9deada5bbd1abd1e869fcf02f352380a.png" alt="9deada5bbd1abd1e869fcf02f352380a"></p><p>所以要先去操作别的表一下以便生成事务id</p><p>我们在进行第三个事务的时候更新了一条数据在数据库底层会帮我们做这样一件事情</p><p>创建一条新数据然后将我们的旧数据放到回滚日志里边，并且将回滚指针指向它</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/a9b16bbf2819b3caa58f540ab6548d85.png" alt="a9b16bbf2819b3caa58f540ab6548d85"></p><p>此时我们进行一个查询会生成一个快照，他由指向查询时所有未提交事务id数组，和已创建事务id组成，查询数据需要跟read-view作对比从而得到快照结果</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/88dbc40a19db9f4ca587ed5c88333502.png" alt="88dbc40a19db9f4ca587ed5c88333502"></p><p>很明显此时查询结果为臧臧，这里就不做讲解</p><p>此时事务id为100的一次进行了3条更新操作</p><p>还会生成版本链</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/a7858897faa9d5b53cc2e07411e43749.png" alt="a7858897faa9d5b53cc2e07411e43749"></p><p>此时橙色的为最新数据，而黄色的为在版本日志里的数据</p><p>下面进行一个新的查询</p><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/3a352c2543f4b65816a9dc0aa58a223e.png" alt="3a352c2543f4b65816a9dc0aa58a223e"></p><p>因为我们研究的是可重复读的情况所以会沿用上一次生成的快照</p><p>此时查询出来的数据还会是臧臧，那么这是为什么呢，分析一下</p><p>先说一些readview比对规则</p><blockquote><p>当执行查询sql时会生成一致性视图read-view，它由执行查询时所有未提交事务id数组(数组里最小的id为min_id)和已创建的最大事务id(max_id) 组成，查询的数据结构需要跟read-view做对比从而得到快照结果</p><p>版本链对比规则：</p><ol><li>如果在绿色部分(trx_id&lt;min_id),表示这个版本是已经提交的事务生成的，这个数据是可见的；</li><li>如果落在红色部分(trx_id&gt;max_id),表示这个版本是有将来启动的事务生成的，是肯定不可见的</li><li>如果落在黄色部分(min_id&lt;trx_id&lt;max_id)那就包括两个情况</li><li>若row的trx_id在数组中，表示这个版本是由还没提交的事务生成的，不可见，当然了，自己肯定是可见的</li><li>若row的trx_id不在数组中说明，这个版本是已经提交了的事务生成了的，可见</li></ol><p>对于删除的情况可以认为是update的特殊情况，会将版本链上最新的数据复制一份，然后将trx_id修改成删除操作的trx_id，同时在该条记录的头信息(record header)里的deleted_flag标记位写上true，来表示当前的记录已经被删除了，在查询时按照上边的规则查到对应记录如果delete_flag标记位true，意味当前记录已被删除，则不返回数据</p></blockquote><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/30c4cf79c88b157b2bd97608a34d9f1b.png" alt="30c4cf79c88b157b2bd97608a34d9f1b"></p><ol><li><p>因为此时的readview是第一次生成的readview所以会进行比对事务id此时的事务id为100进行对比等于min_id(数组中最小事务id)，所以不可见，根据回滚指针去undolog里边找连续两个都是100，当到事务id为300的时候，符合第三个条件，然后进行判断不在未提交事务的数组中，所以可见，我们查到的数据为姓名为臧臧的数据，</p></li><li><p>我们现在按顺序进行以下操作<img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/9c98cba895b6eaf36cf50c31d7f35641.png" alt="9c98cba895b6eaf36cf50c31d7f35641"></p><p>此时再次进行查询，因为是可重复读状态依旧会使用上次生成的快照，进行对比此时版本链是这样的</p></li></ol><p><img src="https://zangzang.oss-cn-beijing.aliyuncs.com/img/f1bb3f5f8618c8ee0078b0b8d5d136a9.png" alt="f1bb3f5f8618c8ee0078b0b8d5d136a9"></p><ol start="3"><li><p>进行对比200在范围内，但是在未提交数组中所以不可见，以此类推，查出来的还是name=臧臧，</p></li><li><p>此时我们进行这样的操作新建一个会话，然后进行同样的查询操作，这个时候生成的read-view是[200]，300.因为我们此时生成快照的时间在100和300都提交的时刻所以read-view是这样的继续对比200在范围内，并且在未提交数组中不可见，上边一样，一直到100的时候，小于min_id属于已提交的所有能读出name=朵橙</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法与外挂标签写法汇总</title>
      <link href="/posts/2013454d.html"/>
      <url>/posts/2013454d.html</url>
      
        <content type="html"><![CDATA[<h1>1.Markdown语法自带格式</h1><div class="note info flat"><p>参考：<a href="https://blog.csdn.net/u014061630/article/details/81359144">Markdown语法图文全面详解(10分钟学会)</a></p></div><div class="note warning flat"><p>注意：此页面偶尔会存在CSS冲突问题!</p></div><h2 id="1-1-代码块">1.1 代码块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">\```shell</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br><span class="line">\```</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-2-多级标题">1.2 多级标题</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># H1</span></span><br><span class="line"><span class="section">## H2</span></span><br><span class="line"><span class="section">### H3</span></span><br><span class="line"><span class="section">#### H4</span></span><br><span class="line"><span class="section">##### H5</span></span><br><span class="line"><span class="section">###### H6</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>见本文章标题!</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-3-文字样式">1.3 文字样式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线演示<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">文字<span class="strong">**加粗**</span>演示</span><br><span class="line"></span><br><span class="line">文字<span class="emphasis">*斜体*</span>演示</span><br><span class="line"></span><br><span class="line">文本<span class="code">`高亮`</span>演示</span><br><span class="line"></span><br><span class="line">文本~~删除~~线演示</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span> = <span class="string">5</span>&gt;</span></span>5号字<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span></span>黑体<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">blue</span>&gt;</span></span>蓝色<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">MistyRose</span>&gt;</span></span>这里的背景色是：MistyRosen，此处输入任意想输入的内容<span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p><u>下划线演示</u></p><p>文字<strong>加粗</strong>演示</p><p>文字<em>斜体</em>演示</p><p>文本<code>高亮</code>演示</p><p>文本<s>删除</s>线演示</p><p><font size = 5>5号字</font><br><font face="黑体">黑体</font><br><font color=blue>蓝色</font></p><table><tr><td bgcolor=MistyRose>这里的背景色是：MistyRosen，此处输入任意想输入的内容</td></tr></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note info flat"><p>上述要点可参考:<a href="https://blog.csdn.net/qq_43732429/article/details/108034518">【Markdown语法】字体颜色大小及文字底色设置</a></p></div><h2 id="1-4-引用">1.4 引用</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt;  Java</span></span><br><span class="line"><span class="quote">&gt; 二级引用演示</span></span><br><span class="line"><span class="quote">&gt; MySQL</span></span><br><span class="line"><span class="quote">&gt; &gt;外键</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;事务</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;<span class="strong">**行级锁**</span>(引用内部一样可以用格式)</span></span><br><span class="line"><span class="quote">&gt; </span></span><br><span class="line"><span class="quote">&gt; ....</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><blockquote><p>Java<br>二级引用演示<br>MySQL</p><blockquote><p>外键</p><p>事务</p><p><strong>行级锁</strong>(引用内部一样可以用格式)</p></blockquote><p>…</p></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-5-分割线">1.5 分割线</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><hr><hr><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-6-列表-跟空格都可以">1.6 列表(*,+,-跟空格都可以)</h2><h3 id="1-6-1-无序列表">1.6.1 无序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> Java</span><br><span class="line"><span class="bullet">*</span> Python</span><br><span class="line"><span class="bullet">*</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> Java</span><br><span class="line"><span class="bullet">+</span> Python</span><br><span class="line"><span class="bullet">+</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> Java</span><br><span class="line"><span class="bullet">-</span> Python</span><br><span class="line"><span class="bullet">-</span> ...</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="1-6-2-有序列表">1.6.2 有序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 注意后面有空格</span></span><br><span class="line"><span class="bullet">1.</span> </span><br><span class="line"><span class="bullet">2.</span> </span><br><span class="line"><span class="bullet">3.</span> </span><br><span class="line"><span class="bullet">4.</span> </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li></li><li></li><li></li><li></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-7-图片">1.7 图片</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 本地图片</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/assets/pusheencode.webp&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图片&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:50%;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="section"># 在线图片</span></span><br><span class="line">![<span class="string">code</span>](<span class="link">https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>本地图片:<br><img src="/assets/pusheencode.webp" alt="示例图片" style="zoom:50%;" /><br>在线图片:<br><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png" alt="code"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-8-表格">1.8 表格</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 项目标号 | 资金     | 备注 |</span><br><span class="line">| -------- | -------- | ---- |</span><br><span class="line">| 1        | 100，000 | 无   |</span><br><span class="line">| 2        | 200，000 | 无   |</span><br><span class="line">| 3        | 300,600  | 重要 |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><table><thead><tr><th>项目标号</th><th>资金</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td>100，000</td><td>无</td></tr><tr><td>2</td><td>200，000</td><td>无</td></tr><tr><td>3</td><td>300,600</td><td>重要</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-9-公式">1.9 公式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\Gamma(z)=\int<span class="emphasis">_0^\infty t^&#123;z-1&#125;e^&#123;-t&#125;dt.</span></span><br><span class="line"><span class="emphasis">$$</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>$$<br>\Gamma(z)=\int_0^\infty t^{z-1}e^{-t}dt.<br>$$</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1>2.Butterfly外挂标签</h1><div class="note info flat"><p>这部分参考安知鱼:<a href="https://anzhiy.cn/posts/7d58.html">基于Butterfly的外挂标签引入</a></p></div><h2 id="2-1-行内文本样式-text">2.1 行内文本样式 text</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% u 文本内容 %&#125;</span><br><span class="line">&#123;% emp 文本内容 %&#125;</span><br><span class="line">&#123;% wavy 文本内容 %&#125;</span><br><span class="line">&#123;% del 文本内容 %&#125;</span><br><span class="line">&#123;% kbd 文本内容 %&#125;</span><br><span class="line">&#123;% psw 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line"><span class="bullet">2.</span> 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line"><span class="bullet">3.</span> 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line"><span class="bullet">4.</span> 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line"><span class="bullet">5.</span> 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line"><span class="bullet">6.</span> 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-2-行内文本-span">2.2 行内文本 span</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>字体</code>: logo, code</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li><li><code>对齐方向</code>: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% span center logo large, Volantis %&#125;</span><br><span class="line">&#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<br><span class='p center logo large'>Volantis</span><br><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-3-段落文本-p">2.3 段落文本 p</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% p 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>字体</code>: logo, code</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li><li><code>对齐方向</code>: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% p red, 红色 %&#125;、&#123;% p yellow, 黄色 %&#125;、&#123;% p green, 绿色 %&#125;、&#123;% p cyan, 青色 %&#125;、&#123;% p blue, 蓝色 %&#125;、&#123;% p gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% p center logo large, Volantis %&#125;</span><br><span class="line">&#123;% p center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<p class='p red'>红色</p>、<p class='p yellow'>黄色</p>、<p class='p green'>绿色</p>、<p class='p cyan'>青色</p>、<p class='p blue'>蓝色</p>、<p class='p gray'>灰色</p>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。</li></ul><p class='p center logo large'>Volantis</p><p class='p center small'>A Wonderful Theme for Hexo</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-4-引用note">2.4 引用note</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">通用配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">语法格式</button></li><li class="tab"><button type="button" data-href="#分栏-3">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-4">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-5">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">note:</span><br><span class="line">  # Note tag style values:</span><br><span class="line">  #  - simple    bs-callout old alert style. Default.</span><br><span class="line">  #  - modern    bs-callout new (v2-v3) alert style.</span><br><span class="line">  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br><span class="line">  #  - disabled  disable all CSS styles import of note tag.</span><br><span class="line">  style: simple</span><br><span class="line">  icons: false</span><br><span class="line">  border<span class="emphasis">_radius: 3</span></span><br><span class="line"><span class="emphasis">  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line"><span class="emphasis">  # Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line"><span class="emphasis">  light_</span>bg<span class="emphasis">_offset: 0</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 自带icon</span></span><br><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"><span class="section"># 外部icon</span></span><br><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.自带icon</p><table><thead><tr><th>参数</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td>class</td><td style="text-align:center">【可选】标识，不同的标识有不同的配色 （ default / primary / success / info / warning / danger ）</td></tr><tr><td>no-icon</td><td style="text-align:center">【可选】不显示 icon</td></tr><tr><td>style</td><td style="text-align:center">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td></tr></tbody></table><p>2.外部icon</p><table><thead><tr><th>参数</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td>class</td><td style="text-align:center">【可选】标识，不同的标识有不同的配色 （ default / blue / pink / red / purple / orange / green ）</td></tr><tr><td>no-icon</td><td style="text-align:center">【可选】可配置自定义 icon (只支持 fontawesome 图标, 也可以配置 no-icon )</td></tr><tr><td>style</td><td style="text-align:center">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><details class="folding-tag" blue><summary> 1.自带icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note simple %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note modern %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default modern %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success modern %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info modern %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning modern %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger modern %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note flat %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger flat %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note disabled %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default disabled %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary disabled %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success disabled %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info disabled %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning disabled %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger disabled %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default no-icon %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success no-icon %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning no-icon %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger no-icon %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 2.外部icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; simple%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; modern%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; disabled %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; disabled %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue no-icon %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink no-icon %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red no-icon %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple no-icon %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green no-icon %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-5"><details class="folding-tag" blue><summary> 1.自带icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div>2.`modern`样式<div class="note modern"><p>默认 提示块标签</p></div><div class="note default modern"><p>default 提示块标签</p></div><div class="note primary modern"><p>primary 提示块标签</p></div><div class="note success modern"><p>success 提示块标签</p></div><div class="note info modern"><p>info 提示块标签</p></div><div class="note warning modern"><p>warning 提示块标签</p></div><div class="note danger modern"><p>danger 提示块标签</p></div><p>3.<code>flat</code>样式</p><div class="note flat"><p>默认 提示块标签</p></div><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div><p>4.<code>disabled</code>样式</p><div class="note disabled"><p>默认 提示块标签</p></div><div class="note default disabled"><p>default 提示块标签</p></div><div class="note primary disabled"><p>primary 提示块标签</p></div><div class="note success disabled"><p>success 提示块标签</p></div><div class="note info disabled"><p>info 提示块标签</p></div><div class="note warning disabled"><p>warning 提示块标签</p></div><div class="note danger disabled"><p>danger 提示块标签</p></div><p>5.<code>no-icon</code>样式</p><div class="note no-icon flat"><p>默认 提示块标签</p></div><div class="note default no-icon flat"><p>default 提示块标签</p></div><div class="note primary no-icon flat"><p>primary 提示块标签</p></div><div class="note success no-icon flat"><p>success 提示块标签</p></div><div class="note info no-icon flat"><p>info 提示块标签</p></div><div class="note warning no-icon flat"><p>warning 提示块标签</p></div><div class="note danger no-icon flat"><p>danger 提示块标签</p></div>              </div>            </details><details class="folding-tag" blue><summary> 2.外部icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>2.<code>modern</code>样式</p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>3.<code>flat</code>样式</p><div class="note icon-padding flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>4.<code>disabled</code>样式</p><div class="note icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding disabled"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding disabled"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding disabled"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding disabled"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding disabled"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>5.<code>no-icon</code>样式</p><div class="note no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue no-icon flat"><p>2021年快到了…</p></div><div class="note pink no-icon flat"><p>小心开车 安全至上</p></div><div class="note red no-icon flat"><p>这是三片呢？还是四片？</p></div><div class="note orange no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple no-icon flat"><p>剪刀石头布</p></div><div class="note green no-icon flat"><p>前端最讨厌的浏览器</p></div>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-5-上标标签-tip">2.5 上标标签 tip</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>样式</code>: success,error,warning,bolt,ban,home,sync,cogs,key,bell</li><li><code>自定义图标</code>: 支持fontawesome。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip %&#125;default&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip info %&#125;info&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip fa-atom %&#125;自定义font awesome图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="tip "><p>default</p></div><div class="tip info"><p>info</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-atom"><p>自定义font awesome图标</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-6-动态标签-anima">2.6 动态标签 anima</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><div class="note info flat"><ol><li>将所需的CSS类添加到图标（或DOM中的任何元素）。</li><li>对于父级悬停样式，需要给目标元素添加指定CSS类，同时还要给目标元素的父级元素添加CSS类<code>faa-parent animated-hover</code>。（详情见示例及示例源码）<br>You can regulate the speed of the animation by adding the CSS class or . faa-fastfaa-slow</li><li>可以通过给目标元素添加CSS类<code>faa-fast</code>或<code>faa-slow</code>来控制动画快慢。</li></ol></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.On DOM load（当页面加载时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>2.调整动画速度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated faa-fast %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated faa-slow %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>3.On hover（当鼠标悬停时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated-hover %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated-hover %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>4.On parent hover（当鼠标悬停在父级元素时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-horizontal&quot;</span>&gt;</span></span>warning<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-flash&quot;</span>&gt;</span></span>ban<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.On DOM load（当页面加载时显示动画）</p><div class="tip warning faa-horizontal animated"><p>warning</p></div><div class="tip ban faa-flash animated"><p>ban</p></div>2.调整动画速度<div class="tip warning faa-horizontal animated faa-fast"><p>warning</p></div><div class="tip ban faa-flash animated faa-slow"><p>ban</p></div>3.On hover（当鼠标悬停时显示动画）<div class="tip warning faa-horizontal animated-hover"><p>warning</p></div><div class="tip ban faa-flash animated-hover"><p>ban</p></div>4.On parent hover（当鼠标悬停在父级元素时显示动画）<div class="tip warning faa-parent animated-hover"><p class="faa-horizontal">warning</p></div><div class="tip ban faa-parent animated-hover"><p class="faa-flash">ban</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-7-复选列表-checkbox">2.7 复选列表 checkbox</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>样式</code>: plus, minus, times</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>选中状态</code>: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 纯文本测试 %&#125;</span><br><span class="line">&#123;% checkbox checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% checkbox red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox plus green checked, 增加 %&#125;</span><br><span class="line">&#123;% checkbox minus yellow checked, 减少 %&#125;</span><br><span class="line">&#123;% checkbox times red checked, 叉 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div><div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-8-单选列表-radio">2.8 单选列表 radio</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>选中状态</code>: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 纯文本测试 %&#125;</span><br><span class="line">&#123;% radio checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% radio red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% radio green, 绿色 %&#125;</span><br><span class="line">&#123;% radio yellow, 黄色 %&#125;</span><br><span class="line">&#123;% radio cyan, 青色 %&#125;</span><br><span class="line">&#123;% radio blue, 蓝色 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class='checkbox'><input type="radio" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="radio" />            <p>支持自定义颜色</p>            </div><div class='checkbox green'><input type="radio" />            <p>绿色</p>            </div><div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div><div class='checkbox cyan'><input type="radio" />            <p>青色</p>            </div><div class='checkbox blue'><input type="radio" />            <p>蓝色</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-9-时间轴-timeline">2.9 时间轴 timeline</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间线标题（可选）[,color] %&#125;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>title</code>:标题/时间线</li><li><code>color</code>:<code>timeline</code>颜色:default(留空) / blue / pink / red / purple / orange / green</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间轴样式,blue %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-07-24 [<span class="string">2.6.6 -&gt; 3.0</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 如果有 <span class="code">`hexo-lazyload-image`</span> 插件，需要删除并重新安装最新版本，设置 <span class="code">`lazyload.isSPA: true`</span>。</span><br><span class="line"><span class="bullet">2.</span> 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <span class="code">`use_cdn: true`</span> 则需要删除。</span><br><span class="line"><span class="bullet">3.</span> 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</span><br><span class="line"><span class="bullet">4.</span> 2.x 版本的置顶 <span class="code">`top: true`</span> 改为了 <span class="code">`pin: true`</span>，并且同样适用于 <span class="code">`layout: page`</span> 的页面。</span><br><span class="line"><span class="bullet">5.</span> 如果使用了 <span class="code">`hexo-offline`</span> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-05-15 [<span class="string">2.6.3 -&gt; 2.6.6</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6</span>) --&gt;</span><br><span class="line"></span><br><span class="line">不需要额外处理。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-04-20 [<span class="string">2.6.2 -&gt; 2.6.3</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 全局搜索 <span class="code">`seotitle`</span> 并替换为 <span class="code">`seo_title`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的索引规则有变，使用 group 组件的文章内，<span class="code">`group: group_name`</span> 对应的组件名必须是 <span class="code">`group_name`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的列表名优先显示文章的 <span class="code">`short_title`</span> 其次是 <span class="code">`title`</span>。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴样式</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-07-24 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases">2.6.6 -&gt; 3.0</a></p></div></div><div class='timeline-item-content'><ol><li>如果有 <code>hexo-lazyload-image</code> 插件，需要删除并重新安装最新版本，设置 <code>lazyload.isSPA: true</code>。</li><li>2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <code>use_cdn: true</code> 则需要删除。</li><li>2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</li><li>2.x 版本的置顶 <code>top: true</code> 改为了 <code>pin: true</code>，并且同样适用于 <code>layout: page</code> 的页面。</li><li>如果使用了 <code>hexo-offline</code> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p></div></div><div class='timeline-item-content'><p>不需要额外处理。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-04-20 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.6.2 -&gt; 2.6.3</a></p></div></div><div class='timeline-item-content'><ol><li>全局搜索 <code>seotitle</code> 并替换为 <code>seo_title</code>。</li><li>group 组件的索引规则有变，使用 group 组件的文章内，<code>group: group_name</code> 对应的组件名必须是 <code>group_name</code>。</li><li>group 组件的列表名优先显示文章的 <code>short_title</code> 其次是 <code>title</code>。</li></ol></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-10-链接卡片-link">2.10 链接卡片 link</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 标题, 链接, 图片链接（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 糖果屋教程贴, https://akilar.top/posts/615e2dec/, https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="tag link"><a class="link-card" title="糖果屋教程贴" href="https://akilar.top/posts/615e2dec/"><div class="left"><img src="https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico"/></div><div class="right"><p class="text">糖果屋教程贴</p><p class="url">https://akilar.top/posts/615e2dec/</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-11-按钮-btns">2.11 按钮 btns</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns 样式参数 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>圆角样式：rounded, circle</li><li>增加文字样式：可以在容器内增加 <code>&lt;b&gt;</code>标题<code>&lt;/b&gt;</code>和<code>&lt;p&gt;</code>描述文字<code>&lt;/p&gt;</code></li><li>布局方式：<br>默认为自动宽度，适合视野内只有一两个的情况。</li></ol><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>wide</td><td>宽一点的按钮</td></tr><tr><td>fill</td><td>填充布局，自动铺满至少一行，多了会换行</td></tr><tr><td>center</td><td>居中，按钮之间是固定间距</td></tr><tr><td>around</td><td>居中分散</td></tr><tr><td>grid2</td><td>等宽最多2列，屏幕变窄会适当减少列数</td></tr><tr><td>grid3</td><td>等宽最多3列，屏幕变窄会适当减少列数</td></tr><tr><td>grid4</td><td>等宽最多4列，屏幕变窄会适当减少列数</td></tr><tr><td>grid5</td><td>等宽最多5列，屏幕变窄会适当减少列数</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle grid5 %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>2.或者含有图标的按钮</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns rounded grid5 %&#125;</span><br><span class="line">&#123;% cell 下载源码, /, fas fa-download %&#125;</span><br><span class="line">&#123;% cell 查看文档, /, fas fa-book-open %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle center grid5 %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p red, 专业版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p green, 免费版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p><div class="btns circle grid5">            <a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>          </div>2.或者含有图标的按钮<div class="btns rounded grid5">            <a class="button" href='/' title='下载源码'><i class='fas fa-download'></i>下载源码</a><a class="button" href='/' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>          </div>3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中<div class="btns circle center grid5">            <a href='https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p red'>专业版</p>  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png'></a><a href='https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p green'>免费版</p>  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png'></a>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-12-github卡片-ghcard">2.12 github卡片 ghcard</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% ghcard 用户名, 其它参数（可选） %&#125;</span><br><span class="line">&#123;% ghcard 用户名/仓库, 其它参数（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>使用<code>,</code>分割各个参数。写法为：<code>参数名=参数值</code><br>以下只写几个常用参数值。</p><table><thead><tr><th><strong>参数名</strong></th><th>取值</th><th>释义</th></tr></thead><tbody><tr><td>hide</td><td>stars,commits,prs,issues,contribs</td><td>隐藏指定统计</td></tr><tr><td>count_private</td><td>true</td><td>将私人项目贡献添加到总提交计数中</td></tr><tr><td>show_icons</td><td>true</td><td>显示图标</td></tr><tr><td>theme</td><td>查阅:<a href="https://github.com/anuraghazra/github-readme-stats/blob/master/themes/README.md">Available Themes</a></td><td>主题</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.用户信息卡片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard fomalhaut1998 %&#125; | &#123;% ghcard fomalhaut1998, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=buefy %&#125; | &#123;% ghcard fomalhaut1998, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=onedark %&#125; | &#123;% ghcard fomalhaut1998, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=algolia %&#125; | &#123;% ghcard fomalhaut1998, theme=calm %&#125; |</span><br></pre></td></tr></table></figure><p>2.仓库信息卡片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=buefy %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=onedark %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=algolia %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=calm %&#125; |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.用户信息卡片</p><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=calm&show_owner=true"/></a></td></tr></tbody></table><p>2.仓库信息卡片</p><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=calm&show_owner=true"/></a></td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-13-github徽标-ghbdage">2.13 github徽标 ghbdage</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage [right],[left],[logo]||[color],[link],[title]||[option] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>left</code>：徽标左边的信息，必选参数。</li><li><code>right</code>: 徽标右边的信息，必选参数，</li><li><code>logo</code>：徽标图标，图标名称详见<a href="https://simpleicons.org/">simpleicons</a>，可选参数。</li><li><code>color</code>：徽标右边的颜色，可选参数。</li><li><code>link</code>：指向的链接，可选参数。</li><li><code>title</code>：徽标的额外信息，可选参数。主要用于优化SEO，但<code>object</code>标签不会像<code>a</code>标签一样在鼠标悬停显示<code>title</code>信息。</li><li><code>option</code>：自定义参数，支持<a href="https://shields.io/">shields.io</a>的全部API参数支持，具体参数可以参看上文中的拓展写法示例。形式为<code>name1=value2&amp;name2=value2</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.基本参数,定义徽标左右文字和图标</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Theme,Butterfly %&#125;</span><br><span class="line">&#123;% bdage Frame,Hexo,hexo %&#125;</span><br></pre></td></tr></table></figure><p>2.信息参数，定义徽标右侧内容背景色，指向链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage CDN,JsDelivr,jsDelivr||abcdef,https://metroui.org.ua/index.html,本站使用JsDelivr为静态资源提供CDN加速 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割</span><br><span class="line">&#123;% bdage Source,GitHub,GitHub||,https://github.com/ %&#125;</span><br></pre></td></tr></table></figure><p>3.拓展参数，支持shields的API的全部参数内容</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Hosted,Vercel,Vercel||brightgreen,https://vercel.com/,本站采用双线部署，默认线路托管于Vercel||style=social&amp;logoWidth=20 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割</span><br><span class="line">&#123;% bdage Hosted,Vercel,Vercel||||style=social&amp;logoWidth=20&amp;logoColor=violet %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.基本参数,定义徽标左右文字和图标</p><p><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Butterfly-Theme-orange?logo=&color=orange&link=&"></object><br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Hexo-Frame-orange?logo=hexo&color=orange&link=&"></object></p><p>2.信息参数，定义徽标右侧内容背景色，指向链接</p><p><object class="ghbdage" style="margin-inline:5px" title="本站使用JsDelivr为静态资源提供CDN加速" standby="loading..." data="https://img.shields.io/badge/JsDelivr-CDN-orange?logo=jsDelivr&color=abcdef&link=https://metroui.org.ua/index.html&"></object><br>//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割<br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/GitHub-Source-orange?logo=GitHub&color=orange&link=https://github.com/&"></object></p><p>3.拓展参数，支持shields的API的全部参数内容</p><p><object class="ghbdage" style="margin-inline:5px" title="本站采用双线部署，默认线路托管于Vercel" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=brightgreen&link=https://vercel.com/&style=social&logoWidth=20"></object><br>//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割<br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=orange&link=&style=social&logoWidth=20&logoColor=violet"></object></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-14-网站卡片-sites">2.14 网站卡片 sites</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site xaoxuu, url=https://xaoxuu.com, screenshot=https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg, avatar=https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png, description=简约风格 %&#125;</span><br><span class="line">&#123;% site inkss, url=https://inkss.cn, screenshot=https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg, avatar=https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site MHuiG, url=https://blog.mhuig.top, screenshot=https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png, avatar=https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png, avatar=https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="site-card-group"><a class="site-card" href="https://fomalhaut1998.com"><div class="img"><img src="https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png"/><span class="title">fomalhaut1998</span><span class="desc">简约风格</span></div></a><a class="site-card" href="https://inkss.cn"><div class="img"><img src="https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg"/><span class="title">inkss</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://blog.mhuig.top"><div class="img"><img src="https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png"/><span class="title">MHuiG</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://colsrch.top"><div class="img"><img src="https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg"/><span class="title">Colsrch</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://linhk1606.github.io"><div class="img"><img src="https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png"/></div><div class="info"><img src="https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png"/><span class="title">Linhk1606</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-15-行内图片-inlineimage">2.15 行内图片 inlineimage</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% inlineimage 图片链接, height=高度（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>高度</code>：height=20px</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif %&#125; 一段话。</span><br><span class="line"></span><br><span class="line">这又是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif, height=40px %&#125; 一段话。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>这是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif" style="height:1.5em"/> 一段话。</p><p>这又是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif" style="height:40px;"/> 一段话。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-16-单张图片-image">2.16 单张图片 image</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>图片宽度高度：width=300px, height=32px</li><li>图片描述：alt=图片描述（butterfly需要在主题配置文件中开启图片描述）</li><li>占位背景色：bg=#f2f2f2</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.添加描述：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><p>2.指定宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px %&#125;</span><br></pre></td></tr></table></figure><p>3.指定宽度并添加描述：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><p>4.设置占位背景色：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, bg=#1D0C04, alt=优化不同宽度浏览的观感 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.添加描述：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>2..指定宽度<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" style="width:400px;"/></div></div>3.指定宽度并添加描述：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。" style="width:400px;"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>4.设置占位背景色：<div class="img-wrap"><div class="img-bg" style="background:#1D0C04"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="优化不同宽度浏览的观感" style="width:400px;"/></div><span class="image-caption">优化不同宽度浏览的观感</span></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-17-音频-audio">2.17 音频 audio</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio 音频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="audio"><audio controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-18-视频-video">2.18 视频 video</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video 视频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>对齐方向</code>：left, center, right</li><li><code>列数</code>：逗号后面直接写列数，支持 1 ～ 4 列。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.100%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br></pre></td></tr></table></figure><p>2.50%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 2 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><p>3.25%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 4 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.100%宽度</p><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>2.50%宽度<div class="videos" col='2'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div>3.25%宽度<div class="videos" col='4'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-19-相册-gallery">2.19 相册 gallery</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 圖片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>gallerygroup 相册图库</li></ul><table><thead><tr><th>参数名</th><th>释义</th></tr></thead><tbody><tr><td>name</td><td>图库名字</td></tr><tr><td>description</td><td>图库描述</td></tr><tr><td>link</td><td>链接到对应相册的地址</td></tr><tr><td>img-url</td><td>图库封面</td></tr></tbody></table><ul><li><p>gallery 相册</p><p>区别于旧版的Gallery相册,新的Gallery相册会自动根据图片长度进行排版，书写也更加方便，与markdown格式一样。可根据需要插入到相应的md。无需再自己配置长宽。<strong>建议在粘贴时故意使用长短、大小、横竖不一的图片</strong>，会有更好的效果。（尺寸完全相同的图片只会平铺输出，效果很糟糕）</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup MC 在Rikkaの六花服务器里留下的足迹 &#x27;/gallery/MC/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg %&#125;</span><br><span class="line">&#123;% galleryGroup Gundam 哦咧哇gundam哒！ &#x27;/gallery/Gundam/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png %&#125;</span><br><span class="line">&#123;% galleryGroup I-am-Akilar 某种意义上也算自拍吧 &#x27;/gallery/I-am-Akilar/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.gallerygroup 相册图库</p><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">MC</div>  <p>在Rikkaの六花服务器里留下的足迹</p>  <a href='/gallery/MC/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">Gundam</div>  <p>哦咧哇gundam哒！</p>  <a href='/gallery/Gundam/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">I-am-Akilar</div>  <p>某种意义上也算自拍吧</p>  <a href='/gallery/I-am-Akilar/'></a>  </figcaption>  </figure></div>2.gallery 相册<div class="fj-gallery"><p><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg" alt=""></p>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-20-折叠框-folding">2.20 折叠框 folding</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 参数（可选）, 标题 %&#125;</span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><!-- tab 参数配置 --><ol><li><p><code>颜色</code>：blue, cyan, green, yellow, red</p></li><li><p><code>状态</code>：状态填写 open 代表默认打开。</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class="line"></span><br><span class="line">这是一个默认打开的折叠框。</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line">假装这里有代码块（代码块没法嵌套代码块）</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> haha</span><br><span class="line"><span class="bullet">-</span> hehe</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding blue, 查看嵌套测试2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class="line"></span><br><span class="line">hahaha <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png&#x27;</span> <span class="attr">style</span>=<span class="string">&#x27;height:24px&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><details class="folding-tag" ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details><details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class='content'>              <p>假装这里有代码块（代码块没法嵌套代码块）</p>              </div>            </details><details class="folding-tag" yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details class="folding-tag" red><summary> 查看嵌套测试 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details class="folding-tag" ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-21-分栏-tab">2.21 分栏 tab</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p>Unique name :</p><ul><li><p>选项卡块标签的唯一名称，不带逗号。</p></li><li><p>将在#id中用作每个标签及其索引号的前缀。</p></li><li><p>如果名称中包含空格，则对于生成#id，所有空格将由破折号代替。</p></li><li><p>仅当前帖子/页面的URL必须是唯一的！</p></li></ul></li><li><p>[index]:</p><ul><li><p>活动选项卡的索引号。</p></li><li><p>如果未指定，将选择第一个标签（1）。</p></li><li><p>如果index为-1，则不会选择任何选项卡。</p></li><li><p>可选参数。</p></li></ul></li><li><p>[Tab caption]:</p><ul><li><p>当前选项卡的标题。</p></li><li><p>如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。</p></li><li><p>如果未指定标题，但指定了图标，则标题将为空。</p></li><li><p>可选参数。</p></li></ul></li><li><p>[@icon]:</p><ul><li><p>FontAwesome图标名称（全名，看起来像“ fas fa-font”）</p></li><li><p>可以指定带空格或不带空格；</p></li><li><p>例如’Tab caption @icon’ 和 ‘Tab caption@icon’.</p></li><li><p>可选参数。</p></li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.Demo 1 - 预设选择第一个【默认】</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>2.Demo 2 - 预设选择tabs</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test2, 3 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>3.Demo 3 - 没有预设值</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test3, -1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line"><span class="strong">**tab名字为第一个Tab**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"><span class="strong">**只有图标 没有Tab名字**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.Demo 1 - 预设选择第一个【默认】</p><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>2.Demo 2 - 预设选择tabs</p><div class="tabs" id="test2"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test2-1">test2 1</button></li><li class="tab"><button type="button" data-href="#test2-2">test2 2</button></li><li class="tab active"><button type="button" data-href="#test2-3">test2 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>3.Demo 3 - 没有预设值</p><div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">test3 1</button></li><li class="tab"><button type="button" data-href="#test3-2">test3 2</button></li><li class="tab"><button type="button" data-href="#test3-3">test3 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-22-诗词标签-poem">2.22 诗词标签 poem</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><ol><li><code>title</code>：诗词标题</li><li><code>author</code>：作者，可以不写</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% poem 水调歌头,苏轼 %&#125;</span><br><span class="line">丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。</span><br><span class="line">明月几时有？把酒问青天。</span><br><span class="line">不知天上宫阙，今夕是何年？</span><br><span class="line">我欲乘风归去，又恐琼楼玉宇，高处不胜寒。</span><br><span class="line">起舞弄清影，何似在人间？</span><br><span class="line"></span><br><span class="line">转朱阁，低绮户，照无眠。</span><br><span class="line">不应有恨，何事长向别时圆？</span><br><span class="line">人有悲欢离合，月有阴晴圆缺，此事古难全。</span><br><span class="line">但愿人长久，千里共婵娟。</span><br><span class="line">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。<br>明月几时有？把酒问青天。<br>不知天上宫阙，今夕是何年？<br>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>起舞弄清影，何似在人间？</p><p>转朱阁，低绮户，照无眠。<br>不应有恨，何事长向别时圆？<br>人有悲欢离合，月有阴晴圆缺，此事古难全。<br>但愿人长久，千里共婵娟。</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-23-阿里图标-icon">2.23 阿里图标 icon</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon [icon-xxxx],[font-size] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>icon-xxxx</code>：表示图标<code>font-class</code>,可以在自己的阿里矢量图标库项目的<code>font-class</code>引用方案内查询并复制。</li><li><code>font-size</code>：表示图标大小，直接填写数字即可，单位为<code>em</code>。图标大小默认值为<code>1em</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon icon-rat<span class="emphasis">_zi %&#125;&#123;% icon icon-rat,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-ox_</span>chou,3 %&#125;&#123;% icon icon-ox,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-tiger<span class="emphasis">_yin,5 %&#125;&#123;% icon icon-tiger,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rabbit_</span>mao,1 %&#125;&#123;% icon icon-rabbit,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dragon<span class="emphasis">_chen,3 %&#125;&#123;% icon icon-dragon,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-snake_</span>si,5 %&#125;&#123;% icon icon-snake,6 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-horse<span class="emphasis">_wu %&#125;&#123;% icon icon-horse,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-goat_</span>wei,3 %&#125;&#123;% icon icon-goat,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-monkey<span class="emphasis">_shen,5 %&#125;&#123;% icon icon-monkey,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rooster_</span>you %&#125;&#123;% icon icon-rooster,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dog<span class="emphasis">_xu,3 %&#125;&#123;% icon icon-dog,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-boar_</span>hai,5 %&#125;&#123;% icon icon-boar,6 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rat_zi"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rat"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-ox_chou"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-ox"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-tiger_yin"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-tiger"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rabbit_mao"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rabbit"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dragon_chen"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dragon"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-snake_si"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-snake"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-horse_wu"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-horse"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-goat_wei"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-goat"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-monkey_shen"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-monkey"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rooster_you"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rooster"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dog_xu"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dog"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-boar_hai"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-boar"></use></svg></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-24-特效标签wow">2.24 特效标签wow</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow [animete],[duration],[delay],[offset],[iteration] %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endwow %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>animate</code>: 动画样式，效果详见<a href="https://animate.style/">animate.css参考文档</a></li><li><code>duration</code>: 选填项，动画持续时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>delay</code>: 选填项，动画开始的延迟时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>offset</code>: 选填项，开始动画的距离（相对浏览器底部）</li><li><code>iteration</code>: 选填项，动画重复的次数</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.flip动画效果。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>2.zoomIn动画效果，持续5s，延时5s，离底部100距离时启动，重复10次</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>3.slideInRight动画效果，持续5s，延时5s</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__slideInRight,5s,5s %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note orange &#x27;fas fa-car&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`slideInRight`动画效果，持续`5s`，延时`5s`。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>4.heartBeat动画效果，延时5s，重复10次。此处注意不用的参数位置要留空，用逗号间隔。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__heartBeat,,5s,,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note red &#x27;fas fa-battery-half&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`heartBeat`动画效果，延时`5s`，重复`10`次。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.flip动画效果。</p><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p>2.zoomIn动画效果，持续5s，延时5s，离底部100距离时启动，重复10次</p><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p>3.slideInRight动画效果，持续5s，延时5s</p><div class='wow animate__slideInRight' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='' ><div class="note orange icon-padding modern"><i class="note-icon fas fa-car"></i><p><code>slideInRight</code>动画效果，持续<code>5s</code>，延时<code>5s</code>。</p></div></div><p>4.heartBeat动画效果，延时5s，重复10次。此处注意不用的参数位置要留空，用逗号间隔。</p><div class='wow animate__heartBeat' data-wow-duration='' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='10' ><div class="note red icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p><code>heartBeat</code>动画效果，延时<code>5s</code>，重复<code>10</code>次。</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-25-进度条-progress">2.25  进度条 progress</h2><div class="note info flat"><p>进度条标签参考<a href="https://rongbuqiu.com/jdt.html">沂佰孜猫-给HEXO文章添加彩色进度条</a>。<br>源样式提取自<a href="https://zwying0814.gitbook.io/cuteen/">Cuteen</a>主题。</p></div><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress [width] [color] [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>width</code>: 0到100的阿拉伯数字</li><li><code>color</code>: 颜色，取值有red,yellow,green,cyan,blue,gray</li><li><code>text</code>:进度条上的文字内容</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress 10 red 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 30 yellow 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 50 green 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 70 cyan 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 90 blue 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 100 gray 进度条样式预览 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-red"  style="width: 10%" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-yellow"  style="width: 30%" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-green"  style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-cyan"  style="width: 70%" aria-valuenow="70" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-blue"  style="width: 90%" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-gray"  style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-26-注释-notation">2.26 注释 notation</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota [label] , [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p><code>label</code>: 注释词汇</p></li><li><p><code>text</code>: 悬停显示的注解内容</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota 把鼠标移动到我上面试试 ,可以看到注解内容出现在顶栏 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p><span class='nota' data-nota='可以看到注解内容出现在顶栏'>把鼠标移动到我上面试试</span></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-27-气泡注释-bubble">2.27 气泡注释 bubble</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bubble [content] , [notation] ,[background-color] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>content</code>: 注释词汇</li><li><code>notation</code>: 悬停显示的注解内容</li><li><code>background-color</code>: 可选，气泡背景色。默认为“#71a4e3”</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的&#123;% bubble 兄弟相邻选择器,&quot;例如 h1 + p &#123;margin-top:50px;&#125;&quot; %&#125;，&#123;% bubble flex布局,&quot;Flex 是 Flexible Box 的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;,&quot;#ec5830&quot; %&#125;，&#123;% bubble transform变换,&quot;transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。&quot;,&quot;#1db675&quot; %&#125;，animation的&#123;% bubble 贝塞尔速度曲线,&quot;贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋&quot;,&quot;#de4489&quot; %&#125;写法，还有今天刚看到的&#123;% bubble clip-path,&quot;clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。&quot;,&quot;#868fd7&quot; %&#125;属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的<span class="bubble-content">兄弟相邻选择器</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;">例如 h1 + p {margin-top:50px;}</span></span>，<span class="bubble-content">flex布局</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">Flex 是 Flexible Box 的缩写，意为弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;</span></span>，<span class="bubble-content">transform变换</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#1db675;">transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。</span></span>，animation的<span class="bubble-content">贝塞尔速度曲线</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#de4489;">贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋</span></span>写法，还有今天刚看到的<span class="bubble-content">clip-path</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。</span></span>属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-28-引用文献-reference">2.28 引用文献 reference</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% referto [id] , [literature] %&#125;</span><br><span class="line">&#123;% referfrom [id] , [literature] , [url] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p>referto 引用上标</p><ul><li><p><code>id</code>: 上标序号内容，需与referfrom标签的id对应才能实现跳转</p></li><li><p><code>literature</code>: 引用的参考文献名称</p></li></ul></li><li><p>referfrom 引用出处</p><ul><li><p><code>id</code>: 序号内容，需与referto标签的id对应才能实现 跳转</p></li><li><p><code>literature</code>: 引用的参考文献名称</p></li><li><p><code>url</code>: 引用的参考文献链接，可省略</p></li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Akilarの糖果屋(akilar.top)是一个私人性质的博客&#123;% referto &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27; %&#125;，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架&#123;% referto &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27; %&#125;，Butterfly主题&#123;% referto &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">本项目参考了Volantis&#123;% referto &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27; %&#125;的标签样式。引入<span class="code">`[tag].js`</span>，并针对<span class="code">`butterfly`</span>主题修改了相应的<span class="code">`[tag].styl`</span>。在此鸣谢<span class="code">`Volantis`</span>主题众开发者。</span><br><span class="line">主要参考内容包括各个volantis的内置标签插件文档&#123;% referto &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27; %&#125;</span><br><span class="line">Butterfly主题的各个衍生魔改&#123;% referto &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27; %&#125;&#123;% referto &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27; %&#125;&#123;% referto &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27; %&#125;&#123;% referto &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% referfrom &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27;,&#x27;https://jq.qq.com/?<span class="emphasis">_wv=1027&amp;k=pGLB2C0N&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27;,&#x27;https://hexo.io/zh-cn/docs/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27;,&#x27;https://butterfly.js.org/posts/21cfbf15/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27;,&#x27;https://volantis.js.org/v5/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27;,&#x27;https://volantis.js.org/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27;,&#x27;https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27;,&#x27;https://lovelijunyi.gitee.io/posts/c898.html&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27;,&#x27;https://github.com/l-lin/font-awesome-animation&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27;,&#x27;https://www.antmoe.com/posts/3b43914f/&#x27; %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>Akilarの糖果屋(akilar.top)是一个私人性质的博客<span class="hidden-anchor" id="referto_[1]"></span><sup class="reference"><a href="#referfrom_[1]">[1]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Akilarの糖果屋群聊简介</span><span class="reference-title">参考资料</span></span></span>，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架<span class="hidden-anchor" id="referto_[2]"></span><sup class="reference"><a href="#referfrom_[2]">[2]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Hexo中文文档</span><span class="reference-title">参考资料</span></span></span>，Butterfly主题<span class="hidden-anchor" id="referto_[3]"></span><sup class="reference"><a href="#referfrom_[3]">[3]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档(一) 快速开始</span><span class="reference-title">参考资料</span></span></span></p><p>本项目参考了Volantis<span class="hidden-anchor" id="referto_[4]"></span><sup class="reference"><a href="#referfrom_[4]">[4]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">hexo-theme-volantis 标签插件</span><span class="reference-title">参考资料</span></span></span>的标签样式。引入<code>[tag].js</code>，并针对<code>butterfly</code>主题修改了相应的<code>[tag].styl</code>。在此鸣谢<code>Volantis</code>主题众开发者。<br>主要参考内容包括各个volantis的内置标签插件文档<span class="hidden-anchor" id="referto_[5]"></span><sup class="reference"><a href="#referfrom_[5]">[5]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Volantis文档:内置标签插件</span><span class="reference-title">参考资料</span></span></span><br>Butterfly主题的各个衍生魔改<span class="hidden-anchor" id="referto_[6]"></span><sup class="reference"><a href="#referfrom_[6]">[6]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档:标签外挂（Tag Plugins</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[7]"></span><sup class="reference"><a href="#referfrom_[7]">[7]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小弋の生活馆全样式预览</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[8]"></span><sup class="reference"><a href="#referfrom_[8]">[8]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">l-lin-font-awesome-animation</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[9]"></span><sup class="reference"><a href="#referfrom_[9]">[9]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小康的butterfly主题使用文档</span><span class="reference-title">参考资料</span></span></span></p><div class="reference-source"><span class="hidden-anchor" id="referfrom_[1]"></span><a class="reference-anchor" href="#referto_[1]">[1]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://jq.qq.com/?_wv=1027&k=pGLB2C0N">Akilarの糖果屋群聊简介</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[2]"></span><a class="reference-anchor" href="#referto_[2]">[2]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://hexo.io/zh-cn/docs/">Hexo中文文档</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[3]"></span><a class="reference-anchor" href="#referto_[3]">[3]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安装文档(一) 快速开始</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[4]"></span><a class="reference-anchor" href="#referto_[4]">[4]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/v5/tag-plugins/">hexo-theme-volantis 标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[5]"></span><a class="reference-anchor" href="#referto_[5]">[5]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/tag-plugins/">Volantis文档:内置标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[6]"></span><a class="reference-anchor" href="#referto_[6]">[6]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">Butterfly 安装文档:标签外挂（Tag Plugins</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[7]"></span><a class="reference-anchor" href="#referto_[7]">[7]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://lovelijunyi.gitee.io/posts/c898.html">小弋の生活馆全样式预览</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[8]"></span><a class="reference-anchor" href="#referto_[8]">[8]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://github.com/l-lin/font-awesome-animation">l-lin-font-awesome-animation</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[9]"></span><a class="reference-anchor" href="#referto_[9]">[9]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://www.antmoe.com/posts/3b43914f/">小康的butterfly主题使用文档</a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-29-PDF展示">2.29 PDF展示</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pdf 文件路径 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>文件路径</code>: 可以是相对路径或者是在线链接</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1.本地文件:在md文件路径下创建一个同名文件夹，其内放pdf文件名为xxx.pdf的文件</span></span><br><span class="line">&#123;% pdf xxx.pdf %&#125;</span><br><span class="line"><span class="section"># 2.在线链接</span></span><br><span class="line">&#123;% pdf https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>2.在线链接(要放到最外层才能起作用)</p><pre><code>&lt;div class=&quot;row&quot;&gt;&lt;embed src=&quot;https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf&quot; width=&quot;100%&quot; height=&quot;550&quot; type=&quot;application/pdf&quot;&gt;&lt;/div&gt;</code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-30-Hexo-tag-map-插件">2.30 Hexo-tag-map 插件</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% + 标签值 + 经度 + 纬度 + 文本 + 缩放等级 + 宽 + 高 + 默认图层 + %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><table><thead><tr><th style="text-align:center">地图名</th><th style="text-align:center">标签值 &lt;必填&gt;</th><th style="text-align:center">宽 (默认 100%) / 高 (默认 360px)</th><th style="text-align:center">缩放等级 (默认 14)</th><th style="text-align:center">宽 (默认 100%) / 高 (默认 360px)</th><th style="text-align:center">默认图层 (默认 1)</th></tr></thead><tbody><tr><td style="text-align:center">混合地图</td><td style="text-align:center">map</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 3~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~7</td></tr><tr><td style="text-align:center">谷歌地图</td><td style="text-align:center">googleMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~20</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~3</td></tr><tr><td style="text-align:center">高德地图</td><td style="text-align:center">gaodeMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 3~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~3</td></tr><tr><td style="text-align:center">百度地图</td><td style="text-align:center">baiduMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 4~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~2</td></tr><tr><td style="text-align:center">Geoq 地图</td><td style="text-align:center">geoqMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~5</td></tr><tr><td style="text-align:center">openstreet 地图</td><td style="text-align:center">openstreetMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">不支持此参数</td></tr></tbody></table><ol><li>参数之间，用英文逗号相隔</li><li>参数必须按上述事例顺序输入，不得为空</li><li>同一个页面，同一组经纬度值，只能插入一个相同标签值的地图 (若有需要，可以将第二个地图上，经度或纬度末尾删除一两个数)</li><li>参数取值必须在上述范围内</li><li>默认图层：即地图叠加层的值，默认常规地图还是卫星地图，可按地图显示顺序取值</li><li>缩放等级，数字越大，地图比例尺越小，显示的越精细</li><li>除标签值外，其他参数选填，但 每个参数的左边的参数必填</li><li>谷歌地图需要外网才能加载查看</li></ol><p>坐标获取：<a href="https://lbs.amap.com/tools/picker">高德地图坐标拾取系统</a> 、<a href="https://api.map.baidu.com/lbsapi/getpoint/index.html">百度地图坐标拾取系统</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% map 120.101101,30.239119 %&#125;</span><br><span class="line">&#123;% googleMap 120.101101,30.239119, 这里是西湖灵隐寺，据说求姻缘很灵验哦！ %&#125;</span><br><span class="line">&#123;% geoqMap 120.101101,30.239119, 这里是西湖灵隐寺，据说求姻缘很灵验哦！, 13, 90%, 320px, 3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div class="map-box" style="margin: 0.8rem 0 1.6rem 0;"><div id="map-120.101101-30.239119" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div></div><script type="text/javascript">var normalm=L.tileLayer.chinaProvider('GaoDe.Normal.Map',{maxZoom:20,minZoom:1,attribution:'高德地图'});var imgm=L.tileLayer.chinaProvider('GaoDe.Satellite.Map',{maxZoom:20,minZoom:1,attribution:'高德地图'});var imga=L.tileLayer.chinaProvider('GaoDe.Satellite.Annotion',{maxZoom:20,minZoom:1,attribution:'高德地图'});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:20,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'});routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1,attribution:'Google Maps'});var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:21,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm]),image=L.layerGroup([imgm,imga]);var baseLayers={"高德地图":normal,"智图地图":normalm1,"谷歌地图":normalMap,"高德卫星地图":imgm,"谷歌卫星地图":satelliteMap,"高德卫星标注":image,"谷歌卫星标注":routeMap};var mymap=L.map('map-120.101101-30.239119',{center:[30.239119,120.101101],zoom:14,layers:[normal],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);</script><br><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div id="googleMap-120.101101-30.239119" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div><script type="text/javascript">var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:22,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:22,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:22,minZoom:1,attribution:'Google Maps'});var baseLayers={"谷歌地图":normalMap,"谷歌卫星图":satelliteMap,"谷歌卫星标注": routeMap};var overlayLayers={};var mymap=L.map("googleMap-120.101101-30.239119",{center:[30.239119,120.101101],zoom:14,layers:[normalMap],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.239119','120.101101']).addTo(mymap);marker.bindPopup("这里是西湖灵隐寺，据说求姻缘很灵验哦！").openPopup();</script><br><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div id="geoqMap-120.101101-30.239119" style="max-width:90%; height:320px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div><script type="text/javascript">var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm2=L.tileLayer.chinaProvider('Geoq.Normal.PurplishBlue',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm3=L.tileLayer.chinaProvider('Geoq.Normal.Gray',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm4=L.tileLayer.chinaProvider('Geoq.Normal.Warm',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm5=L.tileLayer.chinaProvider('Geoq.Theme.Hydro',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm1,normalm2,normalm3,normalm4,normalm5]);var baseLayers={"智图地图":normalm1,"午夜蓝":normalm2,"灰色":normalm3,"暖色":normalm4,"水系":normalm5};var mymap=L.map("geoqMap-120.101101-30.239119",{center:[30.239119,120.101101],zoom:13,layers:[normalm3],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.239119','120.101101']).addTo(mymap);marker.bindPopup("这里是西湖灵隐寺，据说求姻缘很灵验哦！").openPopup();</script><br><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-31-隐藏块">2.31 隐藏块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>content：要隐藏的内容</li><li>display：展示前按钮显示的文字（可选）</li><li>bg：按钮的背景颜色（可选）</li><li>color：按钮显示的文字的颜色（可选）</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock 点我预览, blue %&#125;</span><br><span class="line">这里有张图片：</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;image (1)&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:67%;&quot;</span> /&gt;</span></span></span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="hide-block"><button type="button" class="hide-button" style="background-color:  blue;">点我预览    </button><div class="hide-content"><p>这里有张图片：<br><img src="https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb" alt="image (1)" style="zoom:67%;" /></p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 演示 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 外挂标签 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
